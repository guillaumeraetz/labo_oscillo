
labo_oscillo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a530  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a724  0800a724  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a724  0800a724  0001a724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a72c  0800a72c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a72c  0800a72c  0001a72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a730  0800a730  0001a730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  2000000c  0800a740  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  200007ac  0800a740  000207ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa7c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e0d  00000000  00000000  0004aab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002450  00000000  00000000  0004f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002230  00000000  00000000  00051d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eafc  00000000  00000000  00053f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e122  00000000  00000000  00082a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115703  00000000  00000000  000b0b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c6269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bb8  00000000  00000000  001c62bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a6e0 	.word	0x0800a6e0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800a6e0 	.word	0x0800a6e0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f002 fa35 	bl	800297e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f830 	bl	8000578 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000518:	f000 f8a0 	bl	800065c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 ffa0 	bl	8001460 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000520:	f000 f8ce 	bl	80006c0 <MX_ADC3_Init>
  MX_CRC_Init();
 8000524:	f000 f91e 	bl	8000764 <MX_CRC_Init>
  MX_DCMI_Init();
 8000528:	f000 f93e 	bl	80007a8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800052c:	f000 f970 	bl	8000810 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000530:	f000 ff46 	bl	80013c0 <MX_FMC_Init>
  MX_I2C3_Init();
 8000534:	f000 f99e 	bl	8000874 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000538:	f000 f9dc 	bl	80008f4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800053c:	f000 fa5c 	bl	80009f8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000540:	f000 fa86 	bl	8000a50 <MX_RTC_Init>
  MX_SAI2_Init();
 8000544:	f000 fb2a 	bl	8000b9c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000548:	f000 fbd0 	bl	8000cec <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800054c:	f000 fbee 	bl	8000d2c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000550:	f000 fc1c 	bl	8000d8c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000554:	f000 fc58 	bl	8000e08 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000558:	f000 fd02 	bl	8000f60 <MX_TIM2_Init>
  MX_TIM3_Init();
 800055c:	f000 fd76 	bl	800104c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000560:	f000 fdec 	bl	800113c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000564:	f000 fe62 	bl	800122c <MX_TIM8_Init>
  MX_TIM12_Init();
 8000568:	f000 feb4 	bl	80012d4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800056c:	f000 fef8 	bl	8001360 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000570:	f009 fe90 	bl	800a294 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x68>
	...

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f00a f8a2 	bl	800a6d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800059c:	f003 ff76 	bl	800448c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <SystemClock_Config+0xdc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a2b      	ldr	r2, [pc, #172]	; (8000654 <SystemClock_Config+0xdc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b29      	ldr	r3, [pc, #164]	; (8000654 <SystemClock_Config+0xdc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <SystemClock_Config+0xe0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a26      	ldr	r2, [pc, #152]	; (8000658 <SystemClock_Config+0xe0>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <SystemClock_Config+0xe0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005d0:	2309      	movs	r3, #9
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005e8:	2319      	movs	r3, #25
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80005ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005f6:	2309      	movs	r3, #9
 80005f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 f866 	bl	80046d0 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800060a:	f001 f963 	bl	80018d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800060e:	f003 ff4d 	bl	80044ac <HAL_PWREx_EnableOverDrive>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000618:	f001 f95c 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2106      	movs	r1, #6
 800063a:	4618      	mov	r0, r3
 800063c:	f004 faec 	bl	8004c18 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000646:	f001 f945 	bl	80018d4 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b0a2      	sub	sp, #136	; 0x88
 8000660:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2284      	movs	r2, #132	; 0x84
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f00a f831 	bl	800a6d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <PeriphCommonClock_Config+0x60>)
 8000670:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000672:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000676:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000678:	2305      	movs	r3, #5
 800067a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000680:	2303      	movs	r3, #3
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800068c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800068e:	2300      	movs	r3, #0
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fcd0 	bl	8005048 <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80006ae:	f001 f911 	bl	80018d4 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3788      	adds	r7, #136	; 0x88
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	00b00008 	.word	0x00b00008

080006c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC3_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC3_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC3_Init+0x98>)
 80006da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006de:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC3_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC3_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_ADC3_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC3_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC3_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_ADC3_Init+0x98>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC3_Init+0xa0>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC3_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_ADC3_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC3_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC3_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_ADC3_Init+0x98>)
 8000722:	f002 f97d 	bl	8002a20 <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800072c:	f001 f8d2 	bl	80018d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000730:	2304      	movs	r3, #4
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000734:	2301      	movs	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_ADC3_Init+0x98>)
 8000742:	f002 f9b1 	bl	8002aa8 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800074c:	f001 f8c2 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000028 	.word	0x20000028
 800075c:	40012200 	.word	0x40012200
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fcbd 	bl	800310c <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f001 f89c 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000070 	.word	0x20000070
 80007a4:	40023000 	.word	0x40023000

080007a8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_DCMI_Init+0x60>)
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_DCMI_Init+0x64>)
 80007b0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_DCMI_Init+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_DCMI_Init+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_DCMI_Init+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_DCMI_Init+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_DCMI_Init+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_DCMI_Init+0x60>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_DCMI_Init+0x60>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_DCMI_Init+0x60>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_DCMI_Init+0x60>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_DCMI_Init+0x60>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_DCMI_Init+0x60>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_DCMI_Init+0x60>)
 80007f6:	f002 fd73 	bl	80032e0 <HAL_DCMI_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000800:	f001 f868 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000094 	.word	0x20000094
 800080c:	50050000 	.word	0x50050000

08000810 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000816:	4a16      	ldr	r2, [pc, #88]	; (8000870 <MX_DMA2D_Init+0x60>)
 8000818:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_DMA2D_Init+0x5c>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_DMA2D_Init+0x5c>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_DMA2D_Init+0x5c>)
 800083a:	2200      	movs	r2, #0
 800083c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000840:	2200      	movs	r2, #0
 8000842:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000846:	f002 fdc5 	bl	80033d4 <HAL_DMA2D_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000850:	f001 f840 	bl	80018d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000854:	2101      	movs	r1, #1
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000858:	f002 ff16 	bl	8003688 <HAL_DMA2D_ConfigLayer>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000862:	f001 f837 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000e4 	.word	0x200000e4
 8000870:	4002b000 	.word	0x4002b000

08000874 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_I2C3_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_I2C3_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_I2C3_Init+0x74>)
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <MX_I2C3_Init+0x7c>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_I2C3_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_I2C3_Init+0x74>)
 800088c:	2201      	movs	r2, #1
 800088e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_I2C3_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_I2C3_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2C3_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_I2C3_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_I2C3_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <MX_I2C3_Init+0x74>)
 80008b0:	f003 f95a 	bl	8003b68 <HAL_I2C_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80008ba:	f001 f80b 	bl	80018d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <MX_I2C3_Init+0x74>)
 80008c2:	f003 f9e1 	bl	8003c88 <HAL_I2CEx_ConfigAnalogFilter>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f001 f802 	bl	80018d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_I2C3_Init+0x74>)
 80008d4:	f003 fa23 	bl	8003d1e <HAL_I2CEx_ConfigDigitalFilter>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008de:	f000 fff9 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000124 	.word	0x20000124
 80008ec:	40005c00 	.word	0x40005c00
 80008f0:	00c0eaff 	.word	0x00c0eaff

080008f4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	; 0x38
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2234      	movs	r2, #52	; 0x34
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f009 fee5 	bl	800a6d0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000906:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <MX_LTDC_Init+0xfc>)
 8000908:	4a3a      	ldr	r2, [pc, #232]	; (80009f4 <MX_LTDC_Init+0x100>)
 800090a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800090c:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <MX_LTDC_Init+0xfc>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000912:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <MX_LTDC_Init+0xfc>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000918:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <MX_LTDC_Init+0xfc>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800091e:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <MX_LTDC_Init+0xfc>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000924:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <MX_LTDC_Init+0xfc>)
 8000926:	2228      	movs	r2, #40	; 0x28
 8000928:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800092a:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <MX_LTDC_Init+0xfc>)
 800092c:	2209      	movs	r2, #9
 800092e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000930:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <MX_LTDC_Init+0xfc>)
 8000932:	2235      	movs	r2, #53	; 0x35
 8000934:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000936:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <MX_LTDC_Init+0xfc>)
 8000938:	220b      	movs	r2, #11
 800093a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800093c:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <MX_LTDC_Init+0xfc>)
 800093e:	f240 2215 	movw	r2, #533	; 0x215
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_LTDC_Init+0xfc>)
 8000946:	f240 121b 	movw	r2, #283	; 0x11b
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800094c:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <MX_LTDC_Init+0xfc>)
 800094e:	f240 2235 	movw	r2, #565	; 0x235
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_LTDC_Init+0xfc>)
 8000956:	f240 121d 	movw	r2, #285	; 0x11d
 800095a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_LTDC_Init+0xfc>)
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_LTDC_Init+0xfc>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <MX_LTDC_Init+0xfc>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000974:	481e      	ldr	r0, [pc, #120]	; (80009f0 <MX_LTDC_Init+0xfc>)
 8000976:	f003 fa1f 	bl	8003db8 <HAL_LTDC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000980:	f000 ffa8 	bl	80018d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000988:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800098c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000992:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000996:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000998:	2302      	movs	r3, #2
 800099a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800099c:	23ff      	movs	r3, #255	; 0xff
 800099e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009a8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009aa:	2307      	movs	r3, #7
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80009ae:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80009b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80009ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_LTDC_Init+0xfc>)
 80009da:	f003 fb7f 	bl	80040dc <HAL_LTDC_ConfigLayer>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80009e4:	f000 ff76 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3738      	adds	r7, #56	; 0x38
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000170 	.word	0x20000170
 80009f4:	40016800 	.word	0x40016800

080009f8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_QUADSPI_Init+0x50>)
 80009fe:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <MX_QUADSPI_Init+0x54>)
 8000a00:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_QUADSPI_Init+0x50>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_QUADSPI_Init+0x50>)
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_QUADSPI_Init+0x50>)
 8000a10:	2210      	movs	r2, #16
 8000a12:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_QUADSPI_Init+0x50>)
 8000a16:	2218      	movs	r2, #24
 8000a18:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_QUADSPI_Init+0x50>)
 8000a1c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000a20:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_QUADSPI_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_QUADSPI_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_QUADSPI_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_QUADSPI_Init+0x50>)
 8000a36:	f003 fd89 	bl	800454c <HAL_QSPI_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000a40:	f000 ff48 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000218 	.word	0x20000218
 8000a4c:	a0001000 	.word	0xa0001000

08000a50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b092      	sub	sp, #72	; 0x48
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
 8000a66:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	222c      	movs	r2, #44	; 0x2c
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f009 fe2c 	bl	800a6d0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a78:	4b46      	ldr	r3, [pc, #280]	; (8000b94 <MX_RTC_Init+0x144>)
 8000a7a:	4a47      	ldr	r2, [pc, #284]	; (8000b98 <MX_RTC_Init+0x148>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a7e:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <MX_RTC_Init+0x144>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a84:	4b43      	ldr	r3, [pc, #268]	; (8000b94 <MX_RTC_Init+0x144>)
 8000a86:	227f      	movs	r2, #127	; 0x7f
 8000a88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a8a:	4b42      	ldr	r3, [pc, #264]	; (8000b94 <MX_RTC_Init+0x144>)
 8000a8c:	22ff      	movs	r2, #255	; 0xff
 8000a8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a90:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <MX_RTC_Init+0x144>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a96:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <MX_RTC_Init+0x144>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <MX_RTC_Init+0x144>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aa2:	483c      	ldr	r0, [pc, #240]	; (8000b94 <MX_RTC_Init+0x144>)
 8000aa4:	f005 f804 	bl	8005ab0 <HAL_RTC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000aae:	f000 ff11 	bl	80018d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	482f      	ldr	r0, [pc, #188]	; (8000b94 <MX_RTC_Init+0x144>)
 8000ad6:	f005 f87d 	bl	8005bd4 <HAL_RTC_SetTime>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000ae0:	f000 fef8 	bl	80018d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000afc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b00:	2201      	movs	r2, #1
 8000b02:	4619      	mov	r1, r3
 8000b04:	4823      	ldr	r0, [pc, #140]	; (8000b94 <MX_RTC_Init+0x144>)
 8000b06:	f005 f923 	bl	8005d50 <HAL_RTC_SetDate>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000b10:	f000 fee0 	bl	80018d4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	2201      	movs	r2, #1
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <MX_RTC_Init+0x144>)
 8000b4c:	f005 f9a8 	bl	8005ea0 <HAL_RTC_SetAlarm>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000b56:	f000 febd 	bl	80018d4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	480b      	ldr	r0, [pc, #44]	; (8000b94 <MX_RTC_Init+0x144>)
 8000b68:	f005 f99a 	bl	8005ea0 <HAL_RTC_SetAlarm>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000b72:	f000 feaf 	bl	80018d4 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000b76:	2202      	movs	r2, #2
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <MX_RTC_Init+0x144>)
 8000b7c:	f005 fb1a 	bl	80061b4 <HAL_RTCEx_SetTimeStamp>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000b86:	f000 fea5 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	3748      	adds	r7, #72	; 0x48
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000264 	.word	0x20000264
 8000b98:	40002800 	.word	0x40002800

08000b9c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000ba0:	4b4d      	ldr	r3, [pc, #308]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000ba2:	4a4e      	ldr	r2, [pc, #312]	; (8000cdc <MX_SAI2_Init+0x140>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ba6:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000bac:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000bb2:	4b49      	ldr	r3, [pc, #292]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bb4:	2240      	movs	r2, #64	; 0x40
 8000bb6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000bb8:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000bbe:	4b46      	ldr	r3, [pc, #280]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bc4:	4b44      	ldr	r3, [pc, #272]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bca:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000bd0:	4b41      	ldr	r3, [pc, #260]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bd6:	4b40      	ldr	r3, [pc, #256]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000bdc:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bde:	4a40      	ldr	r2, [pc, #256]	; (8000ce0 <MX_SAI2_Init+0x144>)
 8000be0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000be2:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000be8:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bee:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000bf4:	4b38      	ldr	r3, [pc, #224]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000bfa:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000c00:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000c18:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000c30:	4829      	ldr	r0, [pc, #164]	; (8000cd8 <MX_SAI2_Init+0x13c>)
 8000c32:	f005 fb15 	bl	8006260 <HAL_SAI_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000c3c:	f000 fe4a 	bl	80018d4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c42:	4a29      	ldr	r2, [pc, #164]	; (8000ce8 <MX_SAI2_Init+0x14c>)
 8000c44:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000c4c:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c4e:	2203      	movs	r2, #3
 8000c50:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c54:	2240      	movs	r2, #64	; 0x40
 8000c56:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c90:	2208      	movs	r2, #8
 8000c92:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <MX_SAI2_Init+0x148>)
 8000cc6:	f005 facb 	bl	8006260 <HAL_SAI_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000cd0:	f000 fe00 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000284 	.word	0x20000284
 8000cdc:	40015c04 	.word	0x40015c04
 8000ce0:	0002ee00 	.word	0x0002ee00
 8000ce4:	20000308 	.word	0x20000308
 8000ce8:	40015c24 	.word	0x40015c24

08000cec <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_SDMMC1_SD_Init+0x38>)
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <MX_SDMMC1_SD_Init+0x3c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_SDMMC1_SD_Init+0x38>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_SDMMC1_SD_Init+0x38>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_SDMMC1_SD_Init+0x38>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_SDMMC1_SD_Init+0x38>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <MX_SDMMC1_SD_Init+0x38>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <MX_SDMMC1_SD_Init+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	2000038c 	.word	0x2000038c
 8000d28:	40012c00 	.word	0x40012c00

08000d2c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d32:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000d36:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_SPDIFRX_Init+0x5c>)
 8000d76:	f006 fdf1 	bl	800795c <HAL_SPDIFRX_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000d80:	f000 fda8 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000410 	.word	0x20000410

08000d8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <MX_SPI2_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000da6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000daa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dbe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000dda:	2207      	movs	r2, #7
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000de6:	2208      	movs	r2, #8
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_SPI2_Init+0x74>)
 8000dec:	f006 fe12 	bl	8007a14 <HAL_SPI_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000df6:	f000 fd6d 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000045c 	.word	0x2000045c
 8000e04:	40003800 	.word	0x40003800

08000e08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b09a      	sub	sp, #104	; 0x68
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
 8000e38:	615a      	str	r2, [r3, #20]
 8000e3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	222c      	movs	r2, #44	; 0x2c
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f009 fc44 	bl	800a6d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e48:	4b43      	ldr	r3, [pc, #268]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000e4a:	4a44      	ldr	r2, [pc, #272]	; (8000f5c <MX_TIM1_Init+0x154>)
 8000e4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e4e:	4b42      	ldr	r3, [pc, #264]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b40      	ldr	r3, [pc, #256]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e62:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e68:	4b3b      	ldr	r3, [pc, #236]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e74:	4838      	ldr	r0, [pc, #224]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000e76:	f006 fe78 	bl	8007b6a <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e80:	f000 fd28 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e88:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4831      	ldr	r0, [pc, #196]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000e92:	f007 f9c3 	bl	800821c <HAL_TIM_ConfigClockSource>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e9c:	f000 fd1a 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ea0:	482d      	ldr	r0, [pc, #180]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000ea2:	f006 ff31 	bl	8007d08 <HAL_TIM_PWM_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000eac:	f000 fd12 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ebc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4825      	ldr	r0, [pc, #148]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000ec4:	f007 fe34 	bl	8008b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000ece:	f000 fd01 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed2:	2360      	movs	r3, #96	; 0x60
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4818      	ldr	r0, [pc, #96]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000ef8:	f007 f87c 	bl	8007ff4 <HAL_TIM_PWM_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f02:	f000 fce7 	bl	80018d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000f3c:	f007 fe86 	bl	8008c4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000f46:	f000 fcc5 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <MX_TIM1_Init+0x150>)
 8000f4c:	f001 f9e6 	bl	800231c <HAL_TIM_MspPostInit>

}
 8000f50:	bf00      	nop
 8000f52:	3768      	adds	r7, #104	; 0x68
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200004c0 	.word	0x200004c0
 8000f5c:	40010000 	.word	0x40010000

08000f60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	; 0x38
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_TIM2_Init+0xe8>)
 8000f94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <MX_TIM2_Init+0xe8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <MX_TIM2_Init+0xe8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <MX_TIM2_Init+0xe8>)
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <MX_TIM2_Init+0xe8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <MX_TIM2_Init+0xe8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fba:	4823      	ldr	r0, [pc, #140]	; (8001048 <MX_TIM2_Init+0xe8>)
 8000fbc:	f006 fdd5 	bl	8007b6a <HAL_TIM_Base_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000fc6:	f000 fc85 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481c      	ldr	r0, [pc, #112]	; (8001048 <MX_TIM2_Init+0xe8>)
 8000fd8:	f007 f920 	bl	800821c <HAL_TIM_ConfigClockSource>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000fe2:	f000 fc77 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fe6:	4818      	ldr	r0, [pc, #96]	; (8001048 <MX_TIM2_Init+0xe8>)
 8000fe8:	f006 fe8e 	bl	8007d08 <HAL_TIM_PWM_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ff2:	f000 fc6f 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <MX_TIM2_Init+0xe8>)
 8001006:	f007 fd93 	bl	8008b30 <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001010:	f000 fc60 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001014:	2360      	movs	r3, #96	; 0x60
 8001016:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <MX_TIM2_Init+0xe8>)
 800102c:	f006 ffe2 	bl	8007ff4 <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001036:	f000 fc4d 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <MX_TIM2_Init+0xe8>)
 800103c:	f001 f96e 	bl	800231c <HAL_TIM_MspPostInit>

}
 8001040:	bf00      	nop
 8001042:	3738      	adds	r7, #56	; 0x38
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000050c 	.word	0x2000050c

0800104c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106c:	463b      	mov	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	615a      	str	r2, [r3, #20]
 800107c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800107e:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <MX_TIM3_Init+0xe8>)
 8001080:	4a2d      	ldr	r2, [pc, #180]	; (8001138 <MX_TIM3_Init+0xec>)
 8001082:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001084:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <MX_TIM3_Init+0xe8>)
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <MX_TIM3_Init+0xe8>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <MX_TIM3_Init+0xe8>)
 8001092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001096:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <MX_TIM3_Init+0xe8>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <MX_TIM3_Init+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010a4:	4823      	ldr	r0, [pc, #140]	; (8001134 <MX_TIM3_Init+0xe8>)
 80010a6:	f006 fd60 	bl	8007b6a <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80010b0:	f000 fc10 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010be:	4619      	mov	r1, r3
 80010c0:	481c      	ldr	r0, [pc, #112]	; (8001134 <MX_TIM3_Init+0xe8>)
 80010c2:	f007 f8ab 	bl	800821c <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80010cc:	f000 fc02 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010d0:	4818      	ldr	r0, [pc, #96]	; (8001134 <MX_TIM3_Init+0xe8>)
 80010d2:	f006 fe19 	bl	8007d08 <HAL_TIM_PWM_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80010dc:	f000 fbfa 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <MX_TIM3_Init+0xe8>)
 80010f0:	f007 fd1e 	bl	8008b30 <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80010fa:	f000 fbeb 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010fe:	2360      	movs	r3, #96	; 0x60
 8001100:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	4619      	mov	r1, r3
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <MX_TIM3_Init+0xe8>)
 8001116:	f006 ff6d 	bl	8007ff4 <HAL_TIM_PWM_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001120:	f000 fbd8 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <MX_TIM3_Init+0xe8>)
 8001126:	f001 f8f9 	bl	800231c <HAL_TIM_MspPostInit>

}
 800112a:	bf00      	nop
 800112c:	3738      	adds	r7, #56	; 0x38
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000558 	.word	0x20000558
 8001138:	40000400 	.word	0x40000400

0800113c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <MX_TIM5_Init+0xe8>)
 8001170:	4a2d      	ldr	r2, [pc, #180]	; (8001228 <MX_TIM5_Init+0xec>)
 8001172:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <MX_TIM5_Init+0xe8>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <MX_TIM5_Init+0xe8>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001180:	4b28      	ldr	r3, [pc, #160]	; (8001224 <MX_TIM5_Init+0xe8>)
 8001182:	f04f 32ff 	mov.w	r2, #4294967295
 8001186:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b26      	ldr	r3, [pc, #152]	; (8001224 <MX_TIM5_Init+0xe8>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b25      	ldr	r3, [pc, #148]	; (8001224 <MX_TIM5_Init+0xe8>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001194:	4823      	ldr	r0, [pc, #140]	; (8001224 <MX_TIM5_Init+0xe8>)
 8001196:	f006 fce8 	bl	8007b6a <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80011a0:	f000 fb98 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ae:	4619      	mov	r1, r3
 80011b0:	481c      	ldr	r0, [pc, #112]	; (8001224 <MX_TIM5_Init+0xe8>)
 80011b2:	f007 f833 	bl	800821c <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80011bc:	f000 fb8a 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80011c0:	4818      	ldr	r0, [pc, #96]	; (8001224 <MX_TIM5_Init+0xe8>)
 80011c2:	f006 fda1 	bl	8007d08 <HAL_TIM_PWM_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80011cc:	f000 fb82 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4811      	ldr	r0, [pc, #68]	; (8001224 <MX_TIM5_Init+0xe8>)
 80011e0:	f007 fca6 	bl	8008b30 <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80011ea:	f000 fb73 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ee:	2360      	movs	r3, #96	; 0x60
 80011f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	220c      	movs	r2, #12
 8001202:	4619      	mov	r1, r3
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <MX_TIM5_Init+0xe8>)
 8001206:	f006 fef5 	bl	8007ff4 <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001210:	f000 fb60 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <MX_TIM5_Init+0xe8>)
 8001216:	f001 f881 	bl	800231c <HAL_TIM_MspPostInit>

}
 800121a:	bf00      	nop
 800121c:	3738      	adds	r7, #56	; 0x38
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200005a4 	.word	0x200005a4
 8001228:	40000c00 	.word	0x40000c00

0800122c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_TIM8_Init+0xa0>)
 800124c:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <MX_TIM8_Init+0xa4>)
 800124e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_TIM8_Init+0xa0>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_TIM8_Init+0xa0>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_TIM8_Init+0xa0>)
 800125e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001262:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_TIM8_Init+0xa0>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_TIM8_Init+0xa0>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_TIM8_Init+0xa0>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001276:	4815      	ldr	r0, [pc, #84]	; (80012cc <MX_TIM8_Init+0xa0>)
 8001278:	f006 fc77 	bl	8007b6a <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001282:	f000 fb27 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <MX_TIM8_Init+0xa0>)
 8001294:	f006 ffc2 	bl	800821c <HAL_TIM_ConfigClockSource>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800129e:	f000 fb19 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_TIM8_Init+0xa0>)
 80012b4:	f007 fc3c 	bl	8008b30 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80012be:	f000 fb09 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200005f0 	.word	0x200005f0
 80012d0:	40010400 	.word	0x40010400

080012d4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_TIM12_Init+0x84>)
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <MX_TIM12_Init+0x88>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_TIM12_Init+0x84>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_TIM12_Init+0x84>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_TIM12_Init+0x84>)
 8001300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001304:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_TIM12_Init+0x84>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_TIM12_Init+0x84>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <MX_TIM12_Init+0x84>)
 8001314:	f006 fcf8 	bl	8007d08 <HAL_TIM_PWM_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800131e:	f000 fad9 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001322:	2360      	movs	r3, #96	; 0x60
 8001324:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM12_Init+0x84>)
 800133a:	f006 fe5b 	bl	8007ff4 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001344:	f000 fac6 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM12_Init+0x84>)
 800134a:	f000 ffe7 	bl	800231c <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000063c 	.word	0x2000063c
 800135c:	40001800 	.word	0x40001800

08001360 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_USART1_UART_Init+0x58>)
 8001366:	4a15      	ldr	r2, [pc, #84]	; (80013bc <MX_USART1_UART_Init+0x5c>)
 8001368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <MX_USART1_UART_Init+0x58>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_USART1_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_USART1_UART_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_USART1_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_USART1_UART_Init+0x58>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_USART1_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_USART1_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_USART1_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_USART1_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_USART1_UART_Init+0x58>)
 80013a4:	f007 fcee 	bl	8008d84 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ae:	f000 fa91 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000688 	.word	0x20000688
 80013bc:	40011000 	.word	0x40011000

080013c0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
 80013d4:	615a      	str	r2, [r3, #20]
 80013d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <MX_FMC_Init+0x98>)
 80013da:	4a20      	ldr	r2, [pc, #128]	; (800145c <MX_FMC_Init+0x9c>)
 80013dc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80013de:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <MX_FMC_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <MX_FMC_Init+0x98>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_FMC_Init+0x98>)
 80013ec:	2204      	movs	r2, #4
 80013ee:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_FMC_Init+0x98>)
 80013f2:	2210      	movs	r2, #16
 80013f4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_FMC_Init+0x98>)
 80013f8:	2240      	movs	r2, #64	; 0x40
 80013fa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_FMC_Init+0x98>)
 80013fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001402:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_FMC_Init+0x98>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_FMC_Init+0x98>)
 800140c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001410:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_FMC_Init+0x98>)
 8001414:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_FMC_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001420:	2302      	movs	r3, #2
 8001422:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001424:	2307      	movs	r3, #7
 8001426:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001428:	2304      	movs	r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800142c:	2307      	movs	r3, #7
 800142e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001430:	2303      	movs	r3, #3
 8001432:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001438:	2302      	movs	r3, #2
 800143a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_FMC_Init+0x98>)
 8001442:	f006 fa56 	bl	80078f2 <HAL_SDRAM_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800144c:	f000 fa42 	bl	80018d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000070c 	.word	0x2000070c
 800145c:	a0000140 	.word	0xa0000140

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b090      	sub	sp, #64	; 0x40
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001476:	4bb0      	ldr	r3, [pc, #704]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4aaf      	ldr	r2, [pc, #700]	; (8001738 <MX_GPIO_Init+0x2d8>)
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4bad      	ldr	r3, [pc, #692]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800148e:	4baa      	ldr	r3, [pc, #680]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4aa9      	ldr	r2, [pc, #676]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4ba7      	ldr	r3, [pc, #668]	; (8001738 <MX_GPIO_Init+0x2d8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4ba4      	ldr	r3, [pc, #656]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4aa3      	ldr	r2, [pc, #652]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4ba1      	ldr	r3, [pc, #644]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
 80014bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	4b9e      	ldr	r3, [pc, #632]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a9d      	ldr	r2, [pc, #628]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b9b      	ldr	r3, [pc, #620]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	4b98      	ldr	r3, [pc, #608]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a97      	ldr	r2, [pc, #604]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b95      	ldr	r3, [pc, #596]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b92      	ldr	r3, [pc, #584]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a91      	ldr	r2, [pc, #580]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b8f      	ldr	r3, [pc, #572]	; (8001738 <MX_GPIO_Init+0x2d8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001506:	4b8c      	ldr	r3, [pc, #560]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a8b      	ldr	r2, [pc, #556]	; (8001738 <MX_GPIO_Init+0x2d8>)
 800150c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b89      	ldr	r3, [pc, #548]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800151e:	4b86      	ldr	r3, [pc, #536]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a85      	ldr	r2, [pc, #532]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b83      	ldr	r3, [pc, #524]	; (8001738 <MX_GPIO_Init+0x2d8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001536:	4b80      	ldr	r3, [pc, #512]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a7f      	ldr	r2, [pc, #508]	; (8001738 <MX_GPIO_Init+0x2d8>)
 800153c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b7d      	ldr	r3, [pc, #500]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800154e:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a79      	ldr	r2, [pc, #484]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001554:	f043 0320 	orr.w	r3, r3, #32
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b77      	ldr	r3, [pc, #476]	; (8001738 <MX_GPIO_Init+0x2d8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0320 	and.w	r3, r3, #32
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001566:	4b74      	ldr	r3, [pc, #464]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a73      	ldr	r2, [pc, #460]	; (8001738 <MX_GPIO_Init+0x2d8>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b71      	ldr	r3, [pc, #452]	; (8001738 <MX_GPIO_Init+0x2d8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2120      	movs	r1, #32
 8001582:	486e      	ldr	r0, [pc, #440]	; (800173c <MX_GPIO_Init+0x2dc>)
 8001584:	f002 fad6 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	210c      	movs	r1, #12
 800158c:	486c      	ldr	r0, [pc, #432]	; (8001740 <MX_GPIO_Init+0x2e0>)
 800158e:	f002 fad1 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2108      	movs	r1, #8
 8001596:	486b      	ldr	r0, [pc, #428]	; (8001744 <MX_GPIO_Init+0x2e4>)
 8001598:	f002 facc 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a2:	4867      	ldr	r0, [pc, #412]	; (8001740 <MX_GPIO_Init+0x2e0>)
 80015a4:	f002 fac6 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ae:	4866      	ldr	r0, [pc, #408]	; (8001748 <MX_GPIO_Init+0x2e8>)
 80015b0:	f002 fac0 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	21c8      	movs	r1, #200	; 0xc8
 80015b8:	4864      	ldr	r0, [pc, #400]	; (800174c <MX_GPIO_Init+0x2ec>)
 80015ba:	f002 fabb 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80015be:	2308      	movs	r3, #8
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c2:	2300      	movs	r3, #0
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ce:	4619      	mov	r1, r3
 80015d0:	485f      	ldr	r0, [pc, #380]	; (8001750 <MX_GPIO_Init+0x2f0>)
 80015d2:	f002 f8eb 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80015d6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e8:	230b      	movs	r3, #11
 80015ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f0:	4619      	mov	r1, r3
 80015f2:	4856      	ldr	r0, [pc, #344]	; (800174c <MX_GPIO_Init+0x2ec>)
 80015f4:	f002 f8da 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80015f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fe:	2312      	movs	r3, #18
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001602:	2301      	movs	r3, #1
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160a:	2304      	movs	r3, #4
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001612:	4619      	mov	r1, r3
 8001614:	484f      	ldr	r0, [pc, #316]	; (8001754 <MX_GPIO_Init+0x2f4>)
 8001616:	f002 f8c9 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800161a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800162c:	230a      	movs	r3, #10
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001634:	4619      	mov	r1, r3
 8001636:	4847      	ldr	r0, [pc, #284]	; (8001754 <MX_GPIO_Init+0x2f4>)
 8001638:	f002 f8b8 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001642:	2300      	movs	r3, #0
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164e:	4619      	mov	r1, r3
 8001650:	4841      	ldr	r0, [pc, #260]	; (8001758 <MX_GPIO_Init+0x2f8>)
 8001652:	f002 f8ab 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800165a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001668:	4619      	mov	r1, r3
 800166a:	4834      	ldr	r0, [pc, #208]	; (800173c <MX_GPIO_Init+0x2dc>)
 800166c:	f002 f89e 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001670:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001682:	230a      	movs	r3, #10
 8001684:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800168a:	4619      	mov	r1, r3
 800168c:	4833      	ldr	r0, [pc, #204]	; (800175c <MX_GPIO_Init+0x2fc>)
 800168e:	f002 f88d 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001692:	2320      	movs	r3, #32
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a6:	4619      	mov	r1, r3
 80016a8:	4824      	ldr	r0, [pc, #144]	; (800173c <MX_GPIO_Init+0x2dc>)
 80016aa:	f002 f87f 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80016ae:	f241 030c 	movw	r3, #4108	; 0x100c
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c4:	4619      	mov	r1, r3
 80016c6:	481e      	ldr	r0, [pc, #120]	; (8001740 <MX_GPIO_Init+0x2e0>)
 80016c8:	f002 f870 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80016cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d2:	2300      	movs	r3, #0
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016de:	4619      	mov	r1, r3
 80016e0:	481f      	ldr	r0, [pc, #124]	; (8001760 <MX_GPIO_Init+0x300>)
 80016e2:	f002 f863 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80016e6:	2308      	movs	r3, #8
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fa:	4619      	mov	r1, r3
 80016fc:	4811      	ldr	r0, [pc, #68]	; (8001744 <MX_GPIO_Init+0x2e4>)
 80016fe:	f002 f855 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001702:	2310      	movs	r3, #16
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001706:	2300      	movs	r3, #0
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001712:	4619      	mov	r1, r3
 8001714:	4809      	ldr	r0, [pc, #36]	; (800173c <MX_GPIO_Init+0x2dc>)
 8001716:	f002 f849 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800171a:	f248 0304 	movw	r3, #32772	; 0x8004
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172c:	4619      	mov	r1, r3
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <MX_GPIO_Init+0x2e8>)
 8001730:	f002 f83c 	bl	80037ac <HAL_GPIO_Init>
 8001734:	e016      	b.n	8001764 <MX_GPIO_Init+0x304>
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40022000 	.word	0x40022000
 8001744:	40022800 	.word	0x40022800
 8001748:	40021c00 	.word	0x40021c00
 800174c:	40021800 	.word	0x40021800
 8001750:	40021000 	.word	0x40021000
 8001754:	40020400 	.word	0x40020400
 8001758:	40022400 	.word	0x40022400
 800175c:	40020000 	.word	0x40020000
 8001760:	40020800 	.word	0x40020800

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177a:	4619      	mov	r1, r3
 800177c:	4847      	ldr	r0, [pc, #284]	; (800189c <MX_GPIO_Init+0x43c>)
 800177e:	f002 f815 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001788:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	4619      	mov	r1, r3
 8001798:	4841      	ldr	r0, [pc, #260]	; (80018a0 <MX_GPIO_Init+0x440>)
 800179a:	f002 f807 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800179e:	23c0      	movs	r3, #192	; 0xc0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017ae:	2308      	movs	r3, #8
 80017b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b6:	4619      	mov	r1, r3
 80017b8:	483a      	ldr	r0, [pc, #232]	; (80018a4 <MX_GPIO_Init+0x444>)
 80017ba:	f001 fff7 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80017be:	2310      	movs	r3, #16
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017ce:	230a      	movs	r3, #10
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d6:	4619      	mov	r1, r3
 80017d8:	4830      	ldr	r0, [pc, #192]	; (800189c <MX_GPIO_Init+0x43c>)
 80017da:	f001 ffe7 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80017de:	23c8      	movs	r3, #200	; 0xc8
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f2:	4619      	mov	r1, r3
 80017f4:	482c      	ldr	r0, [pc, #176]	; (80018a8 <MX_GPIO_Init+0x448>)
 80017f6:	f001 ffd9 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80017fa:	2305      	movs	r3, #5
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800180a:	230a      	movs	r3, #10
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001812:	4619      	mov	r1, r3
 8001814:	4823      	ldr	r0, [pc, #140]	; (80018a4 <MX_GPIO_Init+0x444>)
 8001816:	f001 ffc9 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800181a:	2332      	movs	r3, #50	; 0x32
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800182a:	230b      	movs	r3, #11
 800182c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001832:	4619      	mov	r1, r3
 8001834:	481b      	ldr	r0, [pc, #108]	; (80018a4 <MX_GPIO_Init+0x444>)
 8001836:	f001 ffb9 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800183a:	2304      	movs	r3, #4
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	4816      	ldr	r0, [pc, #88]	; (80018a8 <MX_GPIO_Init+0x448>)
 800184e:	f001 ffad 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001852:	2386      	movs	r3, #134	; 0x86
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001862:	230b      	movs	r3, #11
 8001864:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186a:	4619      	mov	r1, r3
 800186c:	480f      	ldr	r0, [pc, #60]	; (80018ac <MX_GPIO_Init+0x44c>)
 800186e:	f001 ff9d 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001872:	2328      	movs	r3, #40	; 0x28
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001882:	230a      	movs	r3, #10
 8001884:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188a:	4619      	mov	r1, r3
 800188c:	4807      	ldr	r0, [pc, #28]	; (80018ac <MX_GPIO_Init+0x44c>)
 800188e:	f001 ff8d 	bl	80037ac <HAL_GPIO_Init>

}
 8001892:	bf00      	nop
 8001894:	3740      	adds	r7, #64	; 0x40
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40021c00 	.word	0x40021c00
 80018a0:	40022000 	.word	0x40022000
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40021800 	.word	0x40021800
 80018ac:	40020000 	.word	0x40020000

080018b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c2:	f001 f869 	bl	8002998 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40001000 	.word	0x40001000

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	e7fe      	b.n	80018dc <Error_Handler+0x8>
	...

080018e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_MspInit+0x44>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_MspInit+0x44>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_MspInit+0x44>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_MspInit+0x44>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_MspInit+0x44>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_MspInit+0x44>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a21      	ldr	r2, [pc, #132]	; (80019cc <HAL_ADC_MspInit+0xa4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d13c      	bne.n	80019c4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_ADC_MspInit+0xa8>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <HAL_ADC_MspInit+0xa8>)
 8001950:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_ADC_MspInit+0xa8>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_ADC_MspInit+0xa8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <HAL_ADC_MspInit+0xa8>)
 8001968:	f043 0320 	orr.w	r3, r3, #32
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_ADC_MspInit+0xa8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_ADC_MspInit+0xa8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <HAL_ADC_MspInit+0xa8>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_ADC_MspInit+0xa8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001992:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001996:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001998:	2303      	movs	r3, #3
 800199a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	480b      	ldr	r0, [pc, #44]	; (80019d4 <HAL_ADC_MspInit+0xac>)
 80019a8:	f001 ff00 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80019ac:	2301      	movs	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b0:	2303      	movs	r3, #3
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <HAL_ADC_MspInit+0xb0>)
 80019c0:	f001 fef4 	bl	80037ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	; 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40012200 	.word	0x40012200
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40021400 	.word	0x40021400
 80019d8:	40020000 	.word	0x40020000

080019dc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_CRC_MspInit+0x38>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10b      	bne.n	8001a06 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_CRC_MspInit+0x3c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_CRC_MspInit+0x3c>)
 80019f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_CRC_MspInit+0x3c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023000 	.word	0x40023000
 8001a18:	40023800 	.word	0x40023800

08001a1c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08e      	sub	sp, #56	; 0x38
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a50      	ldr	r2, [pc, #320]	; (8001b7c <HAL_DCMI_MspInit+0x160>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	f040 809a 	bne.w	8001b74 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a44:	4a4e      	ldr	r2, [pc, #312]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6353      	str	r3, [r2, #52]	; 0x34
 8001a4c:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a58:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	4a48      	ldr	r2, [pc, #288]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	6313      	str	r3, [r2, #48]	; 0x30
 8001a64:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a70:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4a42      	ldr	r2, [pc, #264]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7c:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a88:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	4a3c      	ldr	r2, [pc, #240]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a92:	6313      	str	r3, [r2, #48]	; 0x30
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	4a36      	ldr	r2, [pc, #216]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001aac:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	4a30      	ldr	r2, [pc, #192]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_DCMI_MspInit+0x164>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001ad0:	2360      	movs	r3, #96	; 0x60
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ae0:	230d      	movs	r3, #13
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4826      	ldr	r0, [pc, #152]	; (8001b84 <HAL_DCMI_MspInit+0x168>)
 8001aec:	f001 fe5e 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001af0:	2308      	movs	r3, #8
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b00:	230d      	movs	r3, #13
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481f      	ldr	r0, [pc, #124]	; (8001b88 <HAL_DCMI_MspInit+0x16c>)
 8001b0c:	f001 fe4e 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b22:	230d      	movs	r3, #13
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4817      	ldr	r0, [pc, #92]	; (8001b8c <HAL_DCMI_MspInit+0x170>)
 8001b2e:	f001 fe3d 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001b32:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b44:	230d      	movs	r3, #13
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4810      	ldr	r0, [pc, #64]	; (8001b90 <HAL_DCMI_MspInit+0x174>)
 8001b50:	f001 fe2c 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001b54:	2350      	movs	r3, #80	; 0x50
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b64:	230d      	movs	r3, #13
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4809      	ldr	r0, [pc, #36]	; (8001b94 <HAL_DCMI_MspInit+0x178>)
 8001b70:	f001 fe1c 	bl	80037ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3738      	adds	r7, #56	; 0x38
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	50050000 	.word	0x50050000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	40021c00 	.word	0x40021c00
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <HAL_DMA2D_MspInit+0x44>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d113      	bne.n	8001bd2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_DMA2D_MspInit+0x48>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <HAL_DMA2D_MspInit+0x48>)
 8001bb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_DMA2D_MspInit+0x48>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	205a      	movs	r0, #90	; 0x5a
 8001bc8:	f001 fa76 	bl	80030b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001bcc:	205a      	movs	r0, #90	; 0x5a
 8001bce:	f001 fa8f 	bl	80030f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	4002b000 	.word	0x4002b000
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b0aa      	sub	sp, #168	; 0xa8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	2284      	movs	r2, #132	; 0x84
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f008 fd63 	bl	800a6d0 <memset>
  if(hi2c->Instance==I2C3)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <HAL_I2C_MspInit+0xb4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d13c      	bne.n	8001c8e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fa10 	bl	8005048 <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c2e:	f7ff fe51 	bl	80018d4 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <HAL_I2C_MspInit+0xb8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_I2C_MspInit+0xb8>)
 8001c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_I2C_MspInit+0xb8>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001c4a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c52:	2312      	movs	r3, #18
 8001c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c64:	2304      	movs	r3, #4
 8001c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <HAL_I2C_MspInit+0xbc>)
 8001c72:	f001 fd9b 	bl	80037ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_I2C_MspInit+0xb8>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_I2C_MspInit+0xb8>)
 8001c7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_I2C_MspInit+0xb8>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c8e:	bf00      	nop
 8001c90:	37a8      	adds	r7, #168	; 0xa8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40005c00 	.word	0x40005c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40021c00 	.word	0x40021c00

08001ca4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08e      	sub	sp, #56	; 0x38
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a55      	ldr	r2, [pc, #340]	; (8001e18 <HAL_LTDC_MspInit+0x174>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	f040 80a3 	bne.w	8001e0e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001cc8:	4b54      	ldr	r3, [pc, #336]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	4a53      	ldr	r2, [pc, #332]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd4:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce0:	4b4e      	ldr	r3, [pc, #312]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	4a4d      	ldr	r2, [pc, #308]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	6313      	str	r3, [r2, #48]	; 0x30
 8001cec:	4b4b      	ldr	r3, [pc, #300]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001cf8:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	4a47      	ldr	r2, [pc, #284]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d02:	6313      	str	r3, [r2, #48]	; 0x30
 8001d04:	4b45      	ldr	r3, [pc, #276]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d10:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	4a41      	ldr	r2, [pc, #260]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1c:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d28:	4b3c      	ldr	r3, [pc, #240]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a3b      	ldr	r2, [pc, #236]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d40:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	4a35      	ldr	r2, [pc, #212]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4c:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <HAL_LTDC_MspInit+0x178>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001d58:	2310      	movs	r3, #16
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d68:	230e      	movs	r3, #14
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d70:	4619      	mov	r1, r3
 8001d72:	482b      	ldr	r0, [pc, #172]	; (8001e20 <HAL_LTDC_MspInit+0x17c>)
 8001d74:	f001 fd1a 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001d78:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d8a:	230e      	movs	r3, #14
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d92:	4619      	mov	r1, r3
 8001d94:	4823      	ldr	r0, [pc, #140]	; (8001e24 <HAL_LTDC_MspInit+0x180>)
 8001d96:	f001 fd09 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001d9a:	23f7      	movs	r3, #247	; 0xf7
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001daa:	230e      	movs	r3, #14
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db2:	4619      	mov	r1, r3
 8001db4:	481c      	ldr	r0, [pc, #112]	; (8001e28 <HAL_LTDC_MspInit+0x184>)
 8001db6:	f001 fcf9 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001dcc:	2309      	movs	r3, #9
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4815      	ldr	r0, [pc, #84]	; (8001e2c <HAL_LTDC_MspInit+0x188>)
 8001dd8:	f001 fce8 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001ddc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dee:	230e      	movs	r3, #14
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df6:	4619      	mov	r1, r3
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <HAL_LTDC_MspInit+0x18c>)
 8001dfa:	f001 fcd7 	bl	80037ac <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	2058      	movs	r0, #88	; 0x58
 8001e04:	f001 f958 	bl	80030b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e08:	2058      	movs	r0, #88	; 0x58
 8001e0a:	f001 f971 	bl	80030f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3738      	adds	r7, #56	; 0x38
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40016800 	.word	0x40016800
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40022400 	.word	0x40022400
 8001e28:	40022800 	.word	0x40022800
 8001e2c:	40021800 	.word	0x40021800
 8001e30:	40022000 	.word	0x40022000

08001e34 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	; 0x30
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a3b      	ldr	r2, [pc, #236]	; (8001f40 <HAL_QSPI_MspInit+0x10c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d170      	bne.n	8001f38 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e56:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	4a3a      	ldr	r2, [pc, #232]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6393      	str	r3, [r2, #56]	; 0x38
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e6e:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a34      	ldr	r2, [pc, #208]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001e74:	f043 0310 	orr.w	r3, r3, #16
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b2f      	ldr	r3, [pc, #188]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a2e      	ldr	r2, [pc, #184]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a28      	ldr	r2, [pc, #160]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_QSPI_MspInit+0x110>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ec6:	2309      	movs	r3, #9
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	481d      	ldr	r0, [pc, #116]	; (8001f48 <HAL_QSPI_MspInit+0x114>)
 8001ed2:	f001 fc6b 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001ed6:	2340      	movs	r3, #64	; 0x40
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4816      	ldr	r0, [pc, #88]	; (8001f4c <HAL_QSPI_MspInit+0x118>)
 8001ef2:	f001 fc5b 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f06:	2309      	movs	r3, #9
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480e      	ldr	r0, [pc, #56]	; (8001f4c <HAL_QSPI_MspInit+0x118>)
 8001f12:	f001 fc4b 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001f16:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f28:	2309      	movs	r3, #9
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	4807      	ldr	r0, [pc, #28]	; (8001f50 <HAL_QSPI_MspInit+0x11c>)
 8001f34:	f001 fc3a 	bl	80037ac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f38:	bf00      	nop
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	a0001000 	.word	0xa0001000
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40020c00 	.word	0x40020c00

08001f54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b0a4      	sub	sp, #144	; 0x90
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2284      	movs	r2, #132	; 0x84
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f008 fbb3 	bl	800a6d0 <memset>
  if(hrtc->Instance==RTC)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_RTC_MspInit+0x54>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d114      	bne.n	8001f9e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f74:	2320      	movs	r3, #32
 8001f76:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 f860 	bl	8005048 <HAL_RCCEx_PeriphCLKConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f8e:	f7ff fca1 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RTC_MspInit+0x58>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	4a05      	ldr	r2, [pc, #20]	; (8001fac <HAL_RTC_MspInit+0x58>)
 8001f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	3790      	adds	r7, #144	; 0x90
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40002800 	.word	0x40002800
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a25      	ldr	r2, [pc, #148]	; (8002064 <HAL_SD_MspInit+0xb4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d144      	bne.n	800205c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_SD_MspInit+0xb8>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a24      	ldr	r2, [pc, #144]	; (8002068 <HAL_SD_MspInit+0xb8>)
 8001fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_SD_MspInit+0xb8>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fea:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <HAL_SD_MspInit+0xb8>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <HAL_SD_MspInit+0xb8>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_SD_MspInit+0xb8>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_SD_MspInit+0xb8>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_SD_MspInit+0xb8>)
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_SD_MspInit+0xb8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800201a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800201e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800202c:	230c      	movs	r3, #12
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	480d      	ldr	r0, [pc, #52]	; (800206c <HAL_SD_MspInit+0xbc>)
 8002038:	f001 fbb8 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800203c:	2304      	movs	r3, #4
 800203e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800204c:	230c      	movs	r3, #12
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4619      	mov	r1, r3
 8002056:	4806      	ldr	r0, [pc, #24]	; (8002070 <HAL_SD_MspInit+0xc0>)
 8002058:	f001 fba8 	bl	80037ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40012c00 	.word	0x40012c00
 8002068:	40023800 	.word	0x40023800
 800206c:	40020800 	.word	0x40020800
 8002070:	40020c00 	.word	0x40020c00

08002074 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b0aa      	sub	sp, #168	; 0xa8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	2284      	movs	r2, #132	; 0x84
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f008 fb1b 	bl	800a6d0 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80020a2:	d143      	bne.n	800212c <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80020a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80020aa:	2364      	movs	r3, #100	; 0x64
 80020ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80020ae:	2302      	movs	r3, #2
 80020b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80020b6:	2302      	movs	r3, #2
 80020b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020be:	f107 0310 	add.w	r3, r7, #16
 80020c2:	4618      	mov	r0, r3
 80020c4:	f002 ffc0 	bl	8005048 <HAL_RCCEx_PeriphCLKConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80020ce:	f7ff fc01 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_SPDIFRX_MspInit+0xc0>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_SPDIFRX_MspInit+0xc0>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_SPDIFRX_MspInit+0xc0>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_SPDIFRX_MspInit+0xc0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a11      	ldr	r2, [pc, #68]	; (8002134 <HAL_SPDIFRX_MspInit+0xc0>)
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_SPDIFRX_MspInit+0xc0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800211a:	2308      	movs	r3, #8
 800211c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002124:	4619      	mov	r1, r3
 8002126:	4804      	ldr	r0, [pc, #16]	; (8002138 <HAL_SPDIFRX_MspInit+0xc4>)
 8002128:	f001 fb40 	bl	80037ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800212c:	bf00      	nop
 800212e:	37a8      	adds	r7, #168	; 0xa8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	40020c00 	.word	0x40020c00

0800213c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <HAL_SPI_MspInit+0xb4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d144      	bne.n	80021e8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800215e:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_SPI_MspInit+0xb8>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <HAL_SPI_MspInit+0xb8>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_SPI_MspInit+0xb8>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002176:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <HAL_SPI_MspInit+0xb8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_SPI_MspInit+0xb8>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_SPI_MspInit+0xb8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_SPI_MspInit+0xb8>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <HAL_SPI_MspInit+0xb8>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_SPI_MspInit+0xb8>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80021a6:	2302      	movs	r3, #2
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021b6:	2305      	movs	r3, #5
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <HAL_SPI_MspInit+0xbc>)
 80021c2:	f001 faf3 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80021c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021d8:	2305      	movs	r3, #5
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <HAL_SPI_MspInit+0xc0>)
 80021e4:	f001 fae2 	bl	80037ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40003800 	.word	0x40003800
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40020400 	.word	0x40020400

08002200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2e      	ldr	r2, [pc, #184]	; (80022c8 <HAL_TIM_Base_MspInit+0xc8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d10c      	bne.n	800222c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002212:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a2d      	ldr	r2, [pc, #180]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800222a:	e046      	b.n	80022ba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d10c      	bne.n	8002250 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002236:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a24      	ldr	r2, [pc, #144]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
}
 800224e:	e034      	b.n	80022ba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_TIM_Base_MspInit+0xd0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d10c      	bne.n	8002274 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
}
 8002272:	e022      	b.n	80022ba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a16      	ldr	r2, [pc, #88]	; (80022d4 <HAL_TIM_Base_MspInit+0xd4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10c      	bne.n	8002298 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
}
 8002296:	e010      	b.n	80022ba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <HAL_TIM_Base_MspInit+0xd8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d10b      	bne.n	80022ba <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a09      	ldr	r2, [pc, #36]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <HAL_TIM_Base_MspInit+0xcc>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
}
 80022ba:	bf00      	nop
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40010000 	.word	0x40010000
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000c00 	.word	0x40000c00
 80022d8:	40010400 	.word	0x40010400

080022dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_TIM_PWM_MspInit+0x38>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10b      	bne.n	8002306 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_TIM_PWM_MspInit+0x3c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a09      	ldr	r2, [pc, #36]	; (8002318 <HAL_TIM_PWM_MspInit+0x3c>)
 80022f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <HAL_TIM_PWM_MspInit+0x3c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40001800 	.word	0x40001800
 8002318:	40023800 	.word	0x40023800

0800231c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a56      	ldr	r2, [pc, #344]	; (8002494 <HAL_TIM_MspPostInit+0x178>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d11d      	bne.n	800237a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	4b56      	ldr	r3, [pc, #344]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a55      	ldr	r2, [pc, #340]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002368:	2301      	movs	r3, #1
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4619      	mov	r1, r3
 8002372:	484a      	ldr	r0, [pc, #296]	; (800249c <HAL_TIM_MspPostInit+0x180>)
 8002374:	f001 fa1a 	bl	80037ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002378:	e087      	b.n	800248a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002382:	d11d      	bne.n	80023c0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002384:	4b44      	ldr	r3, [pc, #272]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	4a43      	ldr	r2, [pc, #268]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6313      	str	r3, [r2, #48]	; 0x30
 8002390:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800239c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023ae:	2301      	movs	r3, #1
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80023b2:	f107 031c 	add.w	r3, r7, #28
 80023b6:	4619      	mov	r1, r3
 80023b8:	4838      	ldr	r0, [pc, #224]	; (800249c <HAL_TIM_MspPostInit+0x180>)
 80023ba:	f001 f9f7 	bl	80037ac <HAL_GPIO_Init>
}
 80023be:	e064      	b.n	800248a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a36      	ldr	r2, [pc, #216]	; (80024a0 <HAL_TIM_MspPostInit+0x184>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d11c      	bne.n	8002404 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	4b33      	ldr	r3, [pc, #204]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a32      	ldr	r2, [pc, #200]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b30      	ldr	r3, [pc, #192]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80023e2:	2310      	movs	r3, #16
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023f2:	2302      	movs	r3, #2
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	4829      	ldr	r0, [pc, #164]	; (80024a4 <HAL_TIM_MspPostInit+0x188>)
 80023fe:	f001 f9d5 	bl	80037ac <HAL_GPIO_Init>
}
 8002402:	e042      	b.n	800248a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <HAL_TIM_MspPostInit+0x18c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d11c      	bne.n	8002448 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a21      	ldr	r2, [pc, #132]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002426:	2301      	movs	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002436:	2302      	movs	r3, #2
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800243a:	f107 031c 	add.w	r3, r7, #28
 800243e:	4619      	mov	r1, r3
 8002440:	481a      	ldr	r0, [pc, #104]	; (80024ac <HAL_TIM_MspPostInit+0x190>)
 8002442:	f001 f9b3 	bl	80037ac <HAL_GPIO_Init>
}
 8002446:	e020      	b.n	800248a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_TIM_MspPostInit+0x194>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d11b      	bne.n	800248a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a10      	ldr	r2, [pc, #64]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 8002458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <HAL_TIM_MspPostInit+0x17c>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800246a:	2340      	movs	r3, #64	; 0x40
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800247a:	2309      	movs	r3, #9
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	4619      	mov	r1, r3
 8002484:	480b      	ldr	r0, [pc, #44]	; (80024b4 <HAL_TIM_MspPostInit+0x198>)
 8002486:	f001 f991 	bl	80037ac <HAL_GPIO_Init>
}
 800248a:	bf00      	nop
 800248c:	3730      	adds	r7, #48	; 0x30
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40010000 	.word	0x40010000
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40020400 	.word	0x40020400
 80024a8:	40000c00 	.word	0x40000c00
 80024ac:	40022000 	.word	0x40022000
 80024b0:	40001800 	.word	0x40001800
 80024b4:	40021c00 	.word	0x40021c00

080024b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0ac      	sub	sp, #176	; 0xb0
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d0:	f107 0318 	add.w	r3, r7, #24
 80024d4:	2284      	movs	r2, #132	; 0x84
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f008 f8f9 	bl	800a6d0 <memset>
  if(huart->Instance==USART1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a32      	ldr	r2, [pc, #200]	; (80025ac <HAL_UART_MspInit+0xf4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d15c      	bne.n	80025a2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024e8:	2340      	movs	r3, #64	; 0x40
 80024ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024ec:	2300      	movs	r3, #0
 80024ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f0:	f107 0318 	add.w	r3, r7, #24
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 fda7 	bl	8005048 <HAL_RCCEx_PeriphCLKConfig>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002500:	f7ff f9e8 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800250a:	f043 0310 	orr.w	r3, r3, #16
 800250e:	6453      	str	r3, [r2, #68]	; 0x44
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	6313      	str	r3, [r2, #48]	; 0x30
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6313      	str	r3, [r2, #48]	; 0x30
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002564:	2307      	movs	r3, #7
 8002566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800256a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800256e:	4619      	mov	r1, r3
 8002570:	4810      	ldr	r0, [pc, #64]	; (80025b4 <HAL_UART_MspInit+0xfc>)
 8002572:	f001 f91b 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800257a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002590:	2307      	movs	r3, #7
 8002592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800259a:	4619      	mov	r1, r3
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <HAL_UART_MspInit+0x100>)
 800259e:	f001 f905 	bl	80037ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	37b0      	adds	r7, #176	; 0xb0
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40011000 	.word	0x40011000
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020000 	.word	0x40020000

080025bc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80025d0:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <HAL_FMC_MspInit+0x100>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d16d      	bne.n	80026b4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80025d8:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_FMC_MspInit+0x100>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025de:	4b38      	ldr	r3, [pc, #224]	; (80026c0 <HAL_FMC_MspInit+0x104>)
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	4a37      	ldr	r2, [pc, #220]	; (80026c0 <HAL_FMC_MspInit+0x104>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6393      	str	r3, [r2, #56]	; 0x38
 80025ea:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <HAL_FMC_MspInit+0x104>)
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80025f6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80025fa:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002604:	2303      	movs	r3, #3
 8002606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002608:	230c      	movs	r3, #12
 800260a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	4619      	mov	r1, r3
 8002610:	482c      	ldr	r0, [pc, #176]	; (80026c4 <HAL_FMC_MspInit+0x108>)
 8002612:	f001 f8cb 	bl	80037ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002616:	f248 1333 	movw	r3, #33075	; 0x8133
 800261a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002628:	230c      	movs	r3, #12
 800262a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	4619      	mov	r1, r3
 8002630:	4825      	ldr	r0, [pc, #148]	; (80026c8 <HAL_FMC_MspInit+0x10c>)
 8002632:	f001 f8bb 	bl	80037ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002636:	f24c 7303 	movw	r3, #50947	; 0xc703
 800263a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002648:	230c      	movs	r3, #12
 800264a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	4619      	mov	r1, r3
 8002650:	481e      	ldr	r0, [pc, #120]	; (80026cc <HAL_FMC_MspInit+0x110>)
 8002652:	f001 f8ab 	bl	80037ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002656:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800265a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002664:	2303      	movs	r3, #3
 8002666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002668:	230c      	movs	r3, #12
 800266a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	4619      	mov	r1, r3
 8002670:	4817      	ldr	r0, [pc, #92]	; (80026d0 <HAL_FMC_MspInit+0x114>)
 8002672:	f001 f89b 	bl	80037ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002676:	2328      	movs	r3, #40	; 0x28
 8002678:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002686:	230c      	movs	r3, #12
 8002688:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	4619      	mov	r1, r3
 800268e:	4811      	ldr	r0, [pc, #68]	; (80026d4 <HAL_FMC_MspInit+0x118>)
 8002690:	f001 f88c 	bl	80037ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002694:	2308      	movs	r3, #8
 8002696:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a0:	2303      	movs	r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026a4:	230c      	movs	r3, #12
 80026a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	4619      	mov	r1, r3
 80026ac:	480a      	ldr	r0, [pc, #40]	; (80026d8 <HAL_FMC_MspInit+0x11c>)
 80026ae:	f001 f87d 	bl	80037ac <HAL_GPIO_Init>
 80026b2:	e000      	b.n	80026b6 <HAL_FMC_MspInit+0xfa>
    return;
 80026b4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000740 	.word	0x20000740
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40021800 	.word	0x40021800
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	40021400 	.word	0x40021400
 80026d4:	40021c00 	.word	0x40021c00
 80026d8:	40020800 	.word	0x40020800

080026dc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80026e4:	f7ff ff6a 	bl	80025bc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <HAL_SAI_MspInit+0xbc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d124      	bne.n	800274c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002702:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_SAI_MspInit+0xc0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10b      	bne.n	8002722 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <HAL_SAI_MspInit+0xc4>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a29      	ldr	r2, [pc, #164]	; (80027b4 <HAL_SAI_MspInit+0xc4>)
 8002710:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_SAI_MspInit+0xc4>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002722:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <HAL_SAI_MspInit+0xc0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <HAL_SAI_MspInit+0xc0>)
 800272a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800272c:	23f0      	movs	r3, #240	; 0xf0
 800272e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800273c:	230a      	movs	r3, #10
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	481c      	ldr	r0, [pc, #112]	; (80027b8 <HAL_SAI_MspInit+0xc8>)
 8002748:	f001 f830 	bl	80037ac <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <HAL_SAI_MspInit+0xcc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d125      	bne.n	80027a2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_SAI_MspInit+0xc0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <HAL_SAI_MspInit+0xc4>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_SAI_MspInit+0xc4>)
 8002764:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_SAI_MspInit+0xc4>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_SAI_MspInit+0xc0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3301      	adds	r3, #1
 800277c:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <HAL_SAI_MspInit+0xc0>)
 800277e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002792:	230a      	movs	r3, #10
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	4808      	ldr	r0, [pc, #32]	; (80027c0 <HAL_SAI_MspInit+0xd0>)
 800279e:	f001 f805 	bl	80037ac <HAL_GPIO_Init>

    }
}
 80027a2:	bf00      	nop
 80027a4:	3728      	adds	r7, #40	; 0x28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40015c04 	.word	0x40015c04
 80027b0:	20000744 	.word	0x20000744
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40015c24 	.word	0x40015c24
 80027c0:	40021800 	.word	0x40021800

080027c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	; 0x30
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	2036      	movs	r0, #54	; 0x36
 80027da:	f000 fc6d 	bl	80030b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027de:	2036      	movs	r0, #54	; 0x36
 80027e0:	f000 fc86 	bl	80030f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <HAL_InitTick+0xa0>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <HAL_InitTick+0xa0>)
 80027ea:	f043 0310 	orr.w	r3, r3, #16
 80027ee:	6413      	str	r3, [r2, #64]	; 0x40
 80027f0:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_InitTick+0xa0>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027fc:	f107 0210 	add.w	r2, r7, #16
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f002 fbec 	bl	8004fe4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800280c:	f002 fbc2 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8002810:	4603      	mov	r3, r0
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	4a13      	ldr	r2, [pc, #76]	; (8002868 <HAL_InitTick+0xa4>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0c9b      	lsrs	r3, r3, #18
 8002820:	3b01      	subs	r3, #1
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_InitTick+0xa8>)
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <HAL_InitTick+0xac>)
 8002828:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_InitTick+0xa8>)
 800282c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002830:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002832:	4a0e      	ldr	r2, [pc, #56]	; (800286c <HAL_InitTick+0xa8>)
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_InitTick+0xa8>)
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_InitTick+0xa8>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002844:	4809      	ldr	r0, [pc, #36]	; (800286c <HAL_InitTick+0xa8>)
 8002846:	f005 f990 	bl	8007b6a <HAL_TIM_Base_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d104      	bne.n	800285a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002850:	4806      	ldr	r0, [pc, #24]	; (800286c <HAL_InitTick+0xa8>)
 8002852:	f005 f9e1 	bl	8007c18 <HAL_TIM_Base_Start_IT>
 8002856:	4603      	mov	r3, r0
 8002858:	e000      	b.n	800285c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	3730      	adds	r7, #48	; 0x30
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	431bde83 	.word	0x431bde83
 800286c:	20000748 	.word	0x20000748
 8002870:	40001000 	.word	0x40001000

08002874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <NMI_Handler+0x4>

0800287a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287e:	e7fe      	b.n	800287e <HardFault_Handler+0x4>

08002880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <MemManage_Handler+0x4>

08002886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800288a:	e7fe      	b.n	800288a <BusFault_Handler+0x4>

0800288c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <UsageFault_Handler+0x4>

08002892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <TIM6_DAC_IRQHandler+0x10>)
 80028d2:	f005 fa70 	bl	8007db6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000748 	.word	0x20000748

080028e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <LTDC_IRQHandler+0x10>)
 80028e6:	f001 fb37 	bl	8003f58 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000170 	.word	0x20000170

080028f4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <DMA2D_IRQHandler+0x10>)
 80028fa:	f000 fdb5 	bl	8003468 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200000e4 	.word	0x200000e4

08002908 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <SystemInit+0x20>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <SystemInit+0x20>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800292c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002964 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002930:	480d      	ldr	r0, [pc, #52]	; (8002968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002932:	490e      	ldr	r1, [pc, #56]	; (800296c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800293c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002948:	4c0b      	ldr	r4, [pc, #44]	; (8002978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002956:	f7ff ffd7 	bl	8002908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800295a:	f007 fe95 	bl	800a688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295e:	f7fd fdd5 	bl	800050c <main>
  bx  lr    
 8002962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002964:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800296c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002970:	0800a734 	.word	0x0800a734
  ldr r2, =_sbss
 8002974:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002978:	200007ac 	.word	0x200007ac

0800297c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC_IRQHandler>

0800297e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002982:	2003      	movs	r0, #3
 8002984:	f000 fb8d 	bl	80030a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002988:	200f      	movs	r0, #15
 800298a:	f7ff ff1b 	bl	80027c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800298e:	f7fe ffa7 	bl	80018e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_IncTick+0x20>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_IncTick+0x24>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_IncTick+0x24>)
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000008 	.word	0x20000008
 80029bc:	20000794 	.word	0x20000794

080029c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return uwTick;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_GetTick+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000794 	.word	0x20000794

080029d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff ffee 	bl	80029c0 <HAL_GetTick>
 80029e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d005      	beq.n	80029fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_Delay+0x44>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029fe:	bf00      	nop
 8002a00:	f7ff ffde 	bl	80029c0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d8f7      	bhi.n	8002a00 <HAL_Delay+0x28>
  {
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000008 	.word	0x20000008

08002a20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e031      	b.n	8002a9a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe ff72 	bl	8001928 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <HAL_ADC_Init+0x84>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	f043 0202 	orr.w	r2, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f970 	bl	8002d54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
 8002a8a:	e001      	b.n	8002a90 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	ffffeefd 	.word	0xffffeefd

08002aa8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1c>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e136      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x28a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	d93a      	bls.n	8002b4a <HAL_ADC_ConfigChannel+0xa2>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002adc:	d035      	beq.n	8002b4a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68d9      	ldr	r1, [r3, #12]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	3b1e      	subs	r3, #30
 8002af4:	2207      	movs	r2, #7
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	400a      	ands	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a8d      	ldr	r2, [pc, #564]	; (8002d40 <HAL_ADC_ConfigChannel+0x298>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d10a      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68d9      	ldr	r1, [r3, #12]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	061a      	lsls	r2, r3, #24
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b22:	e035      	b.n	8002b90 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68d9      	ldr	r1, [r3, #12]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4403      	add	r3, r0
 8002b3c:	3b1e      	subs	r3, #30
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b48:	e022      	b.n	8002b90 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6919      	ldr	r1, [r3, #16]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	2207      	movs	r2, #7
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43da      	mvns	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6919      	ldr	r1, [r3, #16]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	4603      	mov	r3, r0
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4403      	add	r3, r0
 8002b86:	409a      	lsls	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d824      	bhi.n	8002be2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b05      	subs	r3, #5
 8002baa:	221f      	movs	r2, #31
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b05      	subs	r3, #5
 8002bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34
 8002be0:	e04c      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d824      	bhi.n	8002c34 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b23      	subs	r3, #35	; 0x23
 8002bfc:	221f      	movs	r2, #31
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	400a      	ands	r2, r1
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3b23      	subs	r3, #35	; 0x23
 8002c26:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
 8002c32:	e023      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	3b41      	subs	r3, #65	; 0x41
 8002c46:	221f      	movs	r2, #31
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	400a      	ands	r2, r1
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	4618      	mov	r0, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3b41      	subs	r3, #65	; 0x41
 8002c70:	fa00 f203 	lsl.w	r2, r0, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a30      	ldr	r2, [pc, #192]	; (8002d44 <HAL_ADC_ConfigChannel+0x29c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d10a      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1f4>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c8e:	d105      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a2c      	ldr	r2, [pc, #176]	; (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c96:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c9a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <HAL_ADC_ConfigChannel+0x29c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10f      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x21e>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b12      	cmp	r3, #18
 8002cac:	d10b      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cb8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002cba:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a22      	ldr	r2, [pc, #136]	; (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cc4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <HAL_ADC_ConfigChannel+0x29c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d12b      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x280>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <HAL_ADC_ConfigChannel+0x298>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d003      	beq.n	8002ce2 <HAL_ADC_ConfigChannel+0x23a>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b11      	cmp	r3, #17
 8002ce0:	d122      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002ce2:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ce8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002cec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002cee:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cf8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <HAL_ADC_ConfigChannel+0x298>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d111      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_ADC_ConfigChannel+0x2a4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a11      	ldr	r2, [pc, #68]	; (8002d50 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0c9a      	lsrs	r2, r3, #18
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d1a:	e002      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f9      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	10000012 	.word	0x10000012
 8002d44:	40012000 	.word	0x40012000
 8002d48:	40012300 	.word	0x40012300
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	431bde83 	.word	0x431bde83

08002d54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002d5c:	4b78      	ldr	r3, [pc, #480]	; (8002f40 <ADC_Init+0x1ec>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a77      	ldr	r2, [pc, #476]	; (8002f40 <ADC_Init+0x1ec>)
 8002d62:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d66:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002d68:	4b75      	ldr	r3, [pc, #468]	; (8002f40 <ADC_Init+0x1ec>)
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4973      	ldr	r1, [pc, #460]	; (8002f40 <ADC_Init+0x1ec>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	021a      	lsls	r2, r3, #8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6899      	ldr	r1, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <ADC_Init+0x1f0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002df6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6899      	ldr	r1, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e00f      	b.n	8002e4e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0202 	bic.w	r2, r2, #2
 8002e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	005a      	lsls	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01b      	beq.n	8002eb4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	035a      	lsls	r2, r3, #13
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	e007      	b.n	8002ec4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	051a      	lsls	r2, r3, #20
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f06:	025a      	lsls	r2, r3, #9
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	029a      	lsls	r2, r3, #10
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40012300 	.word	0x40012300
 8002f44:	0f000001 	.word	0x0f000001

08002f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <__NVIC_SetPriorityGrouping+0x40>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f64:	4013      	ands	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f76:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <__NVIC_SetPriorityGrouping+0x40>)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	60d3      	str	r3, [r2, #12]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00
 8002f8c:	05fa0000 	.word	0x05fa0000

08002f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	f003 0307 	and.w	r3, r3, #7
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db0b      	blt.n	8002fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	4907      	ldr	r1, [pc, #28]	; (8002fe4 <__NVIC_EnableIRQ+0x38>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2001      	movs	r0, #1
 8002fce:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000e100 	.word	0xe000e100

08002fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	6039      	str	r1, [r7, #0]
 8002ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	db0a      	blt.n	8003012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	490c      	ldr	r1, [pc, #48]	; (8003034 <__NVIC_SetPriority+0x4c>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	440b      	add	r3, r1
 800300c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003010:	e00a      	b.n	8003028 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4908      	ldr	r1, [pc, #32]	; (8003038 <__NVIC_SetPriority+0x50>)
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	3b04      	subs	r3, #4
 8003020:	0112      	lsls	r2, r2, #4
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	440b      	add	r3, r1
 8003026:	761a      	strb	r2, [r3, #24]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000e100 	.word	0xe000e100
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f1c3 0307 	rsb	r3, r3, #7
 8003056:	2b04      	cmp	r3, #4
 8003058:	bf28      	it	cs
 800305a:	2304      	movcs	r3, #4
 800305c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3304      	adds	r3, #4
 8003062:	2b06      	cmp	r3, #6
 8003064:	d902      	bls.n	800306c <NVIC_EncodePriority+0x30>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3b03      	subs	r3, #3
 800306a:	e000      	b.n	800306e <NVIC_EncodePriority+0x32>
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43da      	mvns	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	401a      	ands	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003084:	f04f 31ff 	mov.w	r1, #4294967295
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	43d9      	mvns	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	4313      	orrs	r3, r2
         );
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ff4c 	bl	8002f48 <__NVIC_SetPriorityGrouping>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ca:	f7ff ff61 	bl	8002f90 <__NVIC_GetPriorityGrouping>
 80030ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	6978      	ldr	r0, [r7, #20]
 80030d6:	f7ff ffb1 	bl	800303c <NVIC_EncodePriority>
 80030da:	4602      	mov	r2, r0
 80030dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff80 	bl	8002fe8 <__NVIC_SetPriority>
}
 80030e8:	bf00      	nop
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ff54 	bl	8002fac <__NVIC_EnableIRQ>
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e054      	b.n	80031c8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7f5b      	ldrb	r3, [r3, #29]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fe fc54 	bl	80019dc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	791b      	ldrb	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10c      	bne.n	800315c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <HAL_CRC_Init+0xc4>)
 8003148:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0218 	bic.w	r2, r2, #24
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	e00c      	b.n	8003176 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	461a      	mov	r2, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f834 	bl	80031d4 <HAL_CRCEx_Polynomial_Set>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e028      	b.n	80031c8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	795b      	ldrb	r3, [r3, #5]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d105      	bne.n	800318a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f04f 32ff 	mov.w	r2, #4294967295
 8003186:	611a      	str	r2, [r3, #16]
 8003188:	e004      	b.n	8003194 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6912      	ldr	r2, [r2, #16]
 8003192:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	04c11db7 	.word	0x04c11db7

080031d4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031e4:	231f      	movs	r3, #31
 80031e6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031e8:	bf00      	nop
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	613a      	str	r2, [r7, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <HAL_CRCEx_Polynomial_Set+0x34>
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b18      	cmp	r3, #24
 800320c:	d846      	bhi.n	800329c <HAL_CRCEx_Polynomial_Set+0xc8>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	080032a3 	.word	0x080032a3
 8003218:	0800329d 	.word	0x0800329d
 800321c:	0800329d 	.word	0x0800329d
 8003220:	0800329d 	.word	0x0800329d
 8003224:	0800329d 	.word	0x0800329d
 8003228:	0800329d 	.word	0x0800329d
 800322c:	0800329d 	.word	0x0800329d
 8003230:	0800329d 	.word	0x0800329d
 8003234:	08003291 	.word	0x08003291
 8003238:	0800329d 	.word	0x0800329d
 800323c:	0800329d 	.word	0x0800329d
 8003240:	0800329d 	.word	0x0800329d
 8003244:	0800329d 	.word	0x0800329d
 8003248:	0800329d 	.word	0x0800329d
 800324c:	0800329d 	.word	0x0800329d
 8003250:	0800329d 	.word	0x0800329d
 8003254:	08003285 	.word	0x08003285
 8003258:	0800329d 	.word	0x0800329d
 800325c:	0800329d 	.word	0x0800329d
 8003260:	0800329d 	.word	0x0800329d
 8003264:	0800329d 	.word	0x0800329d
 8003268:	0800329d 	.word	0x0800329d
 800326c:	0800329d 	.word	0x0800329d
 8003270:	0800329d 	.word	0x0800329d
 8003274:	08003279 	.word	0x08003279
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b06      	cmp	r3, #6
 800327c:	d913      	bls.n	80032a6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003282:	e010      	b.n	80032a6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b07      	cmp	r3, #7
 8003288:	d90f      	bls.n	80032aa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800328e:	e00c      	b.n	80032aa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b0f      	cmp	r3, #15
 8003294:	d90b      	bls.n	80032ae <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800329a:	e008      	b.n	80032ae <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	75fb      	strb	r3, [r7, #23]
      break;
 80032a0:	e006      	b.n	80032b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032a2:	bf00      	nop
 80032a4:	e004      	b.n	80032b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032a6:	bf00      	nop
 80032a8:	e002      	b.n	80032b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032ae:	bf00      	nop
  }
  if (status == HAL_OK)
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10d      	bne.n	80032d2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 0118 	bic.w	r1, r3, #24
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e069      	b.n	80033c6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe fb8c 	bl	8001a1c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_DCMI_Init+0xf0>)
 8003326:	400b      	ands	r3, r1
 8003328:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800333e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800334a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003356:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003362:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800336e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b10      	cmp	r3, #16
 800337e:	d112      	bne.n	80033a6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7f1b      	ldrb	r3, [r3, #28]
 8003384:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	7f5b      	ldrb	r3, [r3, #29]
 800338a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800338c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	7f9b      	ldrb	r3, [r3, #30]
 8003392:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003394:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7fdb      	ldrb	r3, [r3, #31]
 800339c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80033a2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80033a4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 021e 	orr.w	r2, r2, #30
 80033b4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	ffe0f007 	.word	0xffe0f007

080033d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e039      	b.n	800345a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe fbcc 	bl	8001b98 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003424:	f023 0107 	bic.w	r1, r3, #7
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <HAL_DMA2D_Init+0x90>)
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68d1      	ldr	r1, [r2, #12]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	430b      	orrs	r3, r1
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	ffffc000 	.word	0xffffc000

08003468 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d026      	beq.n	80034d8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d021      	beq.n	80034d8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034a2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	f043 0201 	orr.w	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2201      	movs	r2, #1
 80034b6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2204      	movs	r2, #4
 80034bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d026      	beq.n	8003530 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d021      	beq.n	8003530 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034fa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2220      	movs	r2, #32
 8003502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	f043 0202 	orr.w	r2, r3, #2
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2204      	movs	r2, #4
 8003514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d026      	beq.n	8003588 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003540:	2b00      	cmp	r3, #0
 8003542:	d021      	beq.n	8003588 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003552:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2208      	movs	r2, #8
 800355a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	f043 0204 	orr.w	r2, r3, #4
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2204      	movs	r2, #4
 800356c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d013      	beq.n	80035ba <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00e      	beq.n	80035ba <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035aa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2204      	movs	r2, #4
 80035b2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f853 	bl	8003660 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d024      	beq.n	800360e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01f      	beq.n	800360e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035dc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2202      	movs	r2, #2
 80035e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01f      	beq.n	8003658 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01a      	beq.n	8003658 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003630:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2210      	movs	r2, #16
 8003638:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f80e 	bl	8003674 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_DMA2D_ConfigLayer+0x20>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e079      	b.n	800379c <HAL_DMA2D_ConfigLayer+0x114>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	3318      	adds	r3, #24
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80036d2:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <HAL_DMA2D_ConfigLayer+0x120>)
 80036d4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b0a      	cmp	r3, #10
 80036dc:	d003      	beq.n	80036e6 <HAL_DMA2D_ConfigLayer+0x5e>
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b09      	cmp	r3, #9
 80036e4:	d107      	bne.n	80036f6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	e005      	b.n	8003702 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	061b      	lsls	r3, r3, #24
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d120      	bne.n	800374a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43db      	mvns	r3, r3
 8003712:	ea02 0103 	and.w	r1, r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	430a      	orrs	r2, r1
 800371e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b0a      	cmp	r3, #10
 8003730:	d003      	beq.n	800373a <HAL_DMA2D_ConfigLayer+0xb2>
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b09      	cmp	r3, #9
 8003738:	d127      	bne.n	800378a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
 8003748:	e01f      	b.n	800378a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43db      	mvns	r3, r3
 8003754:	ea02 0103 	and.w	r1, r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	430a      	orrs	r2, r1
 8003760:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b0a      	cmp	r3, #10
 8003772:	d003      	beq.n	800377c <HAL_DMA2D_ConfigLayer+0xf4>
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b09      	cmp	r3, #9
 800377a:	d106      	bne.n	800378a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003788:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	ff03000f 	.word	0xff03000f

080037ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	; 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e175      	b.n	8003ab8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037cc:	2201      	movs	r2, #1
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f040 8164 	bne.w	8003ab2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d005      	beq.n	8003802 <HAL_GPIO_Init+0x56>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d130      	bne.n	8003864 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	2203      	movs	r2, #3
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003838:	2201      	movs	r2, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 0201 	and.w	r2, r3, #1
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b03      	cmp	r3, #3
 800386e:	d017      	beq.n	80038a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d123      	bne.n	80038f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	08da      	lsrs	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3208      	adds	r2, #8
 80038b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	220f      	movs	r2, #15
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	08da      	lsrs	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3208      	adds	r2, #8
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80be 	beq.w	8003ab2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003936:	4b66      	ldr	r3, [pc, #408]	; (8003ad0 <HAL_GPIO_Init+0x324>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	4a65      	ldr	r2, [pc, #404]	; (8003ad0 <HAL_GPIO_Init+0x324>)
 800393c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003940:	6453      	str	r3, [r2, #68]	; 0x44
 8003942:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <HAL_GPIO_Init+0x324>)
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800394e:	4a61      	ldr	r2, [pc, #388]	; (8003ad4 <HAL_GPIO_Init+0x328>)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	3302      	adds	r3, #2
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	220f      	movs	r2, #15
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_GPIO_Init+0x32c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d037      	beq.n	80039ea <HAL_GPIO_Init+0x23e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a57      	ldr	r2, [pc, #348]	; (8003adc <HAL_GPIO_Init+0x330>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d031      	beq.n	80039e6 <HAL_GPIO_Init+0x23a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a56      	ldr	r2, [pc, #344]	; (8003ae0 <HAL_GPIO_Init+0x334>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02b      	beq.n	80039e2 <HAL_GPIO_Init+0x236>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a55      	ldr	r2, [pc, #340]	; (8003ae4 <HAL_GPIO_Init+0x338>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d025      	beq.n	80039de <HAL_GPIO_Init+0x232>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a54      	ldr	r2, [pc, #336]	; (8003ae8 <HAL_GPIO_Init+0x33c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01f      	beq.n	80039da <HAL_GPIO_Init+0x22e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a53      	ldr	r2, [pc, #332]	; (8003aec <HAL_GPIO_Init+0x340>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d019      	beq.n	80039d6 <HAL_GPIO_Init+0x22a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a52      	ldr	r2, [pc, #328]	; (8003af0 <HAL_GPIO_Init+0x344>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_GPIO_Init+0x226>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a51      	ldr	r2, [pc, #324]	; (8003af4 <HAL_GPIO_Init+0x348>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00d      	beq.n	80039ce <HAL_GPIO_Init+0x222>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a50      	ldr	r2, [pc, #320]	; (8003af8 <HAL_GPIO_Init+0x34c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <HAL_GPIO_Init+0x21e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a4f      	ldr	r2, [pc, #316]	; (8003afc <HAL_GPIO_Init+0x350>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_GPIO_Init+0x21a>
 80039c2:	2309      	movs	r3, #9
 80039c4:	e012      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039c6:	230a      	movs	r3, #10
 80039c8:	e010      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039ca:	2308      	movs	r3, #8
 80039cc:	e00e      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039ce:	2307      	movs	r3, #7
 80039d0:	e00c      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039d2:	2306      	movs	r3, #6
 80039d4:	e00a      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039d6:	2305      	movs	r3, #5
 80039d8:	e008      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039da:	2304      	movs	r3, #4
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039de:	2303      	movs	r3, #3
 80039e0:	e004      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039ea:	2300      	movs	r3, #0
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f002 0203 	and.w	r2, r2, #3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4093      	lsls	r3, r2
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80039fc:	4935      	ldr	r1, [pc, #212]	; (8003ad4 <HAL_GPIO_Init+0x328>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0a:	4b3d      	ldr	r3, [pc, #244]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2e:	4a34      	ldr	r2, [pc, #208]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a34:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a58:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a82:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a88:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	f67f ae86 	bls.w	80037cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3724      	adds	r7, #36	; 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40021400 	.word	0x40021400
 8003af0:	40021800 	.word	0x40021800
 8003af4:	40021c00 	.word	0x40021c00
 8003af8:	40022000 	.word	0x40022000
 8003afc:	40022400 	.word	0x40022400
 8003b00:	40013c00 	.word	0x40013c00

08003b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
 8003b20:	e001      	b.n	8003b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
 8003b40:	4613      	mov	r3, r2
 8003b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b44:	787b      	ldrb	r3, [r7, #1]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b4a:	887a      	ldrh	r2, [r7, #2]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b50:	e003      	b.n	8003b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b52:	887b      	ldrh	r3, [r7, #2]
 8003b54:	041a      	lsls	r2, r3, #16
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	619a      	str	r2, [r3, #24]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e07f      	b.n	8003c7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fe f828 	bl	8001be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	; 0x24
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	e006      	b.n	8003bf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d104      	bne.n	8003c02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_I2C_Init+0x11c>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69d9      	ldr	r1, [r3, #28]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	02008000 	.word	0x02008000

08003c88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d138      	bne.n	8003d10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e032      	b.n	8003d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2224      	movs	r2, #36	; 0x24
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6819      	ldr	r1, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d139      	bne.n	8003da8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e033      	b.n	8003daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2224      	movs	r2, #36	; 0x24
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e000      	b.n	8003daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
  }
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0bf      	b.n	8003f4a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd ff60 	bl	8001ca4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003dfa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6999      	ldr	r1, [r3, #24]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e10:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6899      	ldr	r1, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4b4a      	ldr	r3, [pc, #296]	; (8003f54 <HAL_LTDC_Init+0x19c>)
 8003e2c:	400b      	ands	r3, r1
 8003e2e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6899      	ldr	r1, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68d9      	ldr	r1, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b3e      	ldr	r3, [pc, #248]	; (8003f54 <HAL_LTDC_Init+0x19c>)
 8003e5a:	400b      	ands	r3, r1
 8003e5c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68d9      	ldr	r1, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1a      	ldr	r2, [r3, #32]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6919      	ldr	r1, [r3, #16]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4b33      	ldr	r3, [pc, #204]	; (8003f54 <HAL_LTDC_Init+0x19c>)
 8003e88:	400b      	ands	r3, r1
 8003e8a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6919      	ldr	r1, [r3, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6959      	ldr	r1, [r3, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <HAL_LTDC_Init+0x19c>)
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	041b      	lsls	r3, r3, #16
 8003ec0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6959      	ldr	r1, [r3, #20]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0206 	orr.w	r2, r2, #6
 8003f26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	f000f800 	.word	0xf000f800

08003f58 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d023      	beq.n	8003fc2 <HAL_LTDC_IRQHandler+0x6a>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01e      	beq.n	8003fc2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0204 	bic.w	r2, r2, #4
 8003f92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2204      	movs	r2, #4
 8003f9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fa2:	f043 0201 	orr.w	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2204      	movs	r2, #4
 8003fb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f86f 	bl	80040a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d023      	beq.n	8004014 <HAL_LTDC_IRQHandler+0xbc>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01e      	beq.n	8004014 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0202 	bic.w	r2, r2, #2
 8003fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2202      	movs	r2, #2
 8003fec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ff4:	f043 0202 	orr.w	r2, r3, #2
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2204      	movs	r2, #4
 8004002:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f846 	bl	80040a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01b      	beq.n	8004056 <HAL_LTDC_IRQHandler+0xfe>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d016      	beq.n	8004056 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2201      	movs	r2, #1
 800403e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f82f 	bl	80040b4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01b      	beq.n	8004098 <HAL_LTDC_IRQHandler+0x140>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d016      	beq.n	8004098 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0208 	bic.w	r2, r2, #8
 8004078:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2208      	movs	r2, #8
 8004080:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f818 	bl	80040c8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040dc:	b5b0      	push	{r4, r5, r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_LTDC_ConfigLayer+0x1a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e02c      	b.n	8004150 <HAL_LTDC_ConfigLayer+0x74>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2202      	movs	r2, #2
 8004102:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2134      	movs	r1, #52	; 0x34
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	4413      	add	r3, r2
 8004112:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4614      	mov	r4, r2
 800411a:	461d      	mov	r5, r3
 800411c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800411e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f811 	bl	8004158 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2201      	movs	r2, #1
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bdb0      	pop	{r4, r5, r7, pc}

08004158 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004158:	b480      	push	{r7}
 800415a:	b089      	sub	sp, #36	; 0x24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	0c1b      	lsrs	r3, r3, #16
 8004170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004174:	4413      	add	r3, r2
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	01db      	lsls	r3, r3, #7
 8004184:	4413      	add	r3, r2
 8004186:	3384      	adds	r3, #132	; 0x84
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	4611      	mov	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	01d2      	lsls	r2, r2, #7
 8004194:	440a      	add	r2, r1
 8004196:	3284      	adds	r2, #132	; 0x84
 8004198:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800419c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0c1b      	lsrs	r3, r3, #16
 80041aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ae:	4413      	add	r3, r2
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4619      	mov	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	01db      	lsls	r3, r3, #7
 80041bc:	440b      	add	r3, r1
 80041be:	3384      	adds	r3, #132	; 0x84
 80041c0:	4619      	mov	r1, r3
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041d6:	4413      	add	r3, r2
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	01db      	lsls	r3, r3, #7
 80041e6:	4413      	add	r3, r2
 80041e8:	3384      	adds	r3, #132	; 0x84
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	4611      	mov	r1, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	01d2      	lsls	r2, r2, #7
 80041f6:	440a      	add	r2, r1
 80041f8:	3284      	adds	r2, #132	; 0x84
 80041fa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80041fe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800420e:	4413      	add	r3, r2
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4619      	mov	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	01db      	lsls	r3, r3, #7
 800421c:	440b      	add	r3, r1
 800421e:	3384      	adds	r3, #132	; 0x84
 8004220:	4619      	mov	r1, r3
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4313      	orrs	r3, r2
 8004226:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	01db      	lsls	r3, r3, #7
 8004232:	4413      	add	r3, r2
 8004234:	3384      	adds	r3, #132	; 0x84
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	4611      	mov	r1, r2
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	01d2      	lsls	r2, r2, #7
 8004242:	440a      	add	r2, r1
 8004244:	3284      	adds	r2, #132	; 0x84
 8004246:	f023 0307 	bic.w	r3, r3, #7
 800424a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	01db      	lsls	r3, r3, #7
 8004256:	4413      	add	r3, r2
 8004258:	3384      	adds	r3, #132	; 0x84
 800425a:	461a      	mov	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	061b      	lsls	r3, r3, #24
 800427c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	01db      	lsls	r3, r3, #7
 8004288:	4413      	add	r3, r2
 800428a:	3384      	adds	r3, #132	; 0x84
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	01db      	lsls	r3, r3, #7
 8004298:	4413      	add	r3, r2
 800429a:	3384      	adds	r3, #132	; 0x84
 800429c:	461a      	mov	r2, r3
 800429e:	2300      	movs	r3, #0
 80042a0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042a8:	461a      	mov	r2, r3
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4619      	mov	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	01db      	lsls	r3, r3, #7
 80042bc:	440b      	add	r3, r1
 80042be:	3384      	adds	r3, #132	; 0x84
 80042c0:	4619      	mov	r1, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	01db      	lsls	r3, r3, #7
 80042d2:	4413      	add	r3, r2
 80042d4:	3384      	adds	r3, #132	; 0x84
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	4611      	mov	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	01d2      	lsls	r2, r2, #7
 80042e2:	440a      	add	r2, r1
 80042e4:	3284      	adds	r2, #132	; 0x84
 80042e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	01db      	lsls	r3, r3, #7
 80042f6:	4413      	add	r3, r2
 80042f8:	3384      	adds	r3, #132	; 0x84
 80042fa:	461a      	mov	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	01db      	lsls	r3, r3, #7
 800430c:	4413      	add	r3, r2
 800430e:	3384      	adds	r3, #132	; 0x84
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	01db      	lsls	r3, r3, #7
 800431c:	440b      	add	r3, r1
 800431e:	3384      	adds	r3, #132	; 0x84
 8004320:	4619      	mov	r1, r3
 8004322:	4b58      	ldr	r3, [pc, #352]	; (8004484 <LTDC_SetConfig+0x32c>)
 8004324:	4013      	ands	r3, r2
 8004326:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	6809      	ldr	r1, [r1, #0]
 8004334:	4608      	mov	r0, r1
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	01c9      	lsls	r1, r1, #7
 800433a:	4401      	add	r1, r0
 800433c:	3184      	adds	r1, #132	; 0x84
 800433e:	4313      	orrs	r3, r2
 8004340:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	01db      	lsls	r3, r3, #7
 800434c:	4413      	add	r3, r2
 800434e:	3384      	adds	r3, #132	; 0x84
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	01db      	lsls	r3, r3, #7
 800435c:	4413      	add	r3, r2
 800435e:	3384      	adds	r3, #132	; 0x84
 8004360:	461a      	mov	r2, r3
 8004362:	2300      	movs	r3, #0
 8004364:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	01db      	lsls	r3, r3, #7
 8004370:	4413      	add	r3, r2
 8004372:	3384      	adds	r3, #132	; 0x84
 8004374:	461a      	mov	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d102      	bne.n	800438a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004384:	2304      	movs	r3, #4
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	e01b      	b.n	80043c2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d102      	bne.n	8004398 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004392:	2303      	movs	r3, #3
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	e014      	b.n	80043c2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b04      	cmp	r3, #4
 800439e:	d00b      	beq.n	80043b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d007      	beq.n	80043b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d003      	beq.n	80043b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80043b4:	2b07      	cmp	r3, #7
 80043b6:	d102      	bne.n	80043be <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80043b8:	2302      	movs	r3, #2
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e001      	b.n	80043c2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80043be:	2301      	movs	r3, #1
 80043c0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	01db      	lsls	r3, r3, #7
 80043cc:	4413      	add	r3, r2
 80043ce:	3384      	adds	r3, #132	; 0x84
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	4611      	mov	r1, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	01d2      	lsls	r2, r2, #7
 80043dc:	440a      	add	r2, r1
 80043de:	3284      	adds	r2, #132	; 0x84
 80043e0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80043e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	041a      	lsls	r2, r3, #16
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	1acb      	subs	r3, r1, r3
 80043fc:	69f9      	ldr	r1, [r7, #28]
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	3303      	adds	r3, #3
 8004404:	68f9      	ldr	r1, [r7, #12]
 8004406:	6809      	ldr	r1, [r1, #0]
 8004408:	4608      	mov	r0, r1
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	01c9      	lsls	r1, r1, #7
 800440e:	4401      	add	r1, r0
 8004410:	3184      	adds	r1, #132	; 0x84
 8004412:	4313      	orrs	r3, r2
 8004414:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	01db      	lsls	r3, r3, #7
 8004420:	4413      	add	r3, r2
 8004422:	3384      	adds	r3, #132	; 0x84
 8004424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4619      	mov	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	01db      	lsls	r3, r3, #7
 8004430:	440b      	add	r3, r1
 8004432:	3384      	adds	r3, #132	; 0x84
 8004434:	4619      	mov	r1, r3
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <LTDC_SetConfig+0x330>)
 8004438:	4013      	ands	r3, r2
 800443a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	01db      	lsls	r3, r3, #7
 8004446:	4413      	add	r3, r2
 8004448:	3384      	adds	r3, #132	; 0x84
 800444a:	461a      	mov	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	01db      	lsls	r3, r3, #7
 800445c:	4413      	add	r3, r2
 800445e:	3384      	adds	r3, #132	; 0x84
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	4611      	mov	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	01d2      	lsls	r2, r2, #7
 800446c:	440a      	add	r2, r1
 800446e:	3284      	adds	r2, #132	; 0x84
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6013      	str	r3, [r2, #0]
}
 8004476:	bf00      	nop
 8004478:	3724      	adds	r7, #36	; 0x24
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	fffff8f8 	.word	0xfffff8f8
 8004488:	fffff800 	.word	0xfffff800

0800448c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449a:	6013      	str	r3, [r2, #0]
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40007000 	.word	0x40007000

080044ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	4b23      	ldr	r3, [pc, #140]	; (8004544 <HAL_PWREx_EnableOverDrive+0x98>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4a22      	ldr	r2, [pc, #136]	; (8004544 <HAL_PWREx_EnableOverDrive+0x98>)
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
 80044c2:	4b20      	ldr	r3, [pc, #128]	; (8004544 <HAL_PWREx_EnableOverDrive+0x98>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044ce:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044da:	f7fe fa71 	bl	80029c0 <HAL_GetTick>
 80044de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044e0:	e009      	b.n	80044f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044e2:	f7fe fa6d 	bl	80029c0 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044f0:	d901      	bls.n	80044f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e022      	b.n	800453c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004502:	d1ee      	bne.n	80044e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004504:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a0f      	ldr	r2, [pc, #60]	; (8004548 <HAL_PWREx_EnableOverDrive+0x9c>)
 800450a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004510:	f7fe fa56 	bl	80029c0 <HAL_GetTick>
 8004514:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004516:	e009      	b.n	800452c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004518:	f7fe fa52 	bl	80029c0 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004526:	d901      	bls.n	800452c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e007      	b.n	800453c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <HAL_PWREx_EnableOverDrive+0x9c>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004538:	d1ee      	bne.n	8004518 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40023800 	.word	0x40023800
 8004548:	40007000 	.word	0x40007000

0800454c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af02      	add	r7, sp, #8
 8004552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004554:	f7fe fa34 	bl	80029c0 <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e067      	b.n	8004634 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7fd fc5b 	bl	8001e34 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800457e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f85e 	bl	8004644 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	3b01      	subs	r3, #1
 8004598:	021a      	lsls	r2, r3, #8
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	2120      	movs	r1, #32
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f856 	bl	8004660 <QSPI_WaitFlagStateUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80045b8:	7afb      	ldrb	r3, [r7, #11]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d135      	bne.n	800462a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <HAL_QSPI_Init+0xf0>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6852      	ldr	r2, [r2, #4]
 80045cc:	0611      	lsls	r1, r2, #24
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68d2      	ldr	r2, [r2, #12]
 80045d2:	4311      	orrs	r1, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	69d2      	ldr	r2, [r2, #28]
 80045d8:	4311      	orrs	r1, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6a12      	ldr	r2, [r2, #32]
 80045de:	4311      	orrs	r1, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	4b14      	ldr	r3, [pc, #80]	; (8004640 <HAL_QSPI_Init+0xf4>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6912      	ldr	r2, [r2, #16]
 80045f6:	0411      	lsls	r1, r2, #16
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6952      	ldr	r2, [r2, #20]
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6992      	ldr	r2, [r2, #24]
 8004602:	4311      	orrs	r1, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	430b      	orrs	r3, r1
 800460a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004632:	7afb      	ldrb	r3, [r7, #11]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	00ffff2f 	.word	0x00ffff2f
 8004640:	ffe0f8fe 	.word	0xffe0f8fe

08004644 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004670:	e01a      	b.n	80046a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d016      	beq.n	80046a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7fe f9a1 	bl	80029c0 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2204      	movs	r2, #4
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e00e      	b.n	80046c6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf14      	ite	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	2300      	moveq	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d1d6      	bne.n	8004672 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046d8:	2300      	movs	r3, #0
 80046da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e291      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8087 	beq.w	8004802 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f4:	4b96      	ldr	r3, [pc, #600]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d00c      	beq.n	800471a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004700:	4b93      	ldr	r3, [pc, #588]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	d112      	bne.n	8004732 <HAL_RCC_OscConfig+0x62>
 800470c:	4b90      	ldr	r3, [pc, #576]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004718:	d10b      	bne.n	8004732 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471a:	4b8d      	ldr	r3, [pc, #564]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d06c      	beq.n	8004800 <HAL_RCC_OscConfig+0x130>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d168      	bne.n	8004800 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e26b      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x7a>
 800473c:	4b84      	ldr	r3, [pc, #528]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a83      	ldr	r2, [pc, #524]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e02e      	b.n	80047a8 <HAL_RCC_OscConfig+0xd8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x9c>
 8004752:	4b7f      	ldr	r3, [pc, #508]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7e      	ldr	r2, [pc, #504]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b7c      	ldr	r3, [pc, #496]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a7b      	ldr	r2, [pc, #492]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e01d      	b.n	80047a8 <HAL_RCC_OscConfig+0xd8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0xc0>
 8004776:	4b76      	ldr	r3, [pc, #472]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a75      	ldr	r2, [pc, #468]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800477c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	4b73      	ldr	r3, [pc, #460]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a72      	ldr	r2, [pc, #456]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0xd8>
 8004790:	4b6f      	ldr	r3, [pc, #444]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a6e      	ldr	r2, [pc, #440]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	4b6c      	ldr	r3, [pc, #432]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a6b      	ldr	r2, [pc, #428]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80047a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fe f906 	bl	80029c0 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fe f902 	bl	80029c0 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e21f      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	4b61      	ldr	r3, [pc, #388]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0xe8>
 80047d6:	e014      	b.n	8004802 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fe f8f2 	bl	80029c0 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fe f8ee 	bl	80029c0 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	; 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e20b      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f2:	4b57      	ldr	r3, [pc, #348]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x110>
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d069      	beq.n	80048e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800480e:	4b50      	ldr	r3, [pc, #320]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481a:	4b4d      	ldr	r3, [pc, #308]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b08      	cmp	r3, #8
 8004824:	d11c      	bne.n	8004860 <HAL_RCC_OscConfig+0x190>
 8004826:	4b4a      	ldr	r3, [pc, #296]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d116      	bne.n	8004860 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	4b47      	ldr	r3, [pc, #284]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_RCC_OscConfig+0x17a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d001      	beq.n	800484a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e1df      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	4b41      	ldr	r3, [pc, #260]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	493d      	ldr	r1, [pc, #244]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485e:	e040      	b.n	80048e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d023      	beq.n	80048b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004868:	4b39      	ldr	r3, [pc, #228]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a38      	ldr	r2, [pc, #224]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fe f8a4 	bl	80029c0 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487c:	f7fe f8a0 	bl	80029c0 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e1bd      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488e:	4b30      	ldr	r3, [pc, #192]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489a:	4b2d      	ldr	r3, [pc, #180]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4929      	ldr	r1, [pc, #164]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]
 80048ae:	e018      	b.n	80048e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b0:	4b27      	ldr	r3, [pc, #156]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a26      	ldr	r2, [pc, #152]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fe f880 	bl	80029c0 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c4:	f7fe f87c 	bl	80029c0 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e199      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d6:	4b1e      	ldr	r3, [pc, #120]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d038      	beq.n	8004960 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d019      	beq.n	800492a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f6:	4b16      	ldr	r3, [pc, #88]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fa:	4a15      	ldr	r2, [pc, #84]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004902:	f7fe f85d 	bl	80029c0 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490a:	f7fe f859 	bl	80029c0 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e176      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800491e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f0      	beq.n	800490a <HAL_RCC_OscConfig+0x23a>
 8004928:	e01a      	b.n	8004960 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 800492c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492e:	4a08      	ldr	r2, [pc, #32]	; (8004950 <HAL_RCC_OscConfig+0x280>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004936:	f7fe f843 	bl	80029c0 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800493c:	e00a      	b.n	8004954 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800493e:	f7fe f83f 	bl	80029c0 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d903      	bls.n	8004954 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e15c      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
 8004950:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004954:	4b91      	ldr	r3, [pc, #580]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1ee      	bne.n	800493e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80a4 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496e:	4b8b      	ldr	r3, [pc, #556]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10d      	bne.n	8004996 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800497a:	4b88      	ldr	r3, [pc, #544]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	4a87      	ldr	r2, [pc, #540]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004984:	6413      	str	r3, [r2, #64]	; 0x40
 8004986:	4b85      	ldr	r3, [pc, #532]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004996:	4b82      	ldr	r3, [pc, #520]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d118      	bne.n	80049d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80049a2:	4b7f      	ldr	r3, [pc, #508]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a7e      	ldr	r2, [pc, #504]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 80049a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ae:	f7fe f807 	bl	80029c0 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b6:	f7fe f803 	bl	80029c0 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b64      	cmp	r3, #100	; 0x64
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e120      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c8:	4b75      	ldr	r3, [pc, #468]	; (8004ba0 <HAL_RCC_OscConfig+0x4d0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d106      	bne.n	80049ea <HAL_RCC_OscConfig+0x31a>
 80049dc:	4b6f      	ldr	r3, [pc, #444]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e0:	4a6e      	ldr	r2, [pc, #440]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6713      	str	r3, [r2, #112]	; 0x70
 80049e8:	e02d      	b.n	8004a46 <HAL_RCC_OscConfig+0x376>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x33c>
 80049f2:	4b6a      	ldr	r3, [pc, #424]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a69      	ldr	r2, [pc, #420]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
 80049fe:	4b67      	ldr	r3, [pc, #412]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	4a66      	ldr	r2, [pc, #408]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a04:	f023 0304 	bic.w	r3, r3, #4
 8004a08:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0a:	e01c      	b.n	8004a46 <HAL_RCC_OscConfig+0x376>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCC_OscConfig+0x35e>
 8004a14:	4b61      	ldr	r3, [pc, #388]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a60      	ldr	r2, [pc, #384]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a1a:	f043 0304 	orr.w	r3, r3, #4
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a20:	4b5e      	ldr	r3, [pc, #376]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a5d      	ldr	r2, [pc, #372]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2c:	e00b      	b.n	8004a46 <HAL_RCC_OscConfig+0x376>
 8004a2e:	4b5b      	ldr	r3, [pc, #364]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a5a      	ldr	r2, [pc, #360]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3a:	4b58      	ldr	r3, [pc, #352]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	4a57      	ldr	r2, [pc, #348]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a40:	f023 0304 	bic.w	r3, r3, #4
 8004a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d015      	beq.n	8004a7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fd ffb7 	bl	80029c0 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fd ffb3 	bl	80029c0 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0ce      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6c:	4b4b      	ldr	r3, [pc, #300]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ee      	beq.n	8004a56 <HAL_RCC_OscConfig+0x386>
 8004a78:	e014      	b.n	8004aa4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fd ffa1 	bl	80029c0 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fd ff9d 	bl	80029c0 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e0b8      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a98:	4b40      	ldr	r3, [pc, #256]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ee      	bne.n	8004a82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d105      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aaa:	4b3c      	ldr	r3, [pc, #240]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a3b      	ldr	r2, [pc, #236]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80a4 	beq.w	8004c08 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ac0:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d06b      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d149      	bne.n	8004b68 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad4:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a30      	ldr	r2, [pc, #192]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fd ff6e 	bl	80029c0 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fd ff6a 	bl	80029c0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e087      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	019b      	lsls	r3, r3, #6
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004b2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b32:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b34:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fd ff3e 	bl	80029c0 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b48:	f7fd ff3a 	bl	80029c0 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e057      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5a:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0x478>
 8004b66:	e04f      	b.n	8004c08 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a0b      	ldr	r2, [pc, #44]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fd ff24 	bl	80029c0 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fd ff20 	bl	80029c0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e03d      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8e:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4ac>
 8004b9a:	e035      	b.n	8004c08 <HAL_RCC_OscConfig+0x538>
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <HAL_RCC_OscConfig+0x544>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d028      	beq.n	8004c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d121      	bne.n	8004c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d11a      	bne.n	8004c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d111      	bne.n	8004c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	3b01      	subs	r3, #1
 8004bee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800

08004c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0d0      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c30:	4b6a      	ldr	r3, [pc, #424]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d910      	bls.n	8004c60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b67      	ldr	r3, [pc, #412]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 020f 	bic.w	r2, r3, #15
 8004c46:	4965      	ldr	r1, [pc, #404]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b63      	ldr	r3, [pc, #396]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0b8      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d020      	beq.n	8004cae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c78:	4b59      	ldr	r3, [pc, #356]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a58      	ldr	r2, [pc, #352]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c90:	4b53      	ldr	r3, [pc, #332]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4a52      	ldr	r2, [pc, #328]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c9c:	4b50      	ldr	r3, [pc, #320]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	494d      	ldr	r1, [pc, #308]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d040      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d115      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e07f      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	4b41      	ldr	r3, [pc, #260]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e073      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	4b3d      	ldr	r3, [pc, #244]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e06b      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cfa:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f023 0203 	bic.w	r2, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4936      	ldr	r1, [pc, #216]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0c:	f7fd fe58 	bl	80029c0 <HAL_GetTick>
 8004d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d14:	f7fd fe54 	bl	80029c0 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e053      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 020c 	and.w	r2, r3, #12
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d1eb      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b27      	ldr	r3, [pc, #156]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d210      	bcs.n	8004d6c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 020f 	bic.w	r2, r3, #15
 8004d52:	4922      	ldr	r1, [pc, #136]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d001      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e032      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d008      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d78:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4916      	ldr	r1, [pc, #88]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d96:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	490e      	ldr	r1, [pc, #56]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004daa:	f000 f821 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8004dae:	4602      	mov	r2, r0
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	490a      	ldr	r1, [pc, #40]	; (8004de4 <HAL_RCC_ClockConfig+0x1cc>)
 8004dbc:	5ccb      	ldrb	r3, [r1, r3]
 8004dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc2:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <HAL_RCC_ClockConfig+0x1d0>)
 8004dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <HAL_RCC_ClockConfig+0x1d4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd fcfa 	bl	80027c4 <HAL_InitTick>

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40023c00 	.word	0x40023c00
 8004de0:	40023800 	.word	0x40023800
 8004de4:	0800a6f8 	.word	0x0800a6f8
 8004de8:	20000000 	.word	0x20000000
 8004dec:	20000004 	.word	0x20000004

08004df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df4:	b090      	sub	sp, #64	; 0x40
 8004df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e00:	2300      	movs	r3, #0
 8004e02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e08:	4b59      	ldr	r3, [pc, #356]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d00d      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0x40>
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	f200 80a1 	bhi.w	8004f5c <HAL_RCC_GetSysClockFreq+0x16c>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x34>
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d003      	beq.n	8004e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e22:	e09b      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e24:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e28:	e09b      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e2a:	4b53      	ldr	r3, [pc, #332]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e2e:	e098      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e30:	4b4f      	ldr	r3, [pc, #316]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e3a:	4b4d      	ldr	r3, [pc, #308]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d028      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e46:	4b4a      	ldr	r3, [pc, #296]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	099b      	lsrs	r3, r3, #6
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	623b      	str	r3, [r7, #32]
 8004e50:	627a      	str	r2, [r7, #36]	; 0x24
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e5c:	fb03 f201 	mul.w	r2, r3, r1
 8004e60:	2300      	movs	r3, #0
 8004e62:	fb00 f303 	mul.w	r3, r0, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	4a43      	ldr	r2, [pc, #268]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e6a:	fba0 1202 	umull	r1, r2, r0, r2
 8004e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e70:	460a      	mov	r2, r1
 8004e72:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e76:	4413      	add	r3, r2
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	61fa      	str	r2, [r7, #28]
 8004e82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e8a:	f7fb f9bd 	bl	8000208 <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4613      	mov	r3, r2
 8004e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e96:	e053      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e98:	4b35      	ldr	r3, [pc, #212]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	099b      	lsrs	r3, r3, #6
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	617a      	str	r2, [r7, #20]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004eaa:	f04f 0b00 	mov.w	fp, #0
 8004eae:	4652      	mov	r2, sl
 8004eb0:	465b      	mov	r3, fp
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f04f 0100 	mov.w	r1, #0
 8004eba:	0159      	lsls	r1, r3, #5
 8004ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec0:	0150      	lsls	r0, r2, #5
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	ebb2 080a 	subs.w	r8, r2, sl
 8004eca:	eb63 090b 	sbc.w	r9, r3, fp
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004eda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ede:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ee2:	ebb2 0408 	subs.w	r4, r2, r8
 8004ee6:	eb63 0509 	sbc.w	r5, r3, r9
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	00eb      	lsls	r3, r5, #3
 8004ef4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ef8:	00e2      	lsls	r2, r4, #3
 8004efa:	4614      	mov	r4, r2
 8004efc:	461d      	mov	r5, r3
 8004efe:	eb14 030a 	adds.w	r3, r4, sl
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	eb45 030b 	adc.w	r3, r5, fp
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f16:	4629      	mov	r1, r5
 8004f18:	028b      	lsls	r3, r1, #10
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f20:	4621      	mov	r1, r4
 8004f22:	028a      	lsls	r2, r1, #10
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	60fa      	str	r2, [r7, #12]
 8004f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f34:	f7fb f968 	bl	8000208 <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	0c1b      	lsrs	r3, r3, #16
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004f50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f5a:	e002      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f5c:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3740      	adds	r7, #64	; 0x40
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f6e:	bf00      	nop
 8004f70:	40023800 	.word	0x40023800
 8004f74:	00f42400 	.word	0x00f42400
 8004f78:	017d7840 	.word	0x017d7840

08004f7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f80:	4b03      	ldr	r3, [pc, #12]	; (8004f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f82:	681b      	ldr	r3, [r3, #0]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	20000000 	.word	0x20000000

08004f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f98:	f7ff fff0 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	0a9b      	lsrs	r3, r3, #10
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4903      	ldr	r1, [pc, #12]	; (8004fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	0800a708 	.word	0x0800a708

08004fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fc0:	f7ff ffdc 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	0b5b      	lsrs	r3, r3, #13
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	4903      	ldr	r1, [pc, #12]	; (8004fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fd2:	5ccb      	ldrb	r3, [r1, r3]
 8004fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	0800a708 	.word	0x0800a708

08004fe4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	220f      	movs	r2, #15
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ff4:	4b12      	ldr	r3, [pc, #72]	; (8005040 <HAL_RCC_GetClockConfig+0x5c>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0203 	and.w	r2, r3, #3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <HAL_RCC_GetClockConfig+0x5c>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800500c:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <HAL_RCC_GetClockConfig+0x5c>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005018:	4b09      	ldr	r3, [pc, #36]	; (8005040 <HAL_RCC_GetClockConfig+0x5c>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	08db      	lsrs	r3, r3, #3
 800501e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005026:	4b07      	ldr	r3, [pc, #28]	; (8005044 <HAL_RCC_GetClockConfig+0x60>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 020f 	and.w	r2, r3, #15
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	601a      	str	r2, [r3, #0]
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800
 8005044:	40023c00 	.word	0x40023c00

08005048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d012      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005070:	4b69      	ldr	r3, [pc, #420]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	4a68      	ldr	r2, [pc, #416]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005076:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800507a:	6093      	str	r3, [r2, #8]
 800507c:	4b66      	ldr	r3, [pc, #408]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005084:	4964      	ldr	r1, [pc, #400]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005092:	2301      	movs	r3, #1
 8005094:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d017      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050a2:	4b5d      	ldr	r3, [pc, #372]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	4959      	ldr	r1, [pc, #356]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c0:	d101      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80050c2:	2301      	movs	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80050ce:	2301      	movs	r3, #1
 80050d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d017      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050de:	4b4e      	ldr	r3, [pc, #312]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	494a      	ldr	r1, [pc, #296]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fc:	d101      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80050fe:	2301      	movs	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800510a:	2301      	movs	r3, #1
 800510c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800511a:	2301      	movs	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 808b 	beq.w	8005242 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800512c:	4b3a      	ldr	r3, [pc, #232]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	4a39      	ldr	r2, [pc, #228]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005136:	6413      	str	r3, [r2, #64]	; 0x40
 8005138:	4b37      	ldr	r3, [pc, #220]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005144:	4b35      	ldr	r3, [pc, #212]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a34      	ldr	r2, [pc, #208]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800514a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005150:	f7fd fc36 	bl	80029c0 <HAL_GetTick>
 8005154:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005156:	e008      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005158:	f7fd fc32 	bl	80029c0 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b64      	cmp	r3, #100	; 0x64
 8005164:	d901      	bls.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e357      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800516a:	4b2c      	ldr	r3, [pc, #176]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005176:	4b28      	ldr	r3, [pc, #160]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d035      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	429a      	cmp	r2, r3
 8005192:	d02e      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005194:	4b20      	ldr	r3, [pc, #128]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800519e:	4b1e      	ldr	r3, [pc, #120]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	4a1d      	ldr	r2, [pc, #116]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051aa:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	4a1a      	ldr	r2, [pc, #104]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80051b6:	4a18      	ldr	r2, [pc, #96]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051bc:	4b16      	ldr	r3, [pc, #88]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d114      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fd fbfa 	bl	80029c0 <HAL_GetTick>
 80051cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ce:	e00a      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d0:	f7fd fbf6 	bl	80029c0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	f241 3288 	movw	r2, #5000	; 0x1388
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e319      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0ee      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051fe:	d111      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800520e:	400b      	ands	r3, r1
 8005210:	4901      	ldr	r1, [pc, #4]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005212:	4313      	orrs	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
 8005216:	e00b      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005218:	40023800 	.word	0x40023800
 800521c:	40007000 	.word	0x40007000
 8005220:	0ffffcff 	.word	0x0ffffcff
 8005224:	4baa      	ldr	r3, [pc, #680]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4aa9      	ldr	r2, [pc, #676]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800522a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800522e:	6093      	str	r3, [r2, #8]
 8005230:	4ba7      	ldr	r3, [pc, #668]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005232:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523c:	49a4      	ldr	r1, [pc, #656]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800523e:	4313      	orrs	r3, r2
 8005240:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	2b00      	cmp	r3, #0
 800524c:	d010      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800524e:	4ba0      	ldr	r3, [pc, #640]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005254:	4a9e      	ldr	r2, [pc, #632]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800525a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800525e:	4b9c      	ldr	r3, [pc, #624]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005260:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	4999      	ldr	r1, [pc, #612]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800527c:	4b94      	ldr	r3, [pc, #592]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800528a:	4991      	ldr	r1, [pc, #580]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800529e:	4b8c      	ldr	r3, [pc, #560]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ac:	4988      	ldr	r1, [pc, #544]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052c0:	4b83      	ldr	r3, [pc, #524]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ce:	4980      	ldr	r1, [pc, #512]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052e2:	4b7b      	ldr	r3, [pc, #492]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f0:	4977      	ldr	r1, [pc, #476]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005304:	4b72      	ldr	r3, [pc, #456]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	f023 0203 	bic.w	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	496f      	ldr	r1, [pc, #444]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005326:	4b6a      	ldr	r3, [pc, #424]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532c:	f023 020c 	bic.w	r2, r3, #12
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005334:	4966      	ldr	r1, [pc, #408]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005348:	4b61      	ldr	r3, [pc, #388]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005356:	495e      	ldr	r1, [pc, #376]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800536a:	4b59      	ldr	r3, [pc, #356]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005370:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005378:	4955      	ldr	r1, [pc, #340]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800538c:	4b50      	ldr	r3, [pc, #320]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005392:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539a:	494d      	ldr	r1, [pc, #308]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80053ae:	4b48      	ldr	r3, [pc, #288]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053bc:	4944      	ldr	r1, [pc, #272]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80053d0:	4b3f      	ldr	r3, [pc, #252]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053de:	493c      	ldr	r1, [pc, #240]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80053f2:	4b37      	ldr	r3, [pc, #220]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005400:	4933      	ldr	r1, [pc, #204]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005414:	4b2e      	ldr	r3, [pc, #184]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005422:	492b      	ldr	r1, [pc, #172]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d011      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005436:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005444:	4922      	ldr	r1, [pc, #136]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005454:	d101      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005456:	2301      	movs	r3, #1
 8005458:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005466:	2301      	movs	r3, #1
 8005468:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005476:	4b16      	ldr	r3, [pc, #88]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005484:	4912      	ldr	r1, [pc, #72]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00b      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005498:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a8:	4909      	ldr	r1, [pc, #36]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d006      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 80d9 	beq.w	8005676 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054c4:	4b02      	ldr	r3, [pc, #8]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a01      	ldr	r2, [pc, #4]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054ce:	e001      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80054d0:	40023800 	.word	0x40023800
 80054d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d6:	f7fd fa73 	bl	80029c0 <HAL_GetTick>
 80054da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054de:	f7fd fa6f 	bl	80029c0 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b64      	cmp	r3, #100	; 0x64
 80054ea:	d901      	bls.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e194      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054f0:	4b6c      	ldr	r3, [pc, #432]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f0      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d021      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550c:	2b00      	cmp	r3, #0
 800550e:	d11d      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005510:	4b64      	ldr	r3, [pc, #400]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005516:	0c1b      	lsrs	r3, r3, #16
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800551e:	4b61      	ldr	r3, [pc, #388]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005524:	0e1b      	lsrs	r3, r3, #24
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	019a      	lsls	r2, r3, #6
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	041b      	lsls	r3, r3, #16
 8005536:	431a      	orrs	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	061b      	lsls	r3, r3, #24
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	071b      	lsls	r3, r3, #28
 8005544:	4957      	ldr	r1, [pc, #348]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d004      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800556a:	2b00      	cmp	r3, #0
 800556c:	d02e      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005576:	d129      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005578:	4b4a      	ldr	r3, [pc, #296]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800557a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557e:	0c1b      	lsrs	r3, r3, #16
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005586:	4b47      	ldr	r3, [pc, #284]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800558c:	0f1b      	lsrs	r3, r3, #28
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	019a      	lsls	r2, r3, #6
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	061b      	lsls	r3, r3, #24
 80055a6:	431a      	orrs	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	071b      	lsls	r3, r3, #28
 80055ac:	493d      	ldr	r1, [pc, #244]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055b4:	4b3b      	ldr	r3, [pc, #236]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ba:	f023 021f 	bic.w	r2, r3, #31
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	3b01      	subs	r3, #1
 80055c4:	4937      	ldr	r1, [pc, #220]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01d      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055d8:	4b32      	ldr	r3, [pc, #200]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055de:	0e1b      	lsrs	r3, r3, #24
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055e6:	4b2f      	ldr	r3, [pc, #188]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ec:	0f1b      	lsrs	r3, r3, #28
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	019a      	lsls	r2, r3, #6
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	431a      	orrs	r2, r3
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	431a      	orrs	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	071b      	lsls	r3, r3, #28
 800560c:	4925      	ldr	r1, [pc, #148]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d011      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	019a      	lsls	r2, r3, #6
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	061b      	lsls	r3, r3, #24
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	071b      	lsls	r3, r3, #28
 800563c:	4919      	ldr	r1, [pc, #100]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005644:	4b17      	ldr	r3, [pc, #92]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a16      	ldr	r2, [pc, #88]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800564e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005650:	f7fd f9b6 	bl	80029c0 <HAL_GetTick>
 8005654:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005656:	e008      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005658:	f7fd f9b2 	bl	80029c0 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b64      	cmp	r3, #100	; 0x64
 8005664:	d901      	bls.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e0d7      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800566a:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f0      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b01      	cmp	r3, #1
 800567a:	f040 80cd 	bne.w	8005818 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800567e:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568a:	f7fd f999 	bl	80029c0 <HAL_GetTick>
 800568e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005690:	e00a      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005692:	f7fd f995 	bl	80029c0 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b64      	cmp	r3, #100	; 0x64
 800569e:	d903      	bls.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e0ba      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80056a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056a8:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b4:	d0ed      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d02e      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d12a      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056de:	4b51      	ldr	r3, [pc, #324]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	0c1b      	lsrs	r3, r3, #16
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056ec:	4b4d      	ldr	r3, [pc, #308]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f2:	0f1b      	lsrs	r3, r3, #28
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	019a      	lsls	r2, r3, #6
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	041b      	lsls	r3, r3, #16
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	061b      	lsls	r3, r3, #24
 800570c:	431a      	orrs	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	071b      	lsls	r3, r3, #28
 8005712:	4944      	ldr	r1, [pc, #272]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800571a:	4b42      	ldr	r3, [pc, #264]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800571c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005720:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	3b01      	subs	r3, #1
 800572a:	021b      	lsls	r3, r3, #8
 800572c:	493d      	ldr	r1, [pc, #244]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d022      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005748:	d11d      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800574a:	4b36      	ldr	r3, [pc, #216]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800574c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005750:	0e1b      	lsrs	r3, r3, #24
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005758:	4b32      	ldr	r3, [pc, #200]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575e:	0f1b      	lsrs	r3, r3, #28
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	019a      	lsls	r2, r3, #6
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	041b      	lsls	r3, r3, #16
 8005772:	431a      	orrs	r2, r3
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	061b      	lsls	r3, r3, #24
 8005778:	431a      	orrs	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	071b      	lsls	r3, r3, #28
 800577e:	4929      	ldr	r1, [pc, #164]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d028      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005792:	4b24      	ldr	r3, [pc, #144]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005798:	0e1b      	lsrs	r3, r3, #24
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057a0:	4b20      	ldr	r3, [pc, #128]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	019a      	lsls	r2, r3, #6
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	041b      	lsls	r3, r3, #16
 80057b8:	431a      	orrs	r2, r3
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	061b      	lsls	r3, r3, #24
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	071b      	lsls	r3, r3, #28
 80057c6:	4917      	ldr	r1, [pc, #92]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80057ce:	4b15      	ldr	r3, [pc, #84]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	4911      	ldr	r1, [pc, #68]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80057e4:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a0e      	ldr	r2, [pc, #56]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f0:	f7fd f8e6 	bl	80029c0 <HAL_GetTick>
 80057f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057f8:	f7fd f8e2 	bl	80029c0 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b64      	cmp	r3, #100	; 0x64
 8005804:	d901      	bls.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e007      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800580a:	4b06      	ldr	r3, [pc, #24]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005816:	d1ef      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40023800 	.word	0x40023800

08005828 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005846:	f040 808c 	bne.w	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800584a:	4b95      	ldr	r3, [pc, #596]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800584c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005850:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005858:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005860:	d07c      	beq.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005868:	d87d      	bhi.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005876:	d039      	beq.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005878:	e075      	b.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800587a:	4b89      	ldr	r3, [pc, #548]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d108      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005886:	4b86      	ldr	r3, [pc, #536]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800588e:	4a85      	ldr	r2, [pc, #532]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005890:	fbb2 f3f3 	udiv	r3, r2, r3
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	e007      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005898:	4b81      	ldr	r3, [pc, #516]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a0:	4a81      	ldr	r2, [pc, #516]	; (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80058a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80058a8:	4b7d      	ldr	r3, [pc, #500]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	0e1b      	lsrs	r3, r3, #24
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80058b6:	4b7a      	ldr	r3, [pc, #488]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058bc:	099b      	lsrs	r3, r3, #6
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	fb03 f202 	mul.w	r2, r3, r2
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ce:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80058d0:	4b73      	ldr	r3, [pc, #460]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d6:	0a1b      	lsrs	r3, r3, #8
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	3301      	adds	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]
        break;
 80058ea:	e03d      	b.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80058ec:	4b6c      	ldr	r3, [pc, #432]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058f8:	4b69      	ldr	r3, [pc, #420]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005900:	4a68      	ldr	r2, [pc, #416]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005902:	fbb2 f3f3 	udiv	r3, r2, r3
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	e007      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800590a:	4b65      	ldr	r3, [pc, #404]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005912:	4a65      	ldr	r2, [pc, #404]	; (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005914:	fbb2 f3f3 	udiv	r3, r2, r3
 8005918:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800591a:	4b61      	ldr	r3, [pc, #388]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800591c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005920:	0e1b      	lsrs	r3, r3, #24
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005928:	4b5d      	ldr	r3, [pc, #372]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800592a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800592e:	099b      	lsrs	r3, r3, #6
 8005930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	fb03 f202 	mul.w	r2, r3, r2
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005940:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005942:	4b57      	ldr	r3, [pc, #348]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	3301      	adds	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	fbb2 f3f3 	udiv	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]
        break;
 800595a:	e005      	b.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800595c:	4b53      	ldr	r3, [pc, #332]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800595e:	617b      	str	r3, [r7, #20]
        break;
 8005960:	e002      	b.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8005962:	bf00      	nop
 8005964:	e000      	b.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8005966:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800596e:	f040 808c 	bne.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005972:	4b4b      	ldr	r3, [pc, #300]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005978:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005980:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005988:	d07c      	beq.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005990:	d87d      	bhi.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800599e:	d039      	beq.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80059a0:	e075      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80059a2:	4b3f      	ldr	r3, [pc, #252]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d108      	bne.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059ae:	4b3c      	ldr	r3, [pc, #240]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059b6:	4a3b      	ldr	r2, [pc, #236]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	e007      	b.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80059c0:	4b37      	ldr	r3, [pc, #220]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c8:	4a37      	ldr	r2, [pc, #220]	; (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80059ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ce:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80059d0:	4b33      	ldr	r3, [pc, #204]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	0e1b      	lsrs	r3, r3, #24
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80059de:	4b30      	ldr	r3, [pc, #192]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	099b      	lsrs	r3, r3, #6
 80059e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	fb03 f202 	mul.w	r2, r3, r2
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80059f8:	4b29      	ldr	r3, [pc, #164]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059fe:	0a1b      	lsrs	r3, r3, #8
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	617b      	str	r3, [r7, #20]
        break;
 8005a12:	e03d      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005a14:	4b22      	ldr	r3, [pc, #136]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d108      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a20:	4b1f      	ldr	r3, [pc, #124]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a28:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	e007      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005a32:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a3a:	4a1b      	ldr	r2, [pc, #108]	; (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005a42:	4b17      	ldr	r3, [pc, #92]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a48:	0e1b      	lsrs	r3, r3, #24
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005a50:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a56:	099b      	lsrs	r3, r3, #6
 8005a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	fb03 f202 	mul.w	r2, r3, r2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	3301      	adds	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	617b      	str	r3, [r7, #20]
        break;
 8005a82:	e005      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a84:	4b09      	ldr	r3, [pc, #36]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005a86:	617b      	str	r3, [r7, #20]
        break;
 8005a88:	e002      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8005a8a:	bf00      	nop
 8005a8c:	e000      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8005a8e:	bf00      	nop

  return frequency;
 8005a90:	697b      	ldr	r3, [r7, #20]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	00f42400 	.word	0x00f42400
 8005aa8:	017d7840 	.word	0x017d7840
 8005aac:	00bb8000 	.word	0x00bb8000

08005ab0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e081      	b.n	8005bc6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	7f5b      	ldrb	r3, [r3, #29]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fc fa3e 	bl	8001f54 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	22ca      	movs	r2, #202	; 0xca
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2253      	movs	r2, #83	; 0x53
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fb16 	bl	8006120 <RTC_EnterInitMode>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d008      	beq.n	8005b0c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	22ff      	movs	r2, #255	; 0xff
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2204      	movs	r2, #4
 8005b06:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e05c      	b.n	8005bc6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6899      	ldr	r1, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <HAL_RTC_Init+0x120>)
 8005b18:	400b      	ands	r3, r1
 8005b1a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6899      	ldr	r1, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	68d2      	ldr	r2, [r2, #12]
 8005b42:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6919      	ldr	r1, [r3, #16]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	041a      	lsls	r2, r3, #16
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b66:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10e      	bne.n	8005b94 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 faaa 	bl	80060d0 <HAL_RTC_WaitForSynchro>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d008      	beq.n	8005b94 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	22ff      	movs	r2, #255	; 0xff
 8005b88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e018      	b.n	8005bc6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0208 	bic.w	r2, r2, #8
 8005ba2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	22ff      	movs	r2, #255	; 0xff
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
  }
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	ff8fffbf 	.word	0xff8fffbf

08005bd4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	7f1b      	ldrb	r3, [r3, #28]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_RTC_SetTime+0x1c>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e0a8      	b.n	8005d42 <HAL_RTC_SetTime+0x16e>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d126      	bne.n	8005c50 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d102      	bne.n	8005c16 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2200      	movs	r2, #0
 8005c14:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 faac 	bl	8006178 <RTC_ByteToBcd2>
 8005c20:	4603      	mov	r3, r0
 8005c22:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 faa5 	bl	8006178 <RTC_ByteToBcd2>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005c32:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	789b      	ldrb	r3, [r3, #2]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fa9d 	bl	8006178 <RTC_ByteToBcd2>
 8005c3e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005c40:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	7b1b      	ldrb	r3, [r3, #12]
 8005c48:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	e018      	b.n	8005c82 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2200      	movs	r2, #0
 8005c62:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005c70:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005c76:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	7b1b      	ldrb	r3, [r3, #12]
 8005c7c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	22ca      	movs	r2, #202	; 0xca
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2253      	movs	r2, #83	; 0x53
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fa44 	bl	8006120 <RTC_EnterInitMode>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	22ff      	movs	r2, #255	; 0xff
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2204      	movs	r2, #4
 8005caa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e045      	b.n	8005d42 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	6979      	ldr	r1, [r7, #20]
 8005cbc:	4b23      	ldr	r3, [pc, #140]	; (8005d4c <HAL_RTC_SetTime+0x178>)
 8005cbe:	400b      	ands	r3, r1
 8005cc0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cd0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6899      	ldr	r1, [r3, #8]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cf8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d111      	bne.n	8005d2c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f9e1 	bl	80060d0 <HAL_RTC_WaitForSynchro>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	22ff      	movs	r2, #255	; 0xff
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2204      	movs	r2, #4
 8005d20:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e00a      	b.n	8005d42 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	22ff      	movs	r2, #255	; 0xff
 8005d32:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005d40:	2300      	movs	r3, #0
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd90      	pop	{r4, r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	007f7f7f 	.word	0x007f7f7f

08005d50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	7f1b      	ldrb	r3, [r3, #28]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_RTC_SetDate+0x1c>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e092      	b.n	8005e92 <HAL_RTC_SetDate+0x142>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2202      	movs	r2, #2
 8005d76:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10e      	bne.n	8005d9c <HAL_RTC_SetDate+0x4c>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d008      	beq.n	8005d9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	330a      	adds	r3, #10
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d11c      	bne.n	8005ddc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	78db      	ldrb	r3, [r3, #3]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 f9e6 	bl	8006178 <RTC_ByteToBcd2>
 8005dac:	4603      	mov	r3, r0
 8005dae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 f9df 	bl	8006178 <RTC_ByteToBcd2>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005dbe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	789b      	ldrb	r3, [r3, #2]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 f9d7 	bl	8006178 <RTC_ByteToBcd2>
 8005dca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005dcc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	e00e      	b.n	8005dfa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	78db      	ldrb	r3, [r3, #3]
 8005de0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005de8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005dee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	22ca      	movs	r2, #202	; 0xca
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2253      	movs	r2, #83	; 0x53
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f988 	bl	8006120 <RTC_EnterInitMode>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	22ff      	movs	r2, #255	; 0xff
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2204      	movs	r2, #4
 8005e22:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e031      	b.n	8005e92 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	6979      	ldr	r1, [r7, #20]
 8005e34:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <HAL_RTC_SetDate+0x14c>)
 8005e36:	400b      	ands	r3, r1
 8005e38:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e48:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d111      	bne.n	8005e7c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f939 	bl	80060d0 <HAL_RTC_WaitForSynchro>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	22ff      	movs	r2, #255	; 0xff
 8005e6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2204      	movs	r2, #4
 8005e70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e00a      	b.n	8005e92 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	22ff      	movs	r2, #255	; 0xff
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005e90:	2300      	movs	r3, #0
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd90      	pop	{r4, r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	00ffff3f 	.word	0x00ffff3f

08005ea0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ea0:	b590      	push	{r4, r7, lr}
 8005ea2:	b089      	sub	sp, #36	; 0x24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	7f1b      	ldrb	r3, [r3, #28]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_RTC_SetAlarm+0x24>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e101      	b.n	80060c8 <HAL_RTC_SetAlarm+0x228>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d137      	bne.n	8005f46 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f942 	bl	8006178 <RTC_ByteToBcd2>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 f93b 	bl	8006178 <RTC_ByteToBcd2>
 8005f02:	4603      	mov	r3, r0
 8005f04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005f06:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	789b      	ldrb	r3, [r3, #2]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 f933 	bl	8006178 <RTC_ByteToBcd2>
 8005f12:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005f14:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	7b1b      	ldrb	r3, [r3, #12]
 8005f1c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005f1e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 f925 	bl	8006178 <RTC_ByteToBcd2>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005f32:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005f3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61fb      	str	r3, [r7, #28]
 8005f44:	e023      	b.n	8005f8e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2200      	movs	r2, #0
 8005f58:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	785b      	ldrb	r3, [r3, #1]
 8005f64:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005f66:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005f6c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	7b1b      	ldrb	r3, [r3, #12]
 8005f72:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005f74:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f7c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005f7e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005f84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	22ca      	movs	r2, #202	; 0xca
 8005fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2253      	movs	r2, #83	; 0x53
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb2:	d13f      	bne.n	8006034 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fc2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fd2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fd4:	f7fc fcf4 	bl	80029c0 <HAL_GetTick>
 8005fd8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005fda:	e013      	b.n	8006004 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005fdc:	f7fc fcf0 	bl	80029c0 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fea:	d90b      	bls.n	8006004 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	22ff      	movs	r2, #255	; 0xff
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2203      	movs	r2, #3
 8005ff8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e061      	b.n	80060c8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0e4      	beq.n	8005fdc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006030:	609a      	str	r2, [r3, #8]
 8006032:	e03e      	b.n	80060b2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006042:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006052:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006054:	f7fc fcb4 	bl	80029c0 <HAL_GetTick>
 8006058:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800605a:	e013      	b.n	8006084 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800605c:	f7fc fcb0 	bl	80029c0 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800606a:	d90b      	bls.n	8006084 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	22ff      	movs	r2, #255	; 0xff
 8006072:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2203      	movs	r2, #3
 8006078:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e021      	b.n	80060c8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0e4      	beq.n	800605c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	22ff      	movs	r2, #255	; 0xff
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3724      	adds	r7, #36	; 0x24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd90      	pop	{r4, r7, pc}

080060d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060ec:	f7fc fc68 	bl	80029c0 <HAL_GetTick>
 80060f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80060f2:	e009      	b.n	8006108 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060f4:	f7fc fc64 	bl	80029c0 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006102:	d901      	bls.n	8006108 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e007      	b.n	8006118 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0ee      	beq.n	80060f4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006128:	2300      	movs	r3, #0
 800612a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d119      	bne.n	800616e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f04f 32ff 	mov.w	r2, #4294967295
 8006142:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006144:	f7fc fc3c 	bl	80029c0 <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800614a:	e009      	b.n	8006160 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800614c:	f7fc fc38 	bl	80029c0 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800615a:	d901      	bls.n	8006160 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e007      	b.n	8006170 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ee      	beq.n	800614c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8006186:	e005      	b.n	8006194 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	3b0a      	subs	r3, #10
 8006192:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	2b09      	cmp	r3, #9
 8006198:	d8f6      	bhi.n	8006188 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	b2db      	uxtb	r3, r3
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	b2db      	uxtb	r3, r3
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	7f1b      	ldrb	r3, [r3, #28]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e03e      	b.n	800624e <HAL_RTCEx_SetTimeStamp+0x9a>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2202      	movs	r2, #2
 80061da:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	4b1e      	ldr	r3, [pc, #120]	; (800625c <HAL_RTCEx_SetTimeStamp+0xa8>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	22ca      	movs	r2, #202	; 0xca
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2253      	movs	r2, #83	; 0x53
 80061fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0206 	bic.w	r2, r2, #6
 800620e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	430a      	orrs	r2, r1
 800621e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006236:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	22ff      	movs	r2, #255	; 0xff
 800623e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	fffff7f7 	.word	0xfffff7f7

08006260 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e156      	b.n	800652c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fc fa2c 	bl	80026f0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f95b 	bl	800655c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d00c      	beq.n	80062c8 <HAL_SAI_Init+0x68>
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d80d      	bhi.n	80062ce <HAL_SAI_Init+0x6e>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_SAI_Init+0x5c>
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d003      	beq.n	80062c2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80062ba:	e008      	b.n	80062ce <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	61fb      	str	r3, [r7, #28]
      break;
 80062c0:	e006      	b.n	80062d0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80062c2:	2310      	movs	r3, #16
 80062c4:	61fb      	str	r3, [r7, #28]
      break;
 80062c6:	e003      	b.n	80062d0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80062c8:	2320      	movs	r3, #32
 80062ca:	61fb      	str	r3, [r7, #28]
      break;
 80062cc:	e000      	b.n	80062d0 <HAL_SAI_Init+0x70>
      break;
 80062ce:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d81e      	bhi.n	8006316 <HAL_SAI_Init+0xb6>
 80062d8:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <HAL_SAI_Init+0x80>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	080062f1 	.word	0x080062f1
 80062e4:	080062f7 	.word	0x080062f7
 80062e8:	080062ff 	.word	0x080062ff
 80062ec:	08006307 	.word	0x08006307
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]
    }
    break;
 80062f4:	e010      	b.n	8006318 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80062f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062fa:	617b      	str	r3, [r7, #20]
    }
    break;
 80062fc:	e00c      	b.n	8006318 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80062fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006302:	617b      	str	r3, [r7, #20]
    }
    break;
 8006304:	e008      	b.n	8006318 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006306:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800630a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	61fb      	str	r3, [r7, #28]
    }
    break;
 8006314:	e000      	b.n	8006318 <HAL_SAI_Init+0xb8>
    default:
      break;
 8006316:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a85      	ldr	r2, [pc, #532]	; (8006534 <HAL_SAI_Init+0x2d4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_SAI_Init+0xcc>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a84      	ldr	r2, [pc, #528]	; (8006538 <HAL_SAI_Init+0x2d8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d103      	bne.n	8006334 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800632c:	4a83      	ldr	r2, [pc, #524]	; (800653c <HAL_SAI_Init+0x2dc>)
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e002      	b.n	800633a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006334:	4a82      	ldr	r2, [pc, #520]	; (8006540 <HAL_SAI_Init+0x2e0>)
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d04c      	beq.n	80063dc <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a7a      	ldr	r2, [pc, #488]	; (8006534 <HAL_SAI_Init+0x2d4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <HAL_SAI_Init+0xfa>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a78      	ldr	r2, [pc, #480]	; (8006538 <HAL_SAI_Init+0x2d8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d104      	bne.n	8006364 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800635a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800635e:	f7ff fa63 	bl	8005828 <HAL_RCCEx_GetPeriphCLKFreq>
 8006362:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a76      	ldr	r2, [pc, #472]	; (8006544 <HAL_SAI_Init+0x2e4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <HAL_SAI_Init+0x118>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a75      	ldr	r2, [pc, #468]	; (8006548 <HAL_SAI_Init+0x2e8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d104      	bne.n	8006382 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006378:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800637c:	f7ff fa54 	bl	8005828 <HAL_RCCEx_GetPeriphCLKFreq>
 8006380:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	461a      	mov	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	025b      	lsls	r3, r3, #9
 8006394:	fbb2 f3f3 	udiv	r3, r2, r3
 8006398:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a6b      	ldr	r2, [pc, #428]	; (800654c <HAL_SAI_Init+0x2ec>)
 800639e:	fba2 2303 	umull	r2, r3, r2, r3
 80063a2:	08da      	lsrs	r2, r3, #3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80063a8:	68f9      	ldr	r1, [r7, #12]
 80063aa:	4b68      	ldr	r3, [pc, #416]	; (800654c <HAL_SAI_Init+0x2ec>)
 80063ac:	fba3 2301 	umull	r2, r3, r3, r1
 80063b0:	08da      	lsrs	r2, r3, #3
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	1aca      	subs	r2, r1, r3
 80063bc:	2a08      	cmp	r2, #8
 80063be:	d904      	bls.n	80063ca <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d104      	bne.n	80063dc <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	085a      	lsrs	r2, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <HAL_SAI_Init+0x18c>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d109      	bne.n	8006400 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_SAI_Init+0x198>
 80063f4:	2300      	movs	r3, #0
 80063f6:	e001      	b.n	80063fc <HAL_SAI_Init+0x19c>
 80063f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	e008      	b.n	8006412 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	2b01      	cmp	r3, #1
 8006406:	d102      	bne.n	800640e <HAL_SAI_Init+0x1ae>
 8006408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800640c:	e000      	b.n	8006410 <HAL_SAI_Init+0x1b0>
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6819      	ldr	r1, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b4c      	ldr	r3, [pc, #304]	; (8006550 <HAL_SAI_Init+0x2f0>)
 800641e:	400b      	ands	r3, r1
 8006420:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6819      	ldr	r1, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006436:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	431a      	orrs	r2, r3
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800644a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006456:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	051b      	lsls	r3, r3, #20
 800645e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6859      	ldr	r1, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4b38      	ldr	r3, [pc, #224]	; (8006554 <HAL_SAI_Init+0x2f4>)
 8006474:	400b      	ands	r3, r1
 8006476:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6859      	ldr	r1, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6899      	ldr	r1, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b2d      	ldr	r3, [pc, #180]	; (8006558 <HAL_SAI_Init+0x2f8>)
 80064a2:	400b      	ands	r3, r1
 80064a4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6899      	ldr	r1, [r3, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80064b6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80064bc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80064c2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c8:	3b01      	subs	r3, #1
 80064ca:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80064cc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68d9      	ldr	r1, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	f24f 0320 	movw	r3, #61472	; 0xf020
 80064e4:	400b      	ands	r3, r1
 80064e6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68d9      	ldr	r1, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fc:	041b      	lsls	r3, r3, #16
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006504:	3b01      	subs	r3, #1
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40015804 	.word	0x40015804
 8006538:	40015824 	.word	0x40015824
 800653c:	40015800 	.word	0x40015800
 8006540:	40015c00 	.word	0x40015c00
 8006544:	40015c04 	.word	0x40015c04
 8006548:	40015c24 	.word	0x40015c24
 800654c:	cccccccd 	.word	0xcccccccd
 8006550:	ff05c010 	.word	0xff05c010
 8006554:	ffff1ff0 	.word	0xffff1ff0
 8006558:	fff88000 	.word	0xfff88000

0800655c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006564:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <SAI_Disable+0x68>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a17      	ldr	r2, [pc, #92]	; (80065c8 <SAI_Disable+0x6c>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	0b1b      	lsrs	r3, r3, #12
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006586:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	1e5a      	subs	r2, r3, #1
 800658c:	60fa      	str	r2, [r7, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006598:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	72fb      	strb	r3, [r7, #11]
      break;
 80065a6:	e006      	b.n	80065b6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e8      	bne.n	8006588 <SAI_Disable+0x2c>

  return status;
 80065b6:	7afb      	ldrb	r3, [r7, #11]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	20000000 	.word	0x20000000
 80065c8:	95cbec1b 	.word	0x95cbec1b

080065cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e022      	b.n	8006624 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d105      	bne.n	80065f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7fb fcdd 	bl	8001fb0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2203      	movs	r2, #3
 80065fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f814 	bl	800662c <HAL_SD_InitCard>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e00a      	b.n	8006624 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800662c:	b5b0      	push	{r4, r5, r7, lr}
 800662e:	b08e      	sub	sp, #56	; 0x38
 8006630:	af04      	add	r7, sp, #16
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006634:	2300      	movs	r3, #0
 8006636:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800663c:	2300      	movs	r3, #0
 800663e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006644:	2300      	movs	r3, #0
 8006646:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006648:	2376      	movs	r3, #118	; 0x76
 800664a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681d      	ldr	r5, [r3, #0]
 8006650:	466c      	mov	r4, sp
 8006652:	f107 0314 	add.w	r3, r7, #20
 8006656:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800665a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800665e:	f107 0308 	add.w	r3, r7, #8
 8006662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006664:	4628      	mov	r0, r5
 8006666:	f003 f89f 	bl	80097a8 <SDMMC_Init>
 800666a:	4603      	mov	r3, r0
 800666c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e059      	b.n	8006730 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800668a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f003 f8d3 	bl	800983c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066a4:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80066a6:	2002      	movs	r0, #2
 80066a8:	f7fc f996 	bl	80029d8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 ff01 	bl	80074b4 <SD_PowerON>
 80066b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e02e      	b.n	8006730 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fe20 	bl	8007318 <SD_InitCard>
 80066d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e01b      	b.n	8006730 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006700:	4618      	mov	r0, r3
 8006702:	f003 f92d 	bl	8009960 <SDMMC_CmdBlockLength>
 8006706:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00f      	beq.n	800672e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a09      	ldr	r2, [pc, #36]	; (8006738 <HAL_SD_InitCard+0x10c>)
 8006714:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3728      	adds	r7, #40	; 0x28
 8006734:	46bd      	mov	sp, r7
 8006736:	bdb0      	pop	{r4, r5, r7, pc}
 8006738:	004005ff 	.word	0x004005ff

0800673c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b092      	sub	sp, #72	; 0x48
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800674a:	f7fc f939 	bl	80029c0 <HAL_GetTick>
 800674e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d107      	bne.n	800676e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e1bd      	b.n	8006aea <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b01      	cmp	r3, #1
 8006778:	f040 81b0 	bne.w	8006adc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	441a      	add	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678c:	429a      	cmp	r2, r3
 800678e:	d907      	bls.n	80067a0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e1a4      	b.n	8006aea <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2203      	movs	r2, #3
 80067a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2200      	movs	r2, #0
 80067ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d002      	beq.n	80067be <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	025b      	lsls	r3, r3, #9
 80067bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067be:	f04f 33ff 	mov.w	r3, #4294967295
 80067c2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	025b      	lsls	r3, r3, #9
 80067c8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80067ca:	2390      	movs	r3, #144	; 0x90
 80067cc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80067ce:	2302      	movs	r3, #2
 80067d0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80067d6:	2301      	movs	r3, #1
 80067d8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f107 0214 	add.w	r2, r7, #20
 80067e2:	4611      	mov	r1, r2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f003 f88f 	bl	8009908 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d90a      	bls.n	8006806 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2202      	movs	r2, #2
 80067f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067fc:	4618      	mov	r0, r3
 80067fe:	f003 f8f3 	bl	80099e8 <SDMMC_CmdReadMultiBlock>
 8006802:	6478      	str	r0, [r7, #68]	; 0x44
 8006804:	e009      	b.n	800681a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006812:	4618      	mov	r0, r3
 8006814:	f003 f8c6 	bl	80099a4 <SDMMC_CmdReadSingleBlock>
 8006818:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800681a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800681c:	2b00      	cmp	r3, #0
 800681e:	d012      	beq.n	8006846 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a7a      	ldr	r2, [pc, #488]	; (8006a10 <HAL_SD_ReadBlocks+0x2d4>)
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800682c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800682e:	431a      	orrs	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e151      	b.n	8006aea <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800684a:	e061      	b.n	8006910 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d03c      	beq.n	80068d4 <HAL_SD_ReadBlocks+0x198>
 800685a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d039      	beq.n	80068d4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006860:	2300      	movs	r3, #0
 8006862:	643b      	str	r3, [r7, #64]	; 0x40
 8006864:	e033      	b.n	80068ce <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f002 ffc8 	bl	8009800 <SDMMC_ReadFIFO>
 8006870:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	b2da      	uxtb	r2, r3
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800687a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687c:	3301      	adds	r3, #1
 800687e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006882:	3b01      	subs	r3, #1
 8006884:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	0a1b      	lsrs	r3, r3, #8
 800688a:	b2da      	uxtb	r2, r3
 800688c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006892:	3301      	adds	r3, #1
 8006894:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006898:	3b01      	subs	r3, #1
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80068a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a8:	3301      	adds	r3, #1
 80068aa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80068ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ae:	3b01      	subs	r3, #1
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	0e1b      	lsrs	r3, r3, #24
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	3301      	adds	r3, #1
 80068c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	3b01      	subs	r3, #1
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80068c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ca:	3301      	adds	r3, #1
 80068cc:	643b      	str	r3, [r7, #64]	; 0x40
 80068ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d0:	2b07      	cmp	r3, #7
 80068d2:	d9c8      	bls.n	8006866 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80068d4:	f7fc f874 	bl	80029c0 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d902      	bls.n	80068ea <HAL_SD_ReadBlocks+0x1ae>
 80068e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d112      	bne.n	8006910 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a48      	ldr	r2, [pc, #288]	; (8006a10 <HAL_SD_ReadBlocks+0x2d4>)
 80068f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e0ec      	b.n	8006aea <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006916:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800691a:	2b00      	cmp	r3, #0
 800691c:	d096      	beq.n	800684c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006928:	2b00      	cmp	r3, #0
 800692a:	d022      	beq.n	8006972 <HAL_SD_ReadBlocks+0x236>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d91f      	bls.n	8006972 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006936:	2b03      	cmp	r3, #3
 8006938:	d01b      	beq.n	8006972 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f003 f8b8 	bl	8009ab4 <SDMMC_CmdStopTransfer>
 8006944:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006948:	2b00      	cmp	r3, #0
 800694a:	d012      	beq.n	8006972 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a2f      	ldr	r2, [pc, #188]	; (8006a10 <HAL_SD_ReadBlocks+0x2d4>)
 8006952:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695a:	431a      	orrs	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e0bb      	b.n	8006aea <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006978:	f003 0308 	and.w	r3, r3, #8
 800697c:	2b00      	cmp	r3, #0
 800697e:	d012      	beq.n	80069a6 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a22      	ldr	r2, [pc, #136]	; (8006a10 <HAL_SD_ReadBlocks+0x2d4>)
 8006986:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	f043 0208 	orr.w	r2, r3, #8
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e0a1      	b.n	8006aea <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d012      	beq.n	80069da <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a15      	ldr	r2, [pc, #84]	; (8006a10 <HAL_SD_ReadBlocks+0x2d4>)
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	f043 0202 	orr.w	r2, r3, #2
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e087      	b.n	8006aea <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d064      	beq.n	8006ab2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a08      	ldr	r2, [pc, #32]	; (8006a10 <HAL_SD_ReadBlocks+0x2d4>)
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	f043 0220 	orr.w	r2, r3, #32
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e06d      	b.n	8006aea <HAL_SD_ReadBlocks+0x3ae>
 8006a0e:	bf00      	nop
 8006a10:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f002 fef1 	bl	8009800 <SDMMC_ReadFIFO>
 8006a1e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a30:	3b01      	subs	r3, #1
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	0a1b      	lsrs	r3, r3, #8
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a40:	3301      	adds	r3, #1
 8006a42:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a46:	3b01      	subs	r3, #1
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	0c1b      	lsrs	r3, r3, #16
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a52:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a56:	3301      	adds	r3, #1
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	0e1b      	lsrs	r3, r3, #24
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a68:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a72:	3b01      	subs	r3, #1
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006a76:	f7fb ffa3 	bl	80029c0 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d902      	bls.n	8006a8c <HAL_SD_ReadBlocks+0x350>
 8006a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d112      	bne.n	8006ab2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <HAL_SD_ReadBlocks+0x3b8>)
 8006a92:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e01b      	b.n	8006aea <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_SD_ReadBlocks+0x38a>
 8006ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1a6      	bne.n	8006a14 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e006      	b.n	8006aea <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
  }
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3748      	adds	r7, #72	; 0x48
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	004005ff 	.word	0x004005ff

08006af8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b092      	sub	sp, #72	; 0x48
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b06:	f7fb ff5b 	bl	80029c0 <HAL_GetTick>
 8006b0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d107      	bne.n	8006b2a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e165      	b.n	8006df6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	f040 8158 	bne.w	8006de8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	441a      	add	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d907      	bls.n	8006b5c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b50:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e14c      	b.n	8006df6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2203      	movs	r2, #3
 8006b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d002      	beq.n	8006b7a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	025b      	lsls	r3, r3, #9
 8006b78:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	025b      	lsls	r3, r3, #9
 8006b84:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b86:	2390      	movs	r3, #144	; 0x90
 8006b88:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b92:	2301      	movs	r3, #1
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f107 0218 	add.w	r2, r7, #24
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f002 feb1 	bl	8009908 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d90a      	bls.n	8006bc2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f002 ff59 	bl	8009a70 <SDMMC_CmdWriteMultiBlock>
 8006bbe:	6478      	str	r0, [r7, #68]	; 0x44
 8006bc0:	e009      	b.n	8006bd6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2210      	movs	r2, #16
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f002 ff2c 	bl	8009a2c <SDMMC_CmdWriteSingleBlock>
 8006bd4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d012      	beq.n	8006c02 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a87      	ldr	r2, [pc, #540]	; (8006e00 <HAL_SD_WriteBlocks+0x308>)
 8006be2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bea:	431a      	orrs	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e0f9      	b.n	8006df6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006c06:	e065      	b.n	8006cd4 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d040      	beq.n	8006c98 <HAL_SD_WriteBlocks+0x1a0>
 8006c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d03d      	beq.n	8006c98 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c20:	e037      	b.n	8006c92 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c30:	3b01      	subs	r3, #1
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	021a      	lsls	r2, r3, #8
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c42:	3301      	adds	r3, #1
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	041a      	lsls	r2, r3, #16
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c60:	3b01      	subs	r3, #1
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	061a      	lsls	r2, r3, #24
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c72:	3301      	adds	r3, #1
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f107 0214 	add.w	r2, r7, #20
 8006c84:	4611      	mov	r1, r2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f002 fdc7 	bl	800981a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c8e:	3301      	adds	r3, #1
 8006c90:	643b      	str	r3, [r7, #64]	; 0x40
 8006c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c94:	2b07      	cmp	r3, #7
 8006c96:	d9c4      	bls.n	8006c22 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006c98:	f7fb fe92 	bl	80029c0 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d902      	bls.n	8006cae <HAL_SD_WriteBlocks+0x1b6>
 8006ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d112      	bne.n	8006cd4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a53      	ldr	r2, [pc, #332]	; (8006e00 <HAL_SD_WriteBlocks+0x308>)
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e090      	b.n	8006df6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cda:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d092      	beq.n	8006c08 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d022      	beq.n	8006d36 <HAL_SD_WriteBlocks+0x23e>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d91f      	bls.n	8006d36 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d01b      	beq.n	8006d36 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f002 fed6 	bl	8009ab4 <SDMMC_CmdStopTransfer>
 8006d08:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d012      	beq.n	8006d36 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a3a      	ldr	r2, [pc, #232]	; (8006e00 <HAL_SD_WriteBlocks+0x308>)
 8006d16:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e05f      	b.n	8006df6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d012      	beq.n	8006d6a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a2d      	ldr	r2, [pc, #180]	; (8006e00 <HAL_SD_WriteBlocks+0x308>)
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	f043 0208 	orr.w	r2, r3, #8
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e045      	b.n	8006df6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d012      	beq.n	8006d9e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a20      	ldr	r2, [pc, #128]	; (8006e00 <HAL_SD_WriteBlocks+0x308>)
 8006d7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	f043 0202 	orr.w	r2, r3, #2
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e02b      	b.n	8006df6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d012      	beq.n	8006dd2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a13      	ldr	r2, [pc, #76]	; (8006e00 <HAL_SD_WriteBlocks+0x308>)
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	f043 0210 	orr.w	r2, r3, #16
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e011      	b.n	8006df6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f240 523a 	movw	r2, #1338	; 0x53a
 8006dda:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	e006      	b.n	8006df6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
  }
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3748      	adds	r7, #72	; 0x48
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	004005ff 	.word	0x004005ff

08006e04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e12:	0f9b      	lsrs	r3, r3, #30
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e1e:	0e9b      	lsrs	r3, r3, #26
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e30:	0e1b      	lsrs	r3, r3, #24
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e4e:	0a1b      	lsrs	r3, r3, #8
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e64:	0d1b      	lsrs	r3, r3, #20
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e70:	0c1b      	lsrs	r3, r3, #16
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e82:	0bdb      	lsrs	r3, r3, #15
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e94:	0b9b      	lsrs	r3, r3, #14
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea6:	0b5b      	lsrs	r3, r3, #13
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb8:	0b1b      	lsrs	r3, r3, #12
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d163      	bne.n	8006f9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ed8:	009a      	lsls	r2, r3, #2
 8006eda:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ede:	4013      	ands	r3, r2
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006ee4:	0f92      	lsrs	r2, r2, #30
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef0:	0edb      	lsrs	r3, r3, #27
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f02:	0e1b      	lsrs	r3, r3, #24
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f14:	0d5b      	lsrs	r3, r3, #21
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f26:	0c9b      	lsrs	r3, r3, #18
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f38:	0bdb      	lsrs	r3, r3, #15
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	7e1b      	ldrb	r3, [r3, #24]
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006f66:	fb03 f202 	mul.w	r2, r3, r2
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	7a1b      	ldrb	r3, [r3, #8]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	2201      	movs	r2, #1
 8006f7a:	409a      	lsls	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006f88:	0a52      	lsrs	r2, r2, #9
 8006f8a:	fb03 f202 	mul.w	r2, r3, r2
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f98:	661a      	str	r2, [r3, #96]	; 0x60
 8006f9a:	e031      	b.n	8007000 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d11d      	bne.n	8006fe0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fa8:	041b      	lsls	r3, r3, #16
 8006faa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb2:	0c1b      	lsrs	r3, r3, #16
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	029a      	lsls	r2, r3, #10
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fd4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	661a      	str	r2, [r3, #96]	; 0x60
 8006fde:	e00f      	b.n	8007000 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a58      	ldr	r2, [pc, #352]	; (8007148 <HAL_SD_GetCardCSD+0x344>)
 8006fe6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e09d      	b.n	800713c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007004:	0b9b      	lsrs	r3, r3, #14
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	b2da      	uxtb	r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007016:	09db      	lsrs	r3, r3, #7
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800701e:	b2da      	uxtb	r2, r3
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007028:	b2db      	uxtb	r3, r3
 800702a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702e:	b2da      	uxtb	r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007038:	0fdb      	lsrs	r3, r3, #31
 800703a:	b2da      	uxtb	r2, r3
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007044:	0f5b      	lsrs	r3, r3, #29
 8007046:	b2db      	uxtb	r3, r3
 8007048:	f003 0303 	and.w	r3, r3, #3
 800704c:	b2da      	uxtb	r2, r3
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007056:	0e9b      	lsrs	r3, r3, #26
 8007058:	b2db      	uxtb	r3, r3
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	b2da      	uxtb	r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007068:	0d9b      	lsrs	r3, r3, #22
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	b2da      	uxtb	r2, r3
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707a:	0d5b      	lsrs	r3, r3, #21
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	b2da      	uxtb	r2, r3
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	0c1b      	lsrs	r3, r3, #16
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070aa:	0bdb      	lsrs	r3, r3, #15
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070be:	0b9b      	lsrs	r3, r3, #14
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	0b5b      	lsrs	r3, r3, #13
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	0b1b      	lsrs	r3, r3, #12
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fa:	0a9b      	lsrs	r3, r3, #10
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	b2da      	uxtb	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710e:	0a1b      	lsrs	r3, r3, #8
 8007110:	b2db      	uxtb	r3, r3
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	b2da      	uxtb	r2, r3
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007122:	085b      	lsrs	r3, r3, #1
 8007124:	b2db      	uxtb	r3, r3
 8007126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800712a:	b2da      	uxtb	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	004005ff 	.word	0x004005ff

0800714c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80071a4:	b5b0      	push	{r4, r5, r7, lr}
 80071a6:	b08e      	sub	sp, #56	; 0x38
 80071a8:	af04      	add	r7, sp, #16
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2203      	movs	r2, #3
 80071b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d02e      	beq.n	8007222 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ca:	d106      	bne.n	80071da <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	639a      	str	r2, [r3, #56]	; 0x38
 80071d8:	e029      	b.n	800722e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071e0:	d10a      	bne.n	80071f8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa1c 	bl	8007620 <SD_WideBus_Enable>
 80071e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	431a      	orrs	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	639a      	str	r2, [r3, #56]	; 0x38
 80071f6:	e01a      	b.n	800722e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10a      	bne.n	8007214 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa59 	bl	80076b6 <SD_WideBus_Disable>
 8007204:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	431a      	orrs	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	639a      	str	r2, [r3, #56]	; 0x38
 8007212:	e00c      	b.n	800722e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	639a      	str	r2, [r3, #56]	; 0x38
 8007220:	e005      	b.n	800722e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a26      	ldr	r2, [pc, #152]	; (80072d4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800723c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800724c:	e01f      	b.n	800728e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681d      	ldr	r5, [r3, #0]
 8007274:	466c      	mov	r4, sp
 8007276:	f107 0314 	add.w	r3, r7, #20
 800727a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800727e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007282:	f107 0308 	add.w	r3, r7, #8
 8007286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007288:	4628      	mov	r0, r5
 800728a:	f002 fa8d 	bl	80097a8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007296:	4618      	mov	r0, r3
 8007298:	f002 fb62 	bl	8009960 <SDMMC_CmdBlockLength>
 800729c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00c      	beq.n	80072be <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a0a      	ldr	r2, [pc, #40]	; (80072d4 <HAL_SD_ConfigWideBusOperation+0x130>)
 80072aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80072c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3728      	adds	r7, #40	; 0x28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bdb0      	pop	{r4, r5, r7, pc}
 80072d2:	bf00      	nop
 80072d4:	004005ff 	.word	0x004005ff

080072d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80072e4:	f107 030c 	add.w	r3, r7, #12
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f970 	bl	80075d0 <SD_SendStatus>
 80072f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	431a      	orrs	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	0a5b      	lsrs	r3, r3, #9
 8007308:	f003 030f 	and.w	r3, r3, #15
 800730c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800730e:	693b      	ldr	r3, [r7, #16]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007318:	b5b0      	push	{r4, r5, r7, lr}
 800731a:	b094      	sub	sp, #80	; 0x50
 800731c:	af04      	add	r7, sp, #16
 800731e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007320:	2301      	movs	r3, #1
 8007322:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f002 fa95 	bl	8009858 <SDMMC_GetPowerState>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d102      	bne.n	800733a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007334:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007338:	e0b8      	b.n	80074ac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733e:	2b03      	cmp	r3, #3
 8007340:	d02f      	beq.n	80073a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f002 fcbf 	bl	8009cca <SDMMC_CmdSendCID>
 800734c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800734e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <SD_InitCard+0x40>
    {
      return errorstate;
 8007354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007356:	e0a9      	b.n	80074ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2100      	movs	r1, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f002 fabf 	bl	80098e2 <SDMMC_GetResponse>
 8007364:	4602      	mov	r2, r0
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2104      	movs	r1, #4
 8007370:	4618      	mov	r0, r3
 8007372:	f002 fab6 	bl	80098e2 <SDMMC_GetResponse>
 8007376:	4602      	mov	r2, r0
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2108      	movs	r1, #8
 8007382:	4618      	mov	r0, r3
 8007384:	f002 faad 	bl	80098e2 <SDMMC_GetResponse>
 8007388:	4602      	mov	r2, r0
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	210c      	movs	r1, #12
 8007394:	4618      	mov	r0, r3
 8007396:	f002 faa4 	bl	80098e2 <SDMMC_GetResponse>
 800739a:	4602      	mov	r2, r0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d00d      	beq.n	80073c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f107 020e 	add.w	r2, r7, #14
 80073b2:	4611      	mov	r1, r2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f002 fcc5 	bl	8009d44 <SDMMC_CmdSetRelAdd>
 80073ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <SD_InitCard+0xae>
    {
      return errorstate;
 80073c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c4:	e072      	b.n	80074ac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d036      	beq.n	800743c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80073ce:	89fb      	ldrh	r3, [r7, #14]
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073de:	041b      	lsls	r3, r3, #16
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f002 fc8f 	bl	8009d06 <SDMMC_CmdSendCSD>
 80073e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80073f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f2:	e05b      	b.n	80074ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2100      	movs	r1, #0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f002 fa71 	bl	80098e2 <SDMMC_GetResponse>
 8007400:	4602      	mov	r2, r0
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2104      	movs	r1, #4
 800740c:	4618      	mov	r0, r3
 800740e:	f002 fa68 	bl	80098e2 <SDMMC_GetResponse>
 8007412:	4602      	mov	r2, r0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2108      	movs	r1, #8
 800741e:	4618      	mov	r0, r3
 8007420:	f002 fa5f 	bl	80098e2 <SDMMC_GetResponse>
 8007424:	4602      	mov	r2, r0
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	210c      	movs	r1, #12
 8007430:	4618      	mov	r0, r3
 8007432:	f002 fa56 	bl	80098e2 <SDMMC_GetResponse>
 8007436:	4602      	mov	r2, r0
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2104      	movs	r1, #4
 8007442:	4618      	mov	r0, r3
 8007444:	f002 fa4d 	bl	80098e2 <SDMMC_GetResponse>
 8007448:	4603      	mov	r3, r0
 800744a:	0d1a      	lsrs	r2, r3, #20
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007450:	f107 0310 	add.w	r3, r7, #16
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff fcd4 	bl	8006e04 <HAL_SD_GetCardCSD>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007462:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007466:	e021      	b.n	80074ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6819      	ldr	r1, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	2200      	movs	r2, #0
 8007474:	461c      	mov	r4, r3
 8007476:	4615      	mov	r5, r2
 8007478:	4622      	mov	r2, r4
 800747a:	462b      	mov	r3, r5
 800747c:	4608      	mov	r0, r1
 800747e:	f002 fb3b 	bl	8009af8 <SDMMC_CmdSelDesel>
 8007482:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <SD_InitCard+0x176>
  {
    return errorstate;
 800748a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748c:	e00e      	b.n	80074ac <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681d      	ldr	r5, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	466c      	mov	r4, sp
 8007496:	f103 0210 	add.w	r2, r3, #16
 800749a:	ca07      	ldmia	r2, {r0, r1, r2}
 800749c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074a0:	3304      	adds	r3, #4
 80074a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074a4:	4628      	mov	r0, r5
 80074a6:	f002 f97f 	bl	80097a8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3740      	adds	r7, #64	; 0x40
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bdb0      	pop	{r4, r5, r7, pc}

080074b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	2300      	movs	r3, #0
 80074c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f002 fb36 	bl	8009b3e <SDMMC_CmdGoIdleState>
 80074d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <SD_PowerON+0x2a>
  {
    return errorstate;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	e072      	b.n	80075c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f002 fb49 	bl	8009b7a <SDMMC_CmdOperCond>
 80074e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00d      	beq.n	800750c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f002 fb1f 	bl	8009b3e <SDMMC_CmdGoIdleState>
 8007500:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d004      	beq.n	8007512 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	e05b      	b.n	80075c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007516:	2b01      	cmp	r3, #1
 8007518:	d137      	bne.n	800758a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2100      	movs	r1, #0
 8007520:	4618      	mov	r0, r3
 8007522:	f002 fb49 	bl	8009bb8 <SDMMC_CmdAppCommand>
 8007526:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d02d      	beq.n	800758a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800752e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007532:	e047      	b.n	80075c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2100      	movs	r1, #0
 800753a:	4618      	mov	r0, r3
 800753c:	f002 fb3c 	bl	8009bb8 <SDMMC_CmdAppCommand>
 8007540:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <SD_PowerON+0x98>
    {
      return errorstate;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	e03b      	b.n	80075c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	491e      	ldr	r1, [pc, #120]	; (80075cc <SD_PowerON+0x118>)
 8007552:	4618      	mov	r0, r3
 8007554:	f002 fb52 	bl	8009bfc <SDMMC_CmdAppOperCommand>
 8007558:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007560:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007564:	e02e      	b.n	80075c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2100      	movs	r1, #0
 800756c:	4618      	mov	r0, r3
 800756e:	f002 f9b8 	bl	80098e2 <SDMMC_GetResponse>
 8007572:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	0fdb      	lsrs	r3, r3, #31
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <SD_PowerON+0xcc>
 800757c:	2301      	movs	r3, #1
 800757e:	e000      	b.n	8007582 <SD_PowerON+0xce>
 8007580:	2300      	movs	r3, #0
 8007582:	613b      	str	r3, [r7, #16]

    count++;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	3301      	adds	r3, #1
 8007588:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007590:	4293      	cmp	r3, r2
 8007592:	d802      	bhi.n	800759a <SD_PowerON+0xe6>
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0cc      	beq.n	8007534 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d902      	bls.n	80075aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80075a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075a8:	e00c      	b.n	80075c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	645a      	str	r2, [r3, #68]	; 0x44
 80075ba:	e002      	b.n	80075c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	c1100000 	.word	0xc1100000

080075d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d102      	bne.n	80075e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80075e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075e4:	e018      	b.n	8007618 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	4619      	mov	r1, r3
 80075f2:	4610      	mov	r0, r2
 80075f4:	f002 fbc7 	bl	8009d86 <SDMMC_CmdSendStatus>
 80075f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	e009      	b.n	8007618 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2100      	movs	r1, #0
 800760a:	4618      	mov	r0, r3
 800760c:	f002 f969 	bl	80098e2 <SDMMC_GetResponse>
 8007610:	4602      	mov	r2, r0
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f002 f953 	bl	80098e2 <SDMMC_GetResponse>
 800763c:	4603      	mov	r3, r0
 800763e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007646:	d102      	bne.n	800764e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800764c:	e02f      	b.n	80076ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800764e:	f107 030c 	add.w	r3, r7, #12
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f879 	bl	800774c <SD_FindSCR>
 800765a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	e023      	b.n	80076ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01c      	beq.n	80076aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007678:	041b      	lsls	r3, r3, #16
 800767a:	4619      	mov	r1, r3
 800767c:	4610      	mov	r0, r2
 800767e:	f002 fa9b 	bl	8009bb8 <SDMMC_CmdAppCommand>
 8007682:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	e00f      	b.n	80076ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2102      	movs	r1, #2
 8007694:	4618      	mov	r0, r3
 8007696:	f002 fad5 	bl	8009c44 <SDMMC_CmdBusWidth>
 800769a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	e003      	b.n	80076ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80076a6:	2300      	movs	r3, #0
 80076a8:	e001      	b.n	80076ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80076aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b086      	sub	sp, #24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2100      	movs	r1, #0
 80076cc:	4618      	mov	r0, r3
 80076ce:	f002 f908 	bl	80098e2 <SDMMC_GetResponse>
 80076d2:	4603      	mov	r3, r0
 80076d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076dc:	d102      	bne.n	80076e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80076de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076e2:	e02f      	b.n	8007744 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80076e4:	f107 030c 	add.w	r3, r7, #12
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f82e 	bl	800774c <SD_FindSCR>
 80076f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	e023      	b.n	8007744 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d01c      	beq.n	8007740 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770e:	041b      	lsls	r3, r3, #16
 8007710:	4619      	mov	r1, r3
 8007712:	4610      	mov	r0, r2
 8007714:	f002 fa50 	bl	8009bb8 <SDMMC_CmdAppCommand>
 8007718:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	e00f      	b.n	8007744 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f002 fa8a 	bl	8009c44 <SDMMC_CmdBusWidth>
 8007730:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	e003      	b.n	8007744 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800773c:	2300      	movs	r3, #0
 800773e:	e001      	b.n	8007744 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007740:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800774c:	b590      	push	{r4, r7, lr}
 800774e:	b08f      	sub	sp, #60	; 0x3c
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007756:	f7fb f933 	bl	80029c0 <HAL_GetTick>
 800775a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007760:	2300      	movs	r3, #0
 8007762:	60bb      	str	r3, [r7, #8]
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2108      	movs	r1, #8
 8007772:	4618      	mov	r0, r3
 8007774:	f002 f8f4 	bl	8009960 <SDMMC_CmdBlockLength>
 8007778:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	e0b2      	b.n	80078ea <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778c:	041b      	lsls	r3, r3, #16
 800778e:	4619      	mov	r1, r3
 8007790:	4610      	mov	r0, r2
 8007792:	f002 fa11 	bl	8009bb8 <SDMMC_CmdAppCommand>
 8007796:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	e0a3      	b.n	80078ea <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80077a2:	f04f 33ff 	mov.w	r3, #4294967295
 80077a6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80077a8:	2308      	movs	r3, #8
 80077aa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80077ac:	2330      	movs	r3, #48	; 0x30
 80077ae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80077b0:	2302      	movs	r3, #2
 80077b2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80077b8:	2301      	movs	r3, #1
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f107 0210 	add.w	r2, r7, #16
 80077c4:	4611      	mov	r1, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f002 f89e 	bl	8009908 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f002 fa59 	bl	8009c88 <SDMMC_CmdSendSCR>
 80077d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d02a      	beq.n	8007834 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	e083      	b.n	80078ea <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00f      	beq.n	8007810 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6819      	ldr	r1, [r3, #0]
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	f107 0208 	add.w	r2, r7, #8
 80077fc:	18d4      	adds	r4, r2, r3
 80077fe:	4608      	mov	r0, r1
 8007800:	f001 fffe 	bl	8009800 <SDMMC_ReadFIFO>
 8007804:	4603      	mov	r3, r0
 8007806:	6023      	str	r3, [r4, #0]
      index++;
 8007808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780a:	3301      	adds	r3, #1
 800780c:	637b      	str	r3, [r7, #52]	; 0x34
 800780e:	e006      	b.n	800781e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d012      	beq.n	8007844 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800781e:	f7fb f8cf 	bl	80029c0 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d102      	bne.n	8007834 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800782e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007832:	e05a      	b.n	80078ea <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0cf      	beq.n	80077e2 <SD_FindSCR+0x96>
 8007842:	e000      	b.n	8007846 <SD_FindSCR+0xfa>
      break;
 8007844:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2208      	movs	r2, #8
 800785a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800785c:	2308      	movs	r3, #8
 800785e:	e044      	b.n	80078ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2202      	movs	r2, #2
 8007874:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007876:	2302      	movs	r3, #2
 8007878:	e037      	b.n	80078ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b00      	cmp	r3, #0
 8007886:	d005      	beq.n	8007894 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2220      	movs	r2, #32
 800788e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007890:	2320      	movs	r3, #32
 8007892:	e02a      	b.n	80078ea <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f240 523a 	movw	r2, #1338	; 0x53a
 800789c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	061a      	lsls	r2, r3, #24
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	0a1b      	lsrs	r3, r3, #8
 80078b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80078b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	0e1b      	lsrs	r3, r3, #24
 80078ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	601a      	str	r2, [r3, #0]
    scr++;
 80078c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c2:	3304      	adds	r3, #4
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	061a      	lsls	r2, r3, #24
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	0a1b      	lsrs	r3, r3, #8
 80078d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80078dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	0e1b      	lsrs	r3, r3, #24
 80078e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	373c      	adds	r7, #60	; 0x3c
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd90      	pop	{r4, r7, pc}

080078f2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e025      	b.n	8007952 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fa fede 	bl	80026dc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f001 fe72 	bl	800961c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	461a      	mov	r2, r3
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	f001 fec6 	bl	80096d4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e04c      	b.n	8007a08 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7fa fb76 	bl	8002074 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0203 	bic.w	r2, r2, #3
 800799e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4b19      	ldr	r3, [pc, #100]	; (8007a10 <HAL_SPDIFRX_Init+0xb4>)
 80079ac:	4013      	ands	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80079b8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80079be:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80079c4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80079ca:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80079d0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80079d6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80079dc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80079e2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80079e8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	fff88407 	.word	0xfff88407

08007a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e09d      	b.n	8007b62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d108      	bne.n	8007a40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a36:	d009      	beq.n	8007a4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	61da      	str	r2, [r3, #28]
 8007a3e:	e005      	b.n	8007a4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d106      	bne.n	8007a6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fa fb68 	bl	800213c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a8c:	d902      	bls.n	8007a94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	e002      	b.n	8007a9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007aa2:	d007      	beq.n	8007ab4 <HAL_SPI_Init+0xa0>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007aac:	d002      	beq.n	8007ab4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0302 	and.w	r3, r3, #2
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aec:	431a      	orrs	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af6:	ea42 0103 	orr.w	r1, r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	0c1b      	lsrs	r3, r3, #16
 8007b10:	f003 0204 	and.w	r2, r3, #4
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	f003 0310 	and.w	r3, r3, #16
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007b30:	ea42 0103 	orr.w	r1, r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e049      	b.n	8007c10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d106      	bne.n	8007b96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7fa fb35 	bl	8002200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f000 fc29 	bl	8008400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d001      	beq.n	8007c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e054      	b.n	8007cda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a26      	ldr	r2, [pc, #152]	; (8007ce8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d022      	beq.n	8007c98 <HAL_TIM_Base_Start_IT+0x80>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5a:	d01d      	beq.n	8007c98 <HAL_TIM_Base_Start_IT+0x80>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a22      	ldr	r2, [pc, #136]	; (8007cec <HAL_TIM_Base_Start_IT+0xd4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d018      	beq.n	8007c98 <HAL_TIM_Base_Start_IT+0x80>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a21      	ldr	r2, [pc, #132]	; (8007cf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d013      	beq.n	8007c98 <HAL_TIM_Base_Start_IT+0x80>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1f      	ldr	r2, [pc, #124]	; (8007cf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00e      	beq.n	8007c98 <HAL_TIM_Base_Start_IT+0x80>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1e      	ldr	r2, [pc, #120]	; (8007cf8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d009      	beq.n	8007c98 <HAL_TIM_Base_Start_IT+0x80>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1c      	ldr	r2, [pc, #112]	; (8007cfc <HAL_TIM_Base_Start_IT+0xe4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <HAL_TIM_Base_Start_IT+0x80>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1b      	ldr	r2, [pc, #108]	; (8007d00 <HAL_TIM_Base_Start_IT+0xe8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d115      	bne.n	8007cc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	4b19      	ldr	r3, [pc, #100]	; (8007d04 <HAL_TIM_Base_Start_IT+0xec>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b06      	cmp	r3, #6
 8007ca8:	d015      	beq.n	8007cd6 <HAL_TIM_Base_Start_IT+0xbe>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb0:	d011      	beq.n	8007cd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0201 	orr.w	r2, r2, #1
 8007cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc2:	e008      	b.n	8007cd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0201 	orr.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	e000      	b.n	8007cd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40000400 	.word	0x40000400
 8007cf0:	40000800 	.word	0x40000800
 8007cf4:	40000c00 	.word	0x40000c00
 8007cf8:	40010400 	.word	0x40010400
 8007cfc:	40014000 	.word	0x40014000
 8007d00:	40001800 	.word	0x40001800
 8007d04:	00010007 	.word	0x00010007

08007d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e049      	b.n	8007dae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7fa fad4 	bl	80022dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f000 fb5a 	bl	8008400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d122      	bne.n	8007e12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d11b      	bne.n	8007e12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f06f 0202 	mvn.w	r2, #2
 8007de2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	f003 0303 	and.w	r3, r3, #3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fae3 	bl	80083c4 <HAL_TIM_IC_CaptureCallback>
 8007dfe:	e005      	b.n	8007e0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fad5 	bl	80083b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fae6 	bl	80083d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d122      	bne.n	8007e66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d11b      	bne.n	8007e66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f06f 0204 	mvn.w	r2, #4
 8007e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fab9 	bl	80083c4 <HAL_TIM_IC_CaptureCallback>
 8007e52:	e005      	b.n	8007e60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 faab 	bl	80083b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fabc 	bl	80083d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f003 0308 	and.w	r3, r3, #8
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d122      	bne.n	8007eba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0308 	and.w	r3, r3, #8
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	d11b      	bne.n	8007eba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f06f 0208 	mvn.w	r2, #8
 8007e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2204      	movs	r2, #4
 8007e90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fa8f 	bl	80083c4 <HAL_TIM_IC_CaptureCallback>
 8007ea6:	e005      	b.n	8007eb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fa81 	bl	80083b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa92 	bl	80083d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	f003 0310 	and.w	r3, r3, #16
 8007ec4:	2b10      	cmp	r3, #16
 8007ec6:	d122      	bne.n	8007f0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f003 0310 	and.w	r3, r3, #16
 8007ed2:	2b10      	cmp	r3, #16
 8007ed4:	d11b      	bne.n	8007f0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f06f 0210 	mvn.w	r2, #16
 8007ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2208      	movs	r2, #8
 8007ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fa65 	bl	80083c4 <HAL_TIM_IC_CaptureCallback>
 8007efa:	e005      	b.n	8007f08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fa57 	bl	80083b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa68 	bl	80083d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d10e      	bne.n	8007f3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d107      	bne.n	8007f3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f06f 0201 	mvn.w	r2, #1
 8007f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7f9 fcbb 	bl	80018b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f44:	2b80      	cmp	r3, #128	; 0x80
 8007f46:	d10e      	bne.n	8007f66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f52:	2b80      	cmp	r3, #128	; 0x80
 8007f54:	d107      	bne.n	8007f66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fefb 	bl	8008d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f74:	d10e      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f80:	2b80      	cmp	r3, #128	; 0x80
 8007f82:	d107      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 feee 	bl	8008d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9e:	2b40      	cmp	r3, #64	; 0x40
 8007fa0:	d10e      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fac:	2b40      	cmp	r3, #64	; 0x40
 8007fae:	d107      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa16 	bl	80083ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	f003 0320 	and.w	r3, r3, #32
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	d10e      	bne.n	8007fec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d107      	bne.n	8007fec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f06f 0220 	mvn.w	r2, #32
 8007fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 feae 	bl	8008d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800800e:	2302      	movs	r3, #2
 8008010:	e0ff      	b.n	8008212 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b14      	cmp	r3, #20
 800801e:	f200 80f0 	bhi.w	8008202 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008022:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	0800807d 	.word	0x0800807d
 800802c:	08008203 	.word	0x08008203
 8008030:	08008203 	.word	0x08008203
 8008034:	08008203 	.word	0x08008203
 8008038:	080080bd 	.word	0x080080bd
 800803c:	08008203 	.word	0x08008203
 8008040:	08008203 	.word	0x08008203
 8008044:	08008203 	.word	0x08008203
 8008048:	080080ff 	.word	0x080080ff
 800804c:	08008203 	.word	0x08008203
 8008050:	08008203 	.word	0x08008203
 8008054:	08008203 	.word	0x08008203
 8008058:	0800813f 	.word	0x0800813f
 800805c:	08008203 	.word	0x08008203
 8008060:	08008203 	.word	0x08008203
 8008064:	08008203 	.word	0x08008203
 8008068:	08008181 	.word	0x08008181
 800806c:	08008203 	.word	0x08008203
 8008070:	08008203 	.word	0x08008203
 8008074:	08008203 	.word	0x08008203
 8008078:	080081c1 	.word	0x080081c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68b9      	ldr	r1, [r7, #8]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fa5c 	bl	8008540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699a      	ldr	r2, [r3, #24]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f042 0208 	orr.w	r2, r2, #8
 8008096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0204 	bic.w	r2, r2, #4
 80080a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6999      	ldr	r1, [r3, #24]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	619a      	str	r2, [r3, #24]
      break;
 80080ba:	e0a5      	b.n	8008208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 faae 	bl	8008624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699a      	ldr	r2, [r3, #24]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6999      	ldr	r1, [r3, #24]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	021a      	lsls	r2, r3, #8
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	619a      	str	r2, [r3, #24]
      break;
 80080fc:	e084      	b.n	8008208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fb05 	bl	8008714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f042 0208 	orr.w	r2, r2, #8
 8008118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0204 	bic.w	r2, r2, #4
 8008128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69d9      	ldr	r1, [r3, #28]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	61da      	str	r2, [r3, #28]
      break;
 800813c:	e064      	b.n	8008208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fb5b 	bl	8008800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69da      	ldr	r2, [r3, #28]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69d9      	ldr	r1, [r3, #28]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	021a      	lsls	r2, r3, #8
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	61da      	str	r2, [r3, #28]
      break;
 800817e:	e043      	b.n	8008208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fb92 	bl	80088b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f042 0208 	orr.w	r2, r2, #8
 800819a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0204 	bic.w	r2, r2, #4
 80081aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	691a      	ldr	r2, [r3, #16]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081be:	e023      	b.n	8008208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68b9      	ldr	r1, [r7, #8]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fbc4 	bl	8008954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	021a      	lsls	r2, r3, #8
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008200:	e002      	b.n	8008208 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	75fb      	strb	r3, [r7, #23]
      break;
 8008206:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008210:	7dfb      	ldrb	r3, [r7, #23]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop

0800821c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_TIM_ConfigClockSource+0x1c>
 8008234:	2302      	movs	r3, #2
 8008236:	e0b4      	b.n	80083a2 <HAL_TIM_ConfigClockSource+0x186>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	4b56      	ldr	r3, [pc, #344]	; (80083ac <HAL_TIM_ConfigClockSource+0x190>)
 8008254:	4013      	ands	r3, r2
 8008256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800825e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008270:	d03e      	beq.n	80082f0 <HAL_TIM_ConfigClockSource+0xd4>
 8008272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008276:	f200 8087 	bhi.w	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 800827a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800827e:	f000 8086 	beq.w	800838e <HAL_TIM_ConfigClockSource+0x172>
 8008282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008286:	d87f      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 8008288:	2b70      	cmp	r3, #112	; 0x70
 800828a:	d01a      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0xa6>
 800828c:	2b70      	cmp	r3, #112	; 0x70
 800828e:	d87b      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 8008290:	2b60      	cmp	r3, #96	; 0x60
 8008292:	d050      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x11a>
 8008294:	2b60      	cmp	r3, #96	; 0x60
 8008296:	d877      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 8008298:	2b50      	cmp	r3, #80	; 0x50
 800829a:	d03c      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0xfa>
 800829c:	2b50      	cmp	r3, #80	; 0x50
 800829e:	d873      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 80082a0:	2b40      	cmp	r3, #64	; 0x40
 80082a2:	d058      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x13a>
 80082a4:	2b40      	cmp	r3, #64	; 0x40
 80082a6:	d86f      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 80082a8:	2b30      	cmp	r3, #48	; 0x30
 80082aa:	d064      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x15a>
 80082ac:	2b30      	cmp	r3, #48	; 0x30
 80082ae:	d86b      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 80082b0:	2b20      	cmp	r3, #32
 80082b2:	d060      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x15a>
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d867      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d05c      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x15a>
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d05a      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x15a>
 80082c0:	e062      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6899      	ldr	r1, [r3, #8]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f000 fc0d 	bl	8008af0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	609a      	str	r2, [r3, #8]
      break;
 80082ee:	e04f      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	6899      	ldr	r1, [r3, #8]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f000 fbf6 	bl	8008af0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008312:	609a      	str	r2, [r3, #8]
      break;
 8008314:	e03c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	6859      	ldr	r1, [r3, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	461a      	mov	r2, r3
 8008324:	f000 fb6a 	bl	80089fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2150      	movs	r1, #80	; 0x50
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fbc3 	bl	8008aba <TIM_ITRx_SetConfig>
      break;
 8008334:	e02c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	6859      	ldr	r1, [r3, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	461a      	mov	r2, r3
 8008344:	f000 fb89 	bl	8008a5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2160      	movs	r1, #96	; 0x60
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fbb3 	bl	8008aba <TIM_ITRx_SetConfig>
      break;
 8008354:	e01c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	6859      	ldr	r1, [r3, #4]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	461a      	mov	r2, r3
 8008364:	f000 fb4a 	bl	80089fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2140      	movs	r1, #64	; 0x40
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fba3 	bl	8008aba <TIM_ITRx_SetConfig>
      break;
 8008374:	e00c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f000 fb9a 	bl	8008aba <TIM_ITRx_SetConfig>
      break;
 8008386:	e003      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
      break;
 800838c:	e000      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800838e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	fffeff88 	.word	0xfffeff88

080083b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a40      	ldr	r2, [pc, #256]	; (8008514 <TIM_Base_SetConfig+0x114>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d013      	beq.n	8008440 <TIM_Base_SetConfig+0x40>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841e:	d00f      	beq.n	8008440 <TIM_Base_SetConfig+0x40>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a3d      	ldr	r2, [pc, #244]	; (8008518 <TIM_Base_SetConfig+0x118>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00b      	beq.n	8008440 <TIM_Base_SetConfig+0x40>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a3c      	ldr	r2, [pc, #240]	; (800851c <TIM_Base_SetConfig+0x11c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d007      	beq.n	8008440 <TIM_Base_SetConfig+0x40>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a3b      	ldr	r2, [pc, #236]	; (8008520 <TIM_Base_SetConfig+0x120>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_Base_SetConfig+0x40>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a3a      	ldr	r2, [pc, #232]	; (8008524 <TIM_Base_SetConfig+0x124>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d108      	bne.n	8008452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a2f      	ldr	r2, [pc, #188]	; (8008514 <TIM_Base_SetConfig+0x114>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d02b      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008460:	d027      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a2c      	ldr	r2, [pc, #176]	; (8008518 <TIM_Base_SetConfig+0x118>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d023      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a2b      	ldr	r2, [pc, #172]	; (800851c <TIM_Base_SetConfig+0x11c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01f      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a2a      	ldr	r2, [pc, #168]	; (8008520 <TIM_Base_SetConfig+0x120>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d01b      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a29      	ldr	r2, [pc, #164]	; (8008524 <TIM_Base_SetConfig+0x124>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d017      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a28      	ldr	r2, [pc, #160]	; (8008528 <TIM_Base_SetConfig+0x128>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d013      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a27      	ldr	r2, [pc, #156]	; (800852c <TIM_Base_SetConfig+0x12c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d00f      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a26      	ldr	r2, [pc, #152]	; (8008530 <TIM_Base_SetConfig+0x130>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d00b      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a25      	ldr	r2, [pc, #148]	; (8008534 <TIM_Base_SetConfig+0x134>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d007      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a24      	ldr	r2, [pc, #144]	; (8008538 <TIM_Base_SetConfig+0x138>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d003      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a23      	ldr	r2, [pc, #140]	; (800853c <TIM_Base_SetConfig+0x13c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d108      	bne.n	80084c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a0a      	ldr	r2, [pc, #40]	; (8008514 <TIM_Base_SetConfig+0x114>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d003      	beq.n	80084f8 <TIM_Base_SetConfig+0xf8>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a0c      	ldr	r2, [pc, #48]	; (8008524 <TIM_Base_SetConfig+0x124>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d103      	bne.n	8008500 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	691a      	ldr	r2, [r3, #16]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	615a      	str	r2, [r3, #20]
}
 8008506:	bf00      	nop
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	40010000 	.word	0x40010000
 8008518:	40000400 	.word	0x40000400
 800851c:	40000800 	.word	0x40000800
 8008520:	40000c00 	.word	0x40000c00
 8008524:	40010400 	.word	0x40010400
 8008528:	40014000 	.word	0x40014000
 800852c:	40014400 	.word	0x40014400
 8008530:	40014800 	.word	0x40014800
 8008534:	40001800 	.word	0x40001800
 8008538:	40001c00 	.word	0x40001c00
 800853c:	40002000 	.word	0x40002000

08008540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	f023 0201 	bic.w	r2, r3, #1
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	4b2b      	ldr	r3, [pc, #172]	; (8008618 <TIM_OC1_SetConfig+0xd8>)
 800856c:	4013      	ands	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0303 	bic.w	r3, r3, #3
 8008576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f023 0302 	bic.w	r3, r3, #2
 8008588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4313      	orrs	r3, r2
 8008592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a21      	ldr	r2, [pc, #132]	; (800861c <TIM_OC1_SetConfig+0xdc>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d003      	beq.n	80085a4 <TIM_OC1_SetConfig+0x64>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a20      	ldr	r2, [pc, #128]	; (8008620 <TIM_OC1_SetConfig+0xe0>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d10c      	bne.n	80085be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f023 0308 	bic.w	r3, r3, #8
 80085aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f023 0304 	bic.w	r3, r3, #4
 80085bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a16      	ldr	r2, [pc, #88]	; (800861c <TIM_OC1_SetConfig+0xdc>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d003      	beq.n	80085ce <TIM_OC1_SetConfig+0x8e>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a15      	ldr	r2, [pc, #84]	; (8008620 <TIM_OC1_SetConfig+0xe0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d111      	bne.n	80085f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	621a      	str	r2, [r3, #32]
}
 800860c:	bf00      	nop
 800860e:	371c      	adds	r7, #28
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	fffeff8f 	.word	0xfffeff8f
 800861c:	40010000 	.word	0x40010000
 8008620:	40010400 	.word	0x40010400

08008624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	f023 0210 	bic.w	r2, r3, #16
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4b2e      	ldr	r3, [pc, #184]	; (8008708 <TIM_OC2_SetConfig+0xe4>)
 8008650:	4013      	ands	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800865a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	021b      	lsls	r3, r3, #8
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	4313      	orrs	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f023 0320 	bic.w	r3, r3, #32
 800866e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	4313      	orrs	r3, r2
 800867a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a23      	ldr	r2, [pc, #140]	; (800870c <TIM_OC2_SetConfig+0xe8>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d003      	beq.n	800868c <TIM_OC2_SetConfig+0x68>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a22      	ldr	r2, [pc, #136]	; (8008710 <TIM_OC2_SetConfig+0xec>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d10d      	bne.n	80086a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	011b      	lsls	r3, r3, #4
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	4313      	orrs	r3, r2
 800869e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a18      	ldr	r2, [pc, #96]	; (800870c <TIM_OC2_SetConfig+0xe8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_OC2_SetConfig+0x94>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a17      	ldr	r2, [pc, #92]	; (8008710 <TIM_OC2_SetConfig+0xec>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d113      	bne.n	80086e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	4313      	orrs	r3, r2
 80086de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	621a      	str	r2, [r3, #32]
}
 80086fa:	bf00      	nop
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	feff8fff 	.word	0xfeff8fff
 800870c:	40010000 	.word	0x40010000
 8008710:	40010400 	.word	0x40010400

08008714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4b2d      	ldr	r3, [pc, #180]	; (80087f4 <TIM_OC3_SetConfig+0xe0>)
 8008740:	4013      	ands	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0303 	bic.w	r3, r3, #3
 800874a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800875c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	021b      	lsls	r3, r3, #8
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	4313      	orrs	r3, r2
 8008768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a22      	ldr	r2, [pc, #136]	; (80087f8 <TIM_OC3_SetConfig+0xe4>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d003      	beq.n	800877a <TIM_OC3_SetConfig+0x66>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a21      	ldr	r2, [pc, #132]	; (80087fc <TIM_OC3_SetConfig+0xe8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d10d      	bne.n	8008796 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	021b      	lsls	r3, r3, #8
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	4313      	orrs	r3, r2
 800878c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a17      	ldr	r2, [pc, #92]	; (80087f8 <TIM_OC3_SetConfig+0xe4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d003      	beq.n	80087a6 <TIM_OC3_SetConfig+0x92>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a16      	ldr	r2, [pc, #88]	; (80087fc <TIM_OC3_SetConfig+0xe8>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d113      	bne.n	80087ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	4313      	orrs	r3, r2
 80087c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	011b      	lsls	r3, r3, #4
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	621a      	str	r2, [r3, #32]
}
 80087e8:	bf00      	nop
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	fffeff8f 	.word	0xfffeff8f
 80087f8:	40010000 	.word	0x40010000
 80087fc:	40010400 	.word	0x40010400

08008800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4b1e      	ldr	r3, [pc, #120]	; (80088a4 <TIM_OC4_SetConfig+0xa4>)
 800882c:	4013      	ands	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800884a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	031b      	lsls	r3, r3, #12
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	4313      	orrs	r3, r2
 8008856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a13      	ldr	r2, [pc, #76]	; (80088a8 <TIM_OC4_SetConfig+0xa8>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d003      	beq.n	8008868 <TIM_OC4_SetConfig+0x68>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a12      	ldr	r2, [pc, #72]	; (80088ac <TIM_OC4_SetConfig+0xac>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d109      	bne.n	800887c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800886e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	019b      	lsls	r3, r3, #6
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	621a      	str	r2, [r3, #32]
}
 8008896:	bf00      	nop
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	feff8fff 	.word	0xfeff8fff
 80088a8:	40010000 	.word	0x40010000
 80088ac:	40010400 	.word	0x40010400

080088b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4b1b      	ldr	r3, [pc, #108]	; (8008948 <TIM_OC5_SetConfig+0x98>)
 80088dc:	4013      	ands	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80088f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a12      	ldr	r2, [pc, #72]	; (800894c <TIM_OC5_SetConfig+0x9c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d003      	beq.n	800890e <TIM_OC5_SetConfig+0x5e>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a11      	ldr	r2, [pc, #68]	; (8008950 <TIM_OC5_SetConfig+0xa0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d109      	bne.n	8008922 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	621a      	str	r2, [r3, #32]
}
 800893c:	bf00      	nop
 800893e:	371c      	adds	r7, #28
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	fffeff8f 	.word	0xfffeff8f
 800894c:	40010000 	.word	0x40010000
 8008950:	40010400 	.word	0x40010400

08008954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4b1c      	ldr	r3, [pc, #112]	; (80089f0 <TIM_OC6_SetConfig+0x9c>)
 8008980:	4013      	ands	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	021b      	lsls	r3, r3, #8
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	4313      	orrs	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	051b      	lsls	r3, r3, #20
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a13      	ldr	r2, [pc, #76]	; (80089f4 <TIM_OC6_SetConfig+0xa0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d003      	beq.n	80089b4 <TIM_OC6_SetConfig+0x60>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a12      	ldr	r2, [pc, #72]	; (80089f8 <TIM_OC6_SetConfig+0xa4>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d109      	bne.n	80089c8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	029b      	lsls	r3, r3, #10
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	621a      	str	r2, [r3, #32]
}
 80089e2:	bf00      	nop
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	feff8fff 	.word	0xfeff8fff
 80089f4:	40010000 	.word	0x40010000
 80089f8:	40010400 	.word	0x40010400

080089fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	f023 0201 	bic.w	r2, r3, #1
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	011b      	lsls	r3, r3, #4
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f023 030a 	bic.w	r3, r3, #10
 8008a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	621a      	str	r2, [r3, #32]
}
 8008a4e:	bf00      	nop
 8008a50:	371c      	adds	r7, #28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b087      	sub	sp, #28
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	f023 0210 	bic.w	r2, r3, #16
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	031b      	lsls	r3, r3, #12
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	011b      	lsls	r3, r3, #4
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	621a      	str	r2, [r3, #32]
}
 8008aae:	bf00      	nop
 8008ab0:	371c      	adds	r7, #28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b085      	sub	sp, #20
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	f043 0307 	orr.w	r3, r3, #7
 8008adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	609a      	str	r2, [r3, #8]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	021a      	lsls	r2, r3, #8
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	431a      	orrs	r2, r3
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	609a      	str	r2, [r3, #8]
}
 8008b24:	bf00      	nop
 8008b26:	371c      	adds	r7, #28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e06d      	b.n	8008c24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a30      	ldr	r2, [pc, #192]	; (8008c30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d004      	beq.n	8008b7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a2f      	ldr	r2, [pc, #188]	; (8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d108      	bne.n	8008b8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a20      	ldr	r2, [pc, #128]	; (8008c30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d022      	beq.n	8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bba:	d01d      	beq.n	8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1d      	ldr	r2, [pc, #116]	; (8008c38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d018      	beq.n	8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a1c      	ldr	r2, [pc, #112]	; (8008c3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d013      	beq.n	8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a1a      	ldr	r2, [pc, #104]	; (8008c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d00e      	beq.n	8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a15      	ldr	r2, [pc, #84]	; (8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d009      	beq.n	8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a16      	ldr	r2, [pc, #88]	; (8008c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d004      	beq.n	8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d10c      	bne.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	40010000 	.word	0x40010000
 8008c34:	40010400 	.word	0x40010400
 8008c38:	40000400 	.word	0x40000400
 8008c3c:	40000800 	.word	0x40000800
 8008c40:	40000c00 	.word	0x40000c00
 8008c44:	40014000 	.word	0x40014000
 8008c48:	40001800 	.word	0x40001800

08008c4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d101      	bne.n	8008c68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c64:	2302      	movs	r3, #2
 8008c66:	e065      	b.n	8008d34 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	041b      	lsls	r3, r3, #16
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a16      	ldr	r2, [pc, #88]	; (8008d40 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d004      	beq.n	8008cf6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a14      	ldr	r2, [pc, #80]	; (8008d44 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d115      	bne.n	8008d22 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	051b      	lsls	r3, r3, #20
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	40010000 	.word	0x40010000
 8008d44:	40010400 	.word	0x40010400

08008d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e040      	b.n	8008e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d106      	bne.n	8008dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7f9 fb86 	bl	80024b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2224      	movs	r2, #36	; 0x24
 8008db0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0201 	bic.w	r2, r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f82c 	bl	8008e20 <UART_SetConfig>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d101      	bne.n	8008dd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e022      	b.n	8008e18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa84 	bl	80092e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689a      	ldr	r2, [r3, #8]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f042 0201 	orr.w	r2, r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fb0b 	bl	800942c <UART_CheckIdleState>
 8008e16:	4603      	mov	r3, r0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689a      	ldr	r2, [r3, #8]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	431a      	orrs	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	4ba6      	ldr	r3, [pc, #664]	; (80090e4 <UART_SetConfig+0x2c4>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	6979      	ldr	r1, [r7, #20]
 8008e54:	430b      	orrs	r3, r1
 8008e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a94      	ldr	r2, [pc, #592]	; (80090e8 <UART_SetConfig+0x2c8>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d120      	bne.n	8008ede <UART_SetConfig+0xbe>
 8008e9c:	4b93      	ldr	r3, [pc, #588]	; (80090ec <UART_SetConfig+0x2cc>)
 8008e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d816      	bhi.n	8008ed8 <UART_SetConfig+0xb8>
 8008eaa:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <UART_SetConfig+0x90>)
 8008eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb0:	08008ec1 	.word	0x08008ec1
 8008eb4:	08008ecd 	.word	0x08008ecd
 8008eb8:	08008ec7 	.word	0x08008ec7
 8008ebc:	08008ed3 	.word	0x08008ed3
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	77fb      	strb	r3, [r7, #31]
 8008ec4:	e150      	b.n	8009168 <UART_SetConfig+0x348>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	77fb      	strb	r3, [r7, #31]
 8008eca:	e14d      	b.n	8009168 <UART_SetConfig+0x348>
 8008ecc:	2304      	movs	r3, #4
 8008ece:	77fb      	strb	r3, [r7, #31]
 8008ed0:	e14a      	b.n	8009168 <UART_SetConfig+0x348>
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	77fb      	strb	r3, [r7, #31]
 8008ed6:	e147      	b.n	8009168 <UART_SetConfig+0x348>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	77fb      	strb	r3, [r7, #31]
 8008edc:	e144      	b.n	8009168 <UART_SetConfig+0x348>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a83      	ldr	r2, [pc, #524]	; (80090f0 <UART_SetConfig+0x2d0>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d132      	bne.n	8008f4e <UART_SetConfig+0x12e>
 8008ee8:	4b80      	ldr	r3, [pc, #512]	; (80090ec <UART_SetConfig+0x2cc>)
 8008eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eee:	f003 030c 	and.w	r3, r3, #12
 8008ef2:	2b0c      	cmp	r3, #12
 8008ef4:	d828      	bhi.n	8008f48 <UART_SetConfig+0x128>
 8008ef6:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <UART_SetConfig+0xdc>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f31 	.word	0x08008f31
 8008f00:	08008f49 	.word	0x08008f49
 8008f04:	08008f49 	.word	0x08008f49
 8008f08:	08008f49 	.word	0x08008f49
 8008f0c:	08008f3d 	.word	0x08008f3d
 8008f10:	08008f49 	.word	0x08008f49
 8008f14:	08008f49 	.word	0x08008f49
 8008f18:	08008f49 	.word	0x08008f49
 8008f1c:	08008f37 	.word	0x08008f37
 8008f20:	08008f49 	.word	0x08008f49
 8008f24:	08008f49 	.word	0x08008f49
 8008f28:	08008f49 	.word	0x08008f49
 8008f2c:	08008f43 	.word	0x08008f43
 8008f30:	2300      	movs	r3, #0
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e118      	b.n	8009168 <UART_SetConfig+0x348>
 8008f36:	2302      	movs	r3, #2
 8008f38:	77fb      	strb	r3, [r7, #31]
 8008f3a:	e115      	b.n	8009168 <UART_SetConfig+0x348>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	77fb      	strb	r3, [r7, #31]
 8008f40:	e112      	b.n	8009168 <UART_SetConfig+0x348>
 8008f42:	2308      	movs	r3, #8
 8008f44:	77fb      	strb	r3, [r7, #31]
 8008f46:	e10f      	b.n	8009168 <UART_SetConfig+0x348>
 8008f48:	2310      	movs	r3, #16
 8008f4a:	77fb      	strb	r3, [r7, #31]
 8008f4c:	e10c      	b.n	8009168 <UART_SetConfig+0x348>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a68      	ldr	r2, [pc, #416]	; (80090f4 <UART_SetConfig+0x2d4>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d120      	bne.n	8008f9a <UART_SetConfig+0x17a>
 8008f58:	4b64      	ldr	r3, [pc, #400]	; (80090ec <UART_SetConfig+0x2cc>)
 8008f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008f62:	2b30      	cmp	r3, #48	; 0x30
 8008f64:	d013      	beq.n	8008f8e <UART_SetConfig+0x16e>
 8008f66:	2b30      	cmp	r3, #48	; 0x30
 8008f68:	d814      	bhi.n	8008f94 <UART_SetConfig+0x174>
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	d009      	beq.n	8008f82 <UART_SetConfig+0x162>
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	d810      	bhi.n	8008f94 <UART_SetConfig+0x174>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <UART_SetConfig+0x15c>
 8008f76:	2b10      	cmp	r3, #16
 8008f78:	d006      	beq.n	8008f88 <UART_SetConfig+0x168>
 8008f7a:	e00b      	b.n	8008f94 <UART_SetConfig+0x174>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	77fb      	strb	r3, [r7, #31]
 8008f80:	e0f2      	b.n	8009168 <UART_SetConfig+0x348>
 8008f82:	2302      	movs	r3, #2
 8008f84:	77fb      	strb	r3, [r7, #31]
 8008f86:	e0ef      	b.n	8009168 <UART_SetConfig+0x348>
 8008f88:	2304      	movs	r3, #4
 8008f8a:	77fb      	strb	r3, [r7, #31]
 8008f8c:	e0ec      	b.n	8009168 <UART_SetConfig+0x348>
 8008f8e:	2308      	movs	r3, #8
 8008f90:	77fb      	strb	r3, [r7, #31]
 8008f92:	e0e9      	b.n	8009168 <UART_SetConfig+0x348>
 8008f94:	2310      	movs	r3, #16
 8008f96:	77fb      	strb	r3, [r7, #31]
 8008f98:	e0e6      	b.n	8009168 <UART_SetConfig+0x348>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a56      	ldr	r2, [pc, #344]	; (80090f8 <UART_SetConfig+0x2d8>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d120      	bne.n	8008fe6 <UART_SetConfig+0x1c6>
 8008fa4:	4b51      	ldr	r3, [pc, #324]	; (80090ec <UART_SetConfig+0x2cc>)
 8008fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008faa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008fae:	2bc0      	cmp	r3, #192	; 0xc0
 8008fb0:	d013      	beq.n	8008fda <UART_SetConfig+0x1ba>
 8008fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8008fb4:	d814      	bhi.n	8008fe0 <UART_SetConfig+0x1c0>
 8008fb6:	2b80      	cmp	r3, #128	; 0x80
 8008fb8:	d009      	beq.n	8008fce <UART_SetConfig+0x1ae>
 8008fba:	2b80      	cmp	r3, #128	; 0x80
 8008fbc:	d810      	bhi.n	8008fe0 <UART_SetConfig+0x1c0>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <UART_SetConfig+0x1a8>
 8008fc2:	2b40      	cmp	r3, #64	; 0x40
 8008fc4:	d006      	beq.n	8008fd4 <UART_SetConfig+0x1b4>
 8008fc6:	e00b      	b.n	8008fe0 <UART_SetConfig+0x1c0>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	77fb      	strb	r3, [r7, #31]
 8008fcc:	e0cc      	b.n	8009168 <UART_SetConfig+0x348>
 8008fce:	2302      	movs	r3, #2
 8008fd0:	77fb      	strb	r3, [r7, #31]
 8008fd2:	e0c9      	b.n	8009168 <UART_SetConfig+0x348>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	77fb      	strb	r3, [r7, #31]
 8008fd8:	e0c6      	b.n	8009168 <UART_SetConfig+0x348>
 8008fda:	2308      	movs	r3, #8
 8008fdc:	77fb      	strb	r3, [r7, #31]
 8008fde:	e0c3      	b.n	8009168 <UART_SetConfig+0x348>
 8008fe0:	2310      	movs	r3, #16
 8008fe2:	77fb      	strb	r3, [r7, #31]
 8008fe4:	e0c0      	b.n	8009168 <UART_SetConfig+0x348>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a44      	ldr	r2, [pc, #272]	; (80090fc <UART_SetConfig+0x2dc>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d125      	bne.n	800903c <UART_SetConfig+0x21c>
 8008ff0:	4b3e      	ldr	r3, [pc, #248]	; (80090ec <UART_SetConfig+0x2cc>)
 8008ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ffe:	d017      	beq.n	8009030 <UART_SetConfig+0x210>
 8009000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009004:	d817      	bhi.n	8009036 <UART_SetConfig+0x216>
 8009006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800900a:	d00b      	beq.n	8009024 <UART_SetConfig+0x204>
 800900c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009010:	d811      	bhi.n	8009036 <UART_SetConfig+0x216>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <UART_SetConfig+0x1fe>
 8009016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800901a:	d006      	beq.n	800902a <UART_SetConfig+0x20a>
 800901c:	e00b      	b.n	8009036 <UART_SetConfig+0x216>
 800901e:	2300      	movs	r3, #0
 8009020:	77fb      	strb	r3, [r7, #31]
 8009022:	e0a1      	b.n	8009168 <UART_SetConfig+0x348>
 8009024:	2302      	movs	r3, #2
 8009026:	77fb      	strb	r3, [r7, #31]
 8009028:	e09e      	b.n	8009168 <UART_SetConfig+0x348>
 800902a:	2304      	movs	r3, #4
 800902c:	77fb      	strb	r3, [r7, #31]
 800902e:	e09b      	b.n	8009168 <UART_SetConfig+0x348>
 8009030:	2308      	movs	r3, #8
 8009032:	77fb      	strb	r3, [r7, #31]
 8009034:	e098      	b.n	8009168 <UART_SetConfig+0x348>
 8009036:	2310      	movs	r3, #16
 8009038:	77fb      	strb	r3, [r7, #31]
 800903a:	e095      	b.n	8009168 <UART_SetConfig+0x348>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a2f      	ldr	r2, [pc, #188]	; (8009100 <UART_SetConfig+0x2e0>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d125      	bne.n	8009092 <UART_SetConfig+0x272>
 8009046:	4b29      	ldr	r3, [pc, #164]	; (80090ec <UART_SetConfig+0x2cc>)
 8009048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800904c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009050:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009054:	d017      	beq.n	8009086 <UART_SetConfig+0x266>
 8009056:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800905a:	d817      	bhi.n	800908c <UART_SetConfig+0x26c>
 800905c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009060:	d00b      	beq.n	800907a <UART_SetConfig+0x25a>
 8009062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009066:	d811      	bhi.n	800908c <UART_SetConfig+0x26c>
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <UART_SetConfig+0x254>
 800906c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009070:	d006      	beq.n	8009080 <UART_SetConfig+0x260>
 8009072:	e00b      	b.n	800908c <UART_SetConfig+0x26c>
 8009074:	2301      	movs	r3, #1
 8009076:	77fb      	strb	r3, [r7, #31]
 8009078:	e076      	b.n	8009168 <UART_SetConfig+0x348>
 800907a:	2302      	movs	r3, #2
 800907c:	77fb      	strb	r3, [r7, #31]
 800907e:	e073      	b.n	8009168 <UART_SetConfig+0x348>
 8009080:	2304      	movs	r3, #4
 8009082:	77fb      	strb	r3, [r7, #31]
 8009084:	e070      	b.n	8009168 <UART_SetConfig+0x348>
 8009086:	2308      	movs	r3, #8
 8009088:	77fb      	strb	r3, [r7, #31]
 800908a:	e06d      	b.n	8009168 <UART_SetConfig+0x348>
 800908c:	2310      	movs	r3, #16
 800908e:	77fb      	strb	r3, [r7, #31]
 8009090:	e06a      	b.n	8009168 <UART_SetConfig+0x348>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a1b      	ldr	r2, [pc, #108]	; (8009104 <UART_SetConfig+0x2e4>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d138      	bne.n	800910e <UART_SetConfig+0x2ee>
 800909c:	4b13      	ldr	r3, [pc, #76]	; (80090ec <UART_SetConfig+0x2cc>)
 800909e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80090a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090aa:	d017      	beq.n	80090dc <UART_SetConfig+0x2bc>
 80090ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090b0:	d82a      	bhi.n	8009108 <UART_SetConfig+0x2e8>
 80090b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b6:	d00b      	beq.n	80090d0 <UART_SetConfig+0x2b0>
 80090b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090bc:	d824      	bhi.n	8009108 <UART_SetConfig+0x2e8>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <UART_SetConfig+0x2aa>
 80090c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c6:	d006      	beq.n	80090d6 <UART_SetConfig+0x2b6>
 80090c8:	e01e      	b.n	8009108 <UART_SetConfig+0x2e8>
 80090ca:	2300      	movs	r3, #0
 80090cc:	77fb      	strb	r3, [r7, #31]
 80090ce:	e04b      	b.n	8009168 <UART_SetConfig+0x348>
 80090d0:	2302      	movs	r3, #2
 80090d2:	77fb      	strb	r3, [r7, #31]
 80090d4:	e048      	b.n	8009168 <UART_SetConfig+0x348>
 80090d6:	2304      	movs	r3, #4
 80090d8:	77fb      	strb	r3, [r7, #31]
 80090da:	e045      	b.n	8009168 <UART_SetConfig+0x348>
 80090dc:	2308      	movs	r3, #8
 80090de:	77fb      	strb	r3, [r7, #31]
 80090e0:	e042      	b.n	8009168 <UART_SetConfig+0x348>
 80090e2:	bf00      	nop
 80090e4:	efff69f3 	.word	0xefff69f3
 80090e8:	40011000 	.word	0x40011000
 80090ec:	40023800 	.word	0x40023800
 80090f0:	40004400 	.word	0x40004400
 80090f4:	40004800 	.word	0x40004800
 80090f8:	40004c00 	.word	0x40004c00
 80090fc:	40005000 	.word	0x40005000
 8009100:	40011400 	.word	0x40011400
 8009104:	40007800 	.word	0x40007800
 8009108:	2310      	movs	r3, #16
 800910a:	77fb      	strb	r3, [r7, #31]
 800910c:	e02c      	b.n	8009168 <UART_SetConfig+0x348>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a72      	ldr	r2, [pc, #456]	; (80092dc <UART_SetConfig+0x4bc>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d125      	bne.n	8009164 <UART_SetConfig+0x344>
 8009118:	4b71      	ldr	r3, [pc, #452]	; (80092e0 <UART_SetConfig+0x4c0>)
 800911a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800911e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009122:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009126:	d017      	beq.n	8009158 <UART_SetConfig+0x338>
 8009128:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800912c:	d817      	bhi.n	800915e <UART_SetConfig+0x33e>
 800912e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009132:	d00b      	beq.n	800914c <UART_SetConfig+0x32c>
 8009134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009138:	d811      	bhi.n	800915e <UART_SetConfig+0x33e>
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <UART_SetConfig+0x326>
 800913e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009142:	d006      	beq.n	8009152 <UART_SetConfig+0x332>
 8009144:	e00b      	b.n	800915e <UART_SetConfig+0x33e>
 8009146:	2300      	movs	r3, #0
 8009148:	77fb      	strb	r3, [r7, #31]
 800914a:	e00d      	b.n	8009168 <UART_SetConfig+0x348>
 800914c:	2302      	movs	r3, #2
 800914e:	77fb      	strb	r3, [r7, #31]
 8009150:	e00a      	b.n	8009168 <UART_SetConfig+0x348>
 8009152:	2304      	movs	r3, #4
 8009154:	77fb      	strb	r3, [r7, #31]
 8009156:	e007      	b.n	8009168 <UART_SetConfig+0x348>
 8009158:	2308      	movs	r3, #8
 800915a:	77fb      	strb	r3, [r7, #31]
 800915c:	e004      	b.n	8009168 <UART_SetConfig+0x348>
 800915e:	2310      	movs	r3, #16
 8009160:	77fb      	strb	r3, [r7, #31]
 8009162:	e001      	b.n	8009168 <UART_SetConfig+0x348>
 8009164:	2310      	movs	r3, #16
 8009166:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009170:	d15b      	bne.n	800922a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009172:	7ffb      	ldrb	r3, [r7, #31]
 8009174:	2b08      	cmp	r3, #8
 8009176:	d828      	bhi.n	80091ca <UART_SetConfig+0x3aa>
 8009178:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <UART_SetConfig+0x360>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	080091a5 	.word	0x080091a5
 8009184:	080091ad 	.word	0x080091ad
 8009188:	080091b5 	.word	0x080091b5
 800918c:	080091cb 	.word	0x080091cb
 8009190:	080091bb 	.word	0x080091bb
 8009194:	080091cb 	.word	0x080091cb
 8009198:	080091cb 	.word	0x080091cb
 800919c:	080091cb 	.word	0x080091cb
 80091a0:	080091c3 	.word	0x080091c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091a4:	f7fb fef6 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 80091a8:	61b8      	str	r0, [r7, #24]
        break;
 80091aa:	e013      	b.n	80091d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091ac:	f7fb ff06 	bl	8004fbc <HAL_RCC_GetPCLK2Freq>
 80091b0:	61b8      	str	r0, [r7, #24]
        break;
 80091b2:	e00f      	b.n	80091d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091b4:	4b4b      	ldr	r3, [pc, #300]	; (80092e4 <UART_SetConfig+0x4c4>)
 80091b6:	61bb      	str	r3, [r7, #24]
        break;
 80091b8:	e00c      	b.n	80091d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091ba:	f7fb fe19 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 80091be:	61b8      	str	r0, [r7, #24]
        break;
 80091c0:	e008      	b.n	80091d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091c6:	61bb      	str	r3, [r7, #24]
        break;
 80091c8:	e004      	b.n	80091d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	77bb      	strb	r3, [r7, #30]
        break;
 80091d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d074      	beq.n	80092c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	005a      	lsls	r2, r3, #1
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	085b      	lsrs	r3, r3, #1
 80091e4:	441a      	add	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	2b0f      	cmp	r3, #15
 80091f4:	d916      	bls.n	8009224 <UART_SetConfig+0x404>
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091fc:	d212      	bcs.n	8009224 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	b29b      	uxth	r3, r3
 8009202:	f023 030f 	bic.w	r3, r3, #15
 8009206:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	085b      	lsrs	r3, r3, #1
 800920c:	b29b      	uxth	r3, r3
 800920e:	f003 0307 	and.w	r3, r3, #7
 8009212:	b29a      	uxth	r2, r3
 8009214:	89fb      	ldrh	r3, [r7, #14]
 8009216:	4313      	orrs	r3, r2
 8009218:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	89fa      	ldrh	r2, [r7, #14]
 8009220:	60da      	str	r2, [r3, #12]
 8009222:	e04f      	b.n	80092c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	77bb      	strb	r3, [r7, #30]
 8009228:	e04c      	b.n	80092c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800922a:	7ffb      	ldrb	r3, [r7, #31]
 800922c:	2b08      	cmp	r3, #8
 800922e:	d828      	bhi.n	8009282 <UART_SetConfig+0x462>
 8009230:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <UART_SetConfig+0x418>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	0800925d 	.word	0x0800925d
 800923c:	08009265 	.word	0x08009265
 8009240:	0800926d 	.word	0x0800926d
 8009244:	08009283 	.word	0x08009283
 8009248:	08009273 	.word	0x08009273
 800924c:	08009283 	.word	0x08009283
 8009250:	08009283 	.word	0x08009283
 8009254:	08009283 	.word	0x08009283
 8009258:	0800927b 	.word	0x0800927b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800925c:	f7fb fe9a 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8009260:	61b8      	str	r0, [r7, #24]
        break;
 8009262:	e013      	b.n	800928c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009264:	f7fb feaa 	bl	8004fbc <HAL_RCC_GetPCLK2Freq>
 8009268:	61b8      	str	r0, [r7, #24]
        break;
 800926a:	e00f      	b.n	800928c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800926c:	4b1d      	ldr	r3, [pc, #116]	; (80092e4 <UART_SetConfig+0x4c4>)
 800926e:	61bb      	str	r3, [r7, #24]
        break;
 8009270:	e00c      	b.n	800928c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009272:	f7fb fdbd 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8009276:	61b8      	str	r0, [r7, #24]
        break;
 8009278:	e008      	b.n	800928c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800927a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800927e:	61bb      	str	r3, [r7, #24]
        break;
 8009280:	e004      	b.n	800928c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009282:	2300      	movs	r3, #0
 8009284:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	77bb      	strb	r3, [r7, #30]
        break;
 800928a:	bf00      	nop
    }

    if (pclk != 0U)
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d018      	beq.n	80092c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	085a      	lsrs	r2, r3, #1
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	441a      	add	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	2b0f      	cmp	r3, #15
 80092aa:	d909      	bls.n	80092c0 <UART_SetConfig+0x4a0>
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092b2:	d205      	bcs.n	80092c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	60da      	str	r2, [r3, #12]
 80092be:	e001      	b.n	80092c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80092d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3720      	adds	r7, #32
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	40007c00 	.word	0x40007c00
 80092e0:	40023800 	.word	0x40023800
 80092e4:	00f42400 	.word	0x00f42400

080092e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00a      	beq.n	8009312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00a      	beq.n	8009334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	430a      	orrs	r2, r1
 8009332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00a      	beq.n	8009356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	f003 0308 	and.w	r3, r3, #8
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00a      	beq.n	8009378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	430a      	orrs	r2, r1
 8009376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	f003 0310 	and.w	r3, r3, #16
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00a      	beq.n	800939a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939e:	f003 0320 	and.w	r3, r3, #32
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01a      	beq.n	80093fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093e6:	d10a      	bne.n	80093fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	605a      	str	r2, [r3, #4]
  }
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af02      	add	r7, sp, #8
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800943c:	f7f9 fac0 	bl	80029c0 <HAL_GetTick>
 8009440:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	2b08      	cmp	r3, #8
 800944e:	d10e      	bne.n	800946e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f817 	bl	8009492 <UART_WaitOnFlagUntilTimeout>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e00d      	b.n	800948a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2220      	movs	r2, #32
 8009472:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2220      	movs	r2, #32
 8009478:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b09c      	sub	sp, #112	; 0x70
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	603b      	str	r3, [r7, #0]
 800949e:	4613      	mov	r3, r2
 80094a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094a2:	e0a5      	b.n	80095f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094aa:	f000 80a1 	beq.w	80095f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ae:	f7f9 fa87 	bl	80029c0 <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d302      	bcc.n	80094c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80094be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d13e      	bne.n	8009542 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80094d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094d8:	667b      	str	r3, [r7, #100]	; 0x64
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80094f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e6      	bne.n	80094c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3308      	adds	r3, #8
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	f023 0301 	bic.w	r3, r3, #1
 800950c:	663b      	str	r3, [r7, #96]	; 0x60
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3308      	adds	r3, #8
 8009514:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009516:	64ba      	str	r2, [r7, #72]	; 0x48
 8009518:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800951c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800951e:	e841 2300 	strex	r3, r2, [r1]
 8009522:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1e5      	bne.n	80094f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2220      	movs	r2, #32
 800952e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e067      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0304 	and.w	r3, r3, #4
 800954c:	2b00      	cmp	r3, #0
 800954e:	d04f      	beq.n	80095f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800955a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800955e:	d147      	bne.n	80095f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009568:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800957e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009588:	637b      	str	r3, [r7, #52]	; 0x34
 800958a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800958e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e6      	bne.n	800956a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3308      	adds	r3, #8
 80095a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	613b      	str	r3, [r7, #16]
   return(result);
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f023 0301 	bic.w	r3, r3, #1
 80095b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3308      	adds	r3, #8
 80095ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095bc:	623a      	str	r2, [r7, #32]
 80095be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	69f9      	ldr	r1, [r7, #28]
 80095c2:	6a3a      	ldr	r2, [r7, #32]
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e5      	bne.n	800959c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2220      	movs	r2, #32
 80095d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2220      	movs	r2, #32
 80095da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2220      	movs	r2, #32
 80095e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e010      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	69da      	ldr	r2, [r3, #28]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	4013      	ands	r3, r2
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	bf0c      	ite	eq
 8009600:	2301      	moveq	r3, #1
 8009602:	2300      	movne	r3, #0
 8009604:	b2db      	uxtb	r3, r3
 8009606:	461a      	mov	r2, r3
 8009608:	79fb      	ldrb	r3, [r7, #7]
 800960a:	429a      	cmp	r2, r3
 800960c:	f43f af4a 	beq.w	80094a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3770      	adds	r7, #112	; 0x70
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d121      	bne.n	8009672 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	4b27      	ldr	r3, [pc, #156]	; (80096d0 <FMC_SDRAM_Init+0xb4>)
 8009634:	4013      	ands	r3, r2
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	6851      	ldr	r1, [r2, #4]
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	6892      	ldr	r2, [r2, #8]
 800963e:	4311      	orrs	r1, r2
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	68d2      	ldr	r2, [r2, #12]
 8009644:	4311      	orrs	r1, r2
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	6912      	ldr	r2, [r2, #16]
 800964a:	4311      	orrs	r1, r2
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	6952      	ldr	r2, [r2, #20]
 8009650:	4311      	orrs	r1, r2
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	6992      	ldr	r2, [r2, #24]
 8009656:	4311      	orrs	r1, r2
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	69d2      	ldr	r2, [r2, #28]
 800965c:	4311      	orrs	r1, r2
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	6a12      	ldr	r2, [r2, #32]
 8009662:	4311      	orrs	r1, r2
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009668:	430a      	orrs	r2, r1
 800966a:	431a      	orrs	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	e026      	b.n	80096c0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	69d9      	ldr	r1, [r3, #28]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	4319      	orrs	r1, r3
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	430b      	orrs	r3, r1
 800968a:	431a      	orrs	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	4b0e      	ldr	r3, [pc, #56]	; (80096d0 <FMC_SDRAM_Init+0xb4>)
 8009696:	4013      	ands	r3, r2
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	6851      	ldr	r1, [r2, #4]
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	6892      	ldr	r2, [r2, #8]
 80096a0:	4311      	orrs	r1, r2
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	68d2      	ldr	r2, [r2, #12]
 80096a6:	4311      	orrs	r1, r2
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	6912      	ldr	r2, [r2, #16]
 80096ac:	4311      	orrs	r1, r2
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	6952      	ldr	r2, [r2, #20]
 80096b2:	4311      	orrs	r1, r2
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	6992      	ldr	r2, [r2, #24]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	431a      	orrs	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	ffff8000 	.word	0xffff8000

080096d4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d128      	bne.n	8009738 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	1e59      	subs	r1, r3, #1
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	011b      	lsls	r3, r3, #4
 80096fc:	4319      	orrs	r1, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	3b01      	subs	r3, #1
 8009704:	021b      	lsls	r3, r3, #8
 8009706:	4319      	orrs	r1, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	3b01      	subs	r3, #1
 800970e:	031b      	lsls	r3, r3, #12
 8009710:	4319      	orrs	r1, r3
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	3b01      	subs	r3, #1
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	4319      	orrs	r1, r3
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	3b01      	subs	r3, #1
 8009722:	051b      	lsls	r3, r3, #20
 8009724:	4319      	orrs	r1, r3
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	3b01      	subs	r3, #1
 800972c:	061b      	lsls	r3, r3, #24
 800972e:	430b      	orrs	r3, r1
 8009730:	431a      	orrs	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	609a      	str	r2, [r3, #8]
 8009736:	e02d      	b.n	8009794 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	4b19      	ldr	r3, [pc, #100]	; (80097a4 <FMC_SDRAM_Timing_Init+0xd0>)
 800973e:	4013      	ands	r3, r2
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	68d2      	ldr	r2, [r2, #12]
 8009744:	3a01      	subs	r2, #1
 8009746:	0311      	lsls	r1, r2, #12
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	6952      	ldr	r2, [r2, #20]
 800974c:	3a01      	subs	r2, #1
 800974e:	0512      	lsls	r2, r2, #20
 8009750:	430a      	orrs	r2, r1
 8009752:	431a      	orrs	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	1e59      	subs	r1, r3, #1
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	3b01      	subs	r3, #1
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	4319      	orrs	r1, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	3b01      	subs	r3, #1
 8009776:	021b      	lsls	r3, r3, #8
 8009778:	4319      	orrs	r1, r3
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	3b01      	subs	r3, #1
 8009780:	041b      	lsls	r3, r3, #16
 8009782:	4319      	orrs	r1, r3
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	3b01      	subs	r3, #1
 800978a:	061b      	lsls	r3, r3, #24
 800978c:	430b      	orrs	r3, r1
 800978e:	431a      	orrs	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	ff0f0fff 	.word	0xff0f0fff

080097a8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80097a8:	b084      	sub	sp, #16
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	f107 001c 	add.w	r0, r7, #28
 80097b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80097be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80097c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80097c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80097c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80097ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80097cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80097ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80097d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80097d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	4b07      	ldr	r3, [pc, #28]	; (80097fc <SDMMC_Init+0x54>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	431a      	orrs	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	b004      	add	sp, #16
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	ffff8100 	.word	0xffff8100

08009800 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800980e:	4618      	mov	r0, r3
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2203      	movs	r2, #3
 8009848:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0303 	and.w	r3, r3, #3
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009892:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009898:	431a      	orrs	r2, r3
                       Command->CPSM);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800989e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68da      	ldr	r2, [r3, #12]
 80098aa:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <SDMMC_SendCommand+0x50>)
 80098ac:	4013      	ands	r3, r2
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	431a      	orrs	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	fffff000 	.word	0xfffff000

080098c8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	b2db      	uxtb	r3, r3
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b085      	sub	sp, #20
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3314      	adds	r3, #20
 80098f0:	461a      	mov	r2, r3
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	4413      	add	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
}  
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800992e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009934:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800993a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	431a      	orrs	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009952:	2300      	movs	r3, #0

}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b088      	sub	sp, #32
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800996e:	2310      	movs	r3, #16
 8009970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009972:	2340      	movs	r3, #64	; 0x40
 8009974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009976:	2300      	movs	r3, #0
 8009978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800997a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800997e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009980:	f107 0308 	add.w	r3, r7, #8
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff ff74 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800998c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009990:	2110      	movs	r1, #16
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa1a 	bl	8009dcc <SDMMC_GetCmdResp1>
 8009998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800999a:	69fb      	ldr	r3, [r7, #28]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3720      	adds	r7, #32
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80099b2:	2311      	movs	r3, #17
 80099b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099b6:	2340      	movs	r3, #64	; 0x40
 80099b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099ba:	2300      	movs	r3, #0
 80099bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099c4:	f107 0308 	add.w	r3, r7, #8
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff ff52 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80099d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099d4:	2111      	movs	r1, #17
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f9f8 	bl	8009dcc <SDMMC_GetCmdResp1>
 80099dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099de:	69fb      	ldr	r3, [r7, #28]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3720      	adds	r7, #32
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80099f6:	2312      	movs	r3, #18
 80099f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099fa:	2340      	movs	r3, #64	; 0x40
 80099fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099fe:	2300      	movs	r3, #0
 8009a00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a08:	f107 0308 	add.w	r3, r7, #8
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7ff ff30 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a18:	2112      	movs	r1, #18
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f9d6 	bl	8009dcc <SDMMC_GetCmdResp1>
 8009a20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a22:	69fb      	ldr	r3, [r7, #28]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3720      	adds	r7, #32
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b088      	sub	sp, #32
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009a3a:	2318      	movs	r3, #24
 8009a3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a3e:	2340      	movs	r3, #64	; 0x40
 8009a40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a42:	2300      	movs	r3, #0
 8009a44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a4c:	f107 0308 	add.w	r3, r7, #8
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff ff0e 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a5c:	2118      	movs	r1, #24
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f9b4 	bl	8009dcc <SDMMC_GetCmdResp1>
 8009a64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a66:	69fb      	ldr	r3, [r7, #28]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3720      	adds	r7, #32
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009a7e:	2319      	movs	r3, #25
 8009a80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a82:	2340      	movs	r3, #64	; 0x40
 8009a84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a90:	f107 0308 	add.w	r3, r7, #8
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7ff feec 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aa0:	2119      	movs	r1, #25
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f992 	bl	8009dcc <SDMMC_GetCmdResp1>
 8009aa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aaa:	69fb      	ldr	r3, [r7, #28]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3720      	adds	r7, #32
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b088      	sub	sp, #32
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009ac0:	230c      	movs	r3, #12
 8009ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ac4:	2340      	movs	r3, #64	; 0x40
 8009ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ad0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ad2:	f107 0308 	add.w	r3, r7, #8
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff fecb 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009ade:	4a05      	ldr	r2, [pc, #20]	; (8009af4 <SDMMC_CmdStopTransfer+0x40>)
 8009ae0:	210c      	movs	r1, #12
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f972 	bl	8009dcc <SDMMC_GetCmdResp1>
 8009ae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aea:	69fb      	ldr	r3, [r7, #28]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3720      	adds	r7, #32
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	05f5e100 	.word	0x05f5e100

08009af8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009b08:	2307      	movs	r3, #7
 8009b0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b0c:	2340      	movs	r3, #64	; 0x40
 8009b0e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b18:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b1a:	f107 0310 	add.w	r3, r7, #16
 8009b1e:	4619      	mov	r1, r3
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f7ff fea7 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b2a:	2107      	movs	r1, #7
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f000 f94d 	bl	8009dcc <SDMMC_GetCmdResp1>
 8009b32:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3728      	adds	r7, #40	; 0x28
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b088      	sub	sp, #32
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b52:	2300      	movs	r3, #0
 8009b54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b5c:	f107 0308 	add.w	r3, r7, #8
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff fe86 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fb67 	bl	800a23c <SDMMC_GetCmdError>
 8009b6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b70:	69fb      	ldr	r3, [r7, #28]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3720      	adds	r7, #32
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b088      	sub	sp, #32
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009b82:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009b86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009b88:	2308      	movs	r3, #8
 8009b8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b9a:	f107 0308 	add.w	r3, r7, #8
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7ff fe67 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fafa 	bl	800a1a0 <SDMMC_GetCmdResp7>
 8009bac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bae:	69fb      	ldr	r3, [r7, #28]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3720      	adds	r7, #32
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009bc6:	2337      	movs	r3, #55	; 0x37
 8009bc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bca:	2340      	movs	r3, #64	; 0x40
 8009bcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bd8:	f107 0308 	add.w	r3, r7, #8
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff fe48 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009be8:	2137      	movs	r1, #55	; 0x37
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f8ee 	bl	8009dcc <SDMMC_GetCmdResp1>
 8009bf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bf2:	69fb      	ldr	r3, [r7, #28]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3720      	adds	r7, #32
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b088      	sub	sp, #32
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	4b0d      	ldr	r3, [pc, #52]	; (8009c40 <SDMMC_CmdAppOperCommand+0x44>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009c0e:	2329      	movs	r3, #41	; 0x29
 8009c10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c12:	2340      	movs	r3, #64	; 0x40
 8009c14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c16:	2300      	movs	r3, #0
 8009c18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c20:	f107 0308 	add.w	r3, r7, #8
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff fe24 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fa03 	bl	800a038 <SDMMC_GetCmdResp3>
 8009c32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c34:	69fb      	ldr	r3, [r7, #28]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3720      	adds	r7, #32
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	80100000 	.word	0x80100000

08009c44 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009c52:	2306      	movs	r3, #6
 8009c54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c56:	2340      	movs	r3, #64	; 0x40
 8009c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c64:	f107 0308 	add.w	r3, r7, #8
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff fe02 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c74:	2106      	movs	r1, #6
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f8a8 	bl	8009dcc <SDMMC_GetCmdResp1>
 8009c7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c7e:	69fb      	ldr	r3, [r7, #28]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3720      	adds	r7, #32
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c90:	2300      	movs	r3, #0
 8009c92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009c94:	2333      	movs	r3, #51	; 0x33
 8009c96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c98:	2340      	movs	r3, #64	; 0x40
 8009c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ca4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ca6:	f107 0308 	add.w	r3, r7, #8
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff fde1 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb6:	2133      	movs	r1, #51	; 0x33
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f887 	bl	8009dcc <SDMMC_GetCmdResp1>
 8009cbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cc0:	69fb      	ldr	r3, [r7, #28]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3720      	adds	r7, #32
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b088      	sub	sp, #32
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009cda:	23c0      	movs	r3, #192	; 0xc0
 8009cdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ce8:	f107 0308 	add.w	r3, r7, #8
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7ff fdc0 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f957 	bl	8009fa8 <SDMMC_GetCmdResp2>
 8009cfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cfc:	69fb      	ldr	r3, [r7, #28]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3720      	adds	r7, #32
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b088      	sub	sp, #32
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009d14:	2309      	movs	r3, #9
 8009d16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d18:	23c0      	movs	r3, #192	; 0xc0
 8009d1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d26:	f107 0308 	add.w	r3, r7, #8
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7ff fda1 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f938 	bl	8009fa8 <SDMMC_GetCmdResp2>
 8009d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d3a:	69fb      	ldr	r3, [r7, #28]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3720      	adds	r7, #32
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009d52:	2303      	movs	r3, #3
 8009d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d56:	2340      	movs	r3, #64	; 0x40
 8009d58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d64:	f107 0308 	add.w	r3, r7, #8
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff fd82 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	2103      	movs	r1, #3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f99d 	bl	800a0b4 <SDMMC_GetCmdResp6>
 8009d7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d7c:	69fb      	ldr	r3, [r7, #28]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3720      	adds	r7, #32
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b088      	sub	sp, #32
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009d94:	230d      	movs	r3, #13
 8009d96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d98:	2340      	movs	r3, #64	; 0x40
 8009d9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009da4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009da6:	f107 0308 	add.w	r3, r7, #8
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7ff fd61 	bl	8009874 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db6:	210d      	movs	r1, #13
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f807 	bl	8009dcc <SDMMC_GetCmdResp1>
 8009dbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dc0:	69fb      	ldr	r3, [r7, #28]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3720      	adds	r7, #32
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009dda:	4b70      	ldr	r3, [pc, #448]	; (8009f9c <SDMMC_GetCmdResp1+0x1d0>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a70      	ldr	r2, [pc, #448]	; (8009fa0 <SDMMC_GetCmdResp1+0x1d4>)
 8009de0:	fba2 2303 	umull	r2, r3, r2, r3
 8009de4:	0a5a      	lsrs	r2, r3, #9
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	fb02 f303 	mul.w	r3, r2, r3
 8009dec:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	1e5a      	subs	r2, r3, #1
 8009df2:	61fa      	str	r2, [r7, #28]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d102      	bne.n	8009dfe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009df8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dfc:	e0c9      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e02:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d0ef      	beq.n	8009dee <SDMMC_GetCmdResp1+0x22>
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1ea      	bne.n	8009dee <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1c:	f003 0304 	and.w	r3, r3, #4
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d004      	beq.n	8009e2e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2204      	movs	r2, #4
 8009e28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e2a:	2304      	movs	r3, #4
 8009e2c:	e0b1      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d004      	beq.n	8009e44 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e0a6      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	22c5      	movs	r2, #197	; 0xc5
 8009e48:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7ff fd3c 	bl	80098c8 <SDMMC_GetCommandResponse>
 8009e50:	4603      	mov	r3, r0
 8009e52:	461a      	mov	r2, r3
 8009e54:	7afb      	ldrb	r3, [r7, #11]
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d001      	beq.n	8009e5e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e099      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009e5e:	2100      	movs	r1, #0
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f7ff fd3e 	bl	80098e2 <SDMMC_GetResponse>
 8009e66:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	4b4e      	ldr	r3, [pc, #312]	; (8009fa4 <SDMMC_GetCmdResp1+0x1d8>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009e72:	2300      	movs	r3, #0
 8009e74:	e08d      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	da02      	bge.n	8009e82 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e80:	e087      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e8c:	2340      	movs	r3, #64	; 0x40
 8009e8e:	e080      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e9a:	2380      	movs	r3, #128	; 0x80
 8009e9c:	e079      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eac:	e071      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ebc:	e069      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ecc:	e061      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009ed8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009edc:	e059      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eec:	e051      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009efc:	e049      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d002      	beq.n	8009f0e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009f08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f0c:	e041      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d002      	beq.n	8009f1e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f1c:	e039      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f2c:	e031      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009f3c:	e029      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f4c:	e021      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009f5c:	e019      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009f6c:	e011      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f7c:	e009      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f003 0308 	and.w	r3, r3, #8
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009f8c:	e001      	b.n	8009f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3720      	adds	r7, #32
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20000000 	.word	0x20000000
 8009fa0:	10624dd3 	.word	0x10624dd3
 8009fa4:	fdffe008 	.word	0xfdffe008

08009fa8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009fb0:	4b1f      	ldr	r3, [pc, #124]	; (800a030 <SDMMC_GetCmdResp2+0x88>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a1f      	ldr	r2, [pc, #124]	; (800a034 <SDMMC_GetCmdResp2+0x8c>)
 8009fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fba:	0a5b      	lsrs	r3, r3, #9
 8009fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fc0:	fb02 f303 	mul.w	r3, r2, r3
 8009fc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	1e5a      	subs	r2, r3, #1
 8009fca:	60fa      	str	r2, [r7, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d102      	bne.n	8009fd6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fd4:	e026      	b.n	800a024 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0ef      	beq.n	8009fc6 <SDMMC_GetCmdResp2+0x1e>
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1ea      	bne.n	8009fc6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff4:	f003 0304 	and.w	r3, r3, #4
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2204      	movs	r2, #4
 800a000:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a002:	2304      	movs	r3, #4
 800a004:	e00e      	b.n	800a024 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a018:	2301      	movs	r3, #1
 800a01a:	e003      	b.n	800a024 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	22c5      	movs	r2, #197	; 0xc5
 800a020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	20000000 	.word	0x20000000
 800a034:	10624dd3 	.word	0x10624dd3

0800a038 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a040:	4b1a      	ldr	r3, [pc, #104]	; (800a0ac <SDMMC_GetCmdResp3+0x74>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1a      	ldr	r2, [pc, #104]	; (800a0b0 <SDMMC_GetCmdResp3+0x78>)
 800a046:	fba2 2303 	umull	r2, r3, r2, r3
 800a04a:	0a5b      	lsrs	r3, r3, #9
 800a04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a050:	fb02 f303 	mul.w	r3, r2, r3
 800a054:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	1e5a      	subs	r2, r3, #1
 800a05a:	60fa      	str	r2, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a064:	e01b      	b.n	800a09e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0ef      	beq.n	800a056 <SDMMC_GetCmdResp3+0x1e>
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1ea      	bne.n	800a056 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d004      	beq.n	800a096 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2204      	movs	r2, #4
 800a090:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a092:	2304      	movs	r3, #4
 800a094:	e003      	b.n	800a09e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	22c5      	movs	r2, #197	; 0xc5
 800a09a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	20000000 	.word	0x20000000
 800a0b0:	10624dd3 	.word	0x10624dd3

0800a0b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0c2:	4b35      	ldr	r3, [pc, #212]	; (800a198 <SDMMC_GetCmdResp6+0xe4>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a35      	ldr	r2, [pc, #212]	; (800a19c <SDMMC_GetCmdResp6+0xe8>)
 800a0c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0cc:	0a5b      	lsrs	r3, r3, #9
 800a0ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d2:	fb02 f303 	mul.w	r3, r2, r3
 800a0d6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	1e5a      	subs	r2, r3, #1
 800a0dc:	61fa      	str	r2, [r7, #28]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d102      	bne.n	800a0e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0e6:	e052      	b.n	800a18e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0ef      	beq.n	800a0d8 <SDMMC_GetCmdResp6+0x24>
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1ea      	bne.n	800a0d8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d004      	beq.n	800a118 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2204      	movs	r2, #4
 800a112:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a114:	2304      	movs	r3, #4
 800a116:	e03a      	b.n	800a18e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b00      	cmp	r3, #0
 800a122:	d004      	beq.n	800a12e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2201      	movs	r2, #1
 800a128:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e02f      	b.n	800a18e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7ff fbca 	bl	80098c8 <SDMMC_GetCommandResponse>
 800a134:	4603      	mov	r3, r0
 800a136:	461a      	mov	r2, r3
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d001      	beq.n	800a142 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a13e:	2301      	movs	r3, #1
 800a140:	e025      	b.n	800a18e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	22c5      	movs	r2, #197	; 0xc5
 800a146:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a148:	2100      	movs	r1, #0
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f7ff fbc9 	bl	80098e2 <SDMMC_GetResponse>
 800a150:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d106      	bne.n	800a16a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	0c1b      	lsrs	r3, r3, #16
 800a160:	b29a      	uxth	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a166:	2300      	movs	r3, #0
 800a168:	e011      	b.n	800a18e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a178:	e009      	b.n	800a18e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a188:	e001      	b.n	800a18e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a18a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3720      	adds	r7, #32
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20000000 	.word	0x20000000
 800a19c:	10624dd3 	.word	0x10624dd3

0800a1a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1a8:	4b22      	ldr	r3, [pc, #136]	; (800a234 <SDMMC_GetCmdResp7+0x94>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a22      	ldr	r2, [pc, #136]	; (800a238 <SDMMC_GetCmdResp7+0x98>)
 800a1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b2:	0a5b      	lsrs	r3, r3, #9
 800a1b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1b8:	fb02 f303 	mul.w	r3, r2, r3
 800a1bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	1e5a      	subs	r2, r3, #1
 800a1c2:	60fa      	str	r2, [r7, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d102      	bne.n	800a1ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1cc:	e02c      	b.n	800a228 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0ef      	beq.n	800a1be <SDMMC_GetCmdResp7+0x1e>
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1ea      	bne.n	800a1be <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ec:	f003 0304 	and.w	r3, r3, #4
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d004      	beq.n	800a1fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2204      	movs	r2, #4
 800a1f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1fa:	2304      	movs	r3, #4
 800a1fc:	e014      	b.n	800a228 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	2b00      	cmp	r3, #0
 800a208:	d004      	beq.n	800a214 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a210:	2301      	movs	r3, #1
 800a212:	e009      	b.n	800a228 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2240      	movs	r2, #64	; 0x40
 800a224:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a226:	2300      	movs	r3, #0
  
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	20000000 	.word	0x20000000
 800a238:	10624dd3 	.word	0x10624dd3

0800a23c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a244:	4b11      	ldr	r3, [pc, #68]	; (800a28c <SDMMC_GetCmdError+0x50>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a11      	ldr	r2, [pc, #68]	; (800a290 <SDMMC_GetCmdError+0x54>)
 800a24a:	fba2 2303 	umull	r2, r3, r2, r3
 800a24e:	0a5b      	lsrs	r3, r3, #9
 800a250:	f241 3288 	movw	r2, #5000	; 0x1388
 800a254:	fb02 f303 	mul.w	r3, r2, r3
 800a258:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	1e5a      	subs	r2, r3, #1
 800a25e:	60fa      	str	r2, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d102      	bne.n	800a26a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a264:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a268:	e009      	b.n	800a27e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0f1      	beq.n	800a25a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	22c5      	movs	r2, #197	; 0xc5
 800a27a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000000 	.word	0x20000000
 800a290:	10624dd3 	.word	0x10624dd3

0800a294 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a298:	4904      	ldr	r1, [pc, #16]	; (800a2ac <MX_FATFS_Init+0x18>)
 800a29a:	4805      	ldr	r0, [pc, #20]	; (800a2b0 <MX_FATFS_Init+0x1c>)
 800a29c:	f000 f9e4 	bl	800a668 <FATFS_LinkDriver>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	4b03      	ldr	r3, [pc, #12]	; (800a2b4 <MX_FATFS_Init+0x20>)
 800a2a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a2a8:	bf00      	nop
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	2000079c 	.word	0x2000079c
 800a2b0:	0800a710 	.word	0x0800a710
 800a2b4:	20000798 	.word	0x20000798

0800a2b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a2c2:	f000 f879 	bl	800a3b8 <BSP_SD_IsDetected>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d001      	beq.n	800a2d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e012      	b.n	800a2f6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a2d0:	480b      	ldr	r0, [pc, #44]	; (800a300 <BSP_SD_Init+0x48>)
 800a2d2:	f7fc f97b 	bl	80065cc <HAL_SD_Init>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a2da:	79fb      	ldrb	r3, [r7, #7]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d109      	bne.n	800a2f4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a2e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a2e4:	4806      	ldr	r0, [pc, #24]	; (800a300 <BSP_SD_Init+0x48>)
 800a2e6:	f7fc ff5d 	bl	80071a4 <HAL_SD_ConfigWideBusOperation>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a2f4:	79fb      	ldrb	r3, [r7, #7]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	2000038c 	.word	0x2000038c

0800a304 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b088      	sub	sp, #32
 800a308:	af02      	add	r7, sp, #8
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	68f9      	ldr	r1, [r7, #12]
 800a320:	4806      	ldr	r0, [pc, #24]	; (800a33c <BSP_SD_ReadBlocks+0x38>)
 800a322:	f7fc fa0b 	bl	800673c <HAL_SD_ReadBlocks>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a330:	7dfb      	ldrb	r3, [r7, #23]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	2000038c 	.word	0x2000038c

0800a340 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af02      	add	r7, sp, #8
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	68f9      	ldr	r1, [r7, #12]
 800a35c:	4806      	ldr	r0, [pc, #24]	; (800a378 <BSP_SD_WriteBlocks+0x38>)
 800a35e:	f7fc fbcb 	bl	8006af8 <HAL_SD_WriteBlocks>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	2000038c 	.word	0x2000038c

0800a37c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a380:	4805      	ldr	r0, [pc, #20]	; (800a398 <BSP_SD_GetCardState+0x1c>)
 800a382:	f7fc ffa9 	bl	80072d8 <HAL_SD_GetCardState>
 800a386:	4603      	mov	r3, r0
 800a388:	2b04      	cmp	r3, #4
 800a38a:	bf14      	ite	ne
 800a38c:	2301      	movne	r3, #1
 800a38e:	2300      	moveq	r3, #0
 800a390:	b2db      	uxtb	r3, r3
}
 800a392:	4618      	mov	r0, r3
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	2000038c 	.word	0x2000038c

0800a39c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a3a4:	6879      	ldr	r1, [r7, #4]
 800a3a6:	4803      	ldr	r0, [pc, #12]	; (800a3b4 <BSP_SD_GetCardInfo+0x18>)
 800a3a8:	f7fc fed0 	bl	800714c <HAL_SD_GetCardInfo>
}
 800a3ac:	bf00      	nop
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	2000038c 	.word	0x2000038c

0800a3b8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a3c2:	f000 f80b 	bl	800a3dc <BSP_PlatformIsDetected>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	b2db      	uxtb	r3, r3
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a3e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a3ea:	4806      	ldr	r0, [pc, #24]	; (800a404 <BSP_PlatformIsDetected+0x28>)
 800a3ec:	f7f9 fb8a 	bl	8003b04 <HAL_GPIO_ReadPin>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	40020800 	.word	0x40020800

0800a408 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a412:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <SD_CheckStatus+0x38>)
 800a414:	2201      	movs	r2, #1
 800a416:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a418:	f7ff ffb0 	bl	800a37c <BSP_SD_GetCardState>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d107      	bne.n	800a432 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a422:	4b07      	ldr	r3, [pc, #28]	; (800a440 <SD_CheckStatus+0x38>)
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	b2db      	uxtb	r3, r3
 800a428:	f023 0301 	bic.w	r3, r3, #1
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	4b04      	ldr	r3, [pc, #16]	; (800a440 <SD_CheckStatus+0x38>)
 800a430:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a432:	4b03      	ldr	r3, [pc, #12]	; (800a440 <SD_CheckStatus+0x38>)
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	b2db      	uxtb	r3, r3
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20000009 	.word	0x20000009

0800a444 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a44e:	4b0b      	ldr	r3, [pc, #44]	; (800a47c <SD_initialize+0x38>)
 800a450:	2201      	movs	r2, #1
 800a452:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a454:	f7ff ff30 	bl	800a2b8 <BSP_SD_Init>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d107      	bne.n	800a46e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a45e:	79fb      	ldrb	r3, [r7, #7]
 800a460:	4618      	mov	r0, r3
 800a462:	f7ff ffd1 	bl	800a408 <SD_CheckStatus>
 800a466:	4603      	mov	r3, r0
 800a468:	461a      	mov	r2, r3
 800a46a:	4b04      	ldr	r3, [pc, #16]	; (800a47c <SD_initialize+0x38>)
 800a46c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a46e:	4b03      	ldr	r3, [pc, #12]	; (800a47c <SD_initialize+0x38>)
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	b2db      	uxtb	r3, r3
}
 800a474:	4618      	mov	r0, r3
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	20000009 	.word	0x20000009

0800a480 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7ff ffbb 	bl	800a408 <SD_CheckStatus>
 800a492:	4603      	mov	r3, r0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	607a      	str	r2, [r7, #4]
 800a4a6:	603b      	str	r3, [r7, #0]
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b4:	683a      	ldr	r2, [r7, #0]
 800a4b6:	6879      	ldr	r1, [r7, #4]
 800a4b8:	68b8      	ldr	r0, [r7, #8]
 800a4ba:	f7ff ff23 	bl	800a304 <BSP_SD_ReadBlocks>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d107      	bne.n	800a4d4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a4c4:	bf00      	nop
 800a4c6:	f7ff ff59 	bl	800a37c <BSP_SD_GetCardState>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1fa      	bne.n	800a4c6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3718      	adds	r7, #24
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b086      	sub	sp, #24
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
 800a4e8:	603b      	str	r3, [r7, #0]
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	6879      	ldr	r1, [r7, #4]
 800a4fa:	68b8      	ldr	r0, [r7, #8]
 800a4fc:	f7ff ff20 	bl	800a340 <BSP_SD_WriteBlocks>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d107      	bne.n	800a516 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a506:	bf00      	nop
 800a508:	f7ff ff38 	bl	800a37c <BSP_SD_GetCardState>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1fa      	bne.n	800a508 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a516:	7dfb      	ldrb	r3, [r7, #23]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3718      	adds	r7, #24
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08c      	sub	sp, #48	; 0x30
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	603a      	str	r2, [r7, #0]
 800a52a:	71fb      	strb	r3, [r7, #7]
 800a52c:	460b      	mov	r3, r1
 800a52e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a536:	4b25      	ldr	r3, [pc, #148]	; (800a5cc <SD_ioctl+0xac>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <SD_ioctl+0x28>
 800a544:	2303      	movs	r3, #3
 800a546:	e03c      	b.n	800a5c2 <SD_ioctl+0xa2>

  switch (cmd)
 800a548:	79bb      	ldrb	r3, [r7, #6]
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d834      	bhi.n	800a5b8 <SD_ioctl+0x98>
 800a54e:	a201      	add	r2, pc, #4	; (adr r2, 800a554 <SD_ioctl+0x34>)
 800a550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a554:	0800a565 	.word	0x0800a565
 800a558:	0800a56d 	.word	0x0800a56d
 800a55c:	0800a585 	.word	0x0800a585
 800a560:	0800a59f 	.word	0x0800a59f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a56a:	e028      	b.n	800a5be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a56c:	f107 030c 	add.w	r3, r7, #12
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff ff13 	bl	800a39c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a582:	e01c      	b.n	800a5be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a584:	f107 030c 	add.w	r3, r7, #12
 800a588:	4618      	mov	r0, r3
 800a58a:	f7ff ff07 	bl	800a39c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a590:	b29a      	uxth	r2, r3
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a59c:	e00f      	b.n	800a5be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a59e:	f107 030c 	add.w	r3, r7, #12
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7ff fefa 	bl	800a39c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	0a5a      	lsrs	r2, r3, #9
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a5b6:	e002      	b.n	800a5be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a5b8:	2304      	movs	r3, #4
 800a5ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a5be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3730      	adds	r7, #48	; 0x30
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000009 	.word	0x20000009

0800a5d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	4613      	mov	r3, r2
 800a5dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a5e6:	4b1f      	ldr	r3, [pc, #124]	; (800a664 <FATFS_LinkDriverEx+0x94>)
 800a5e8:	7a5b      	ldrb	r3, [r3, #9]
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d131      	bne.n	800a654 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a5f0:	4b1c      	ldr	r3, [pc, #112]	; (800a664 <FATFS_LinkDriverEx+0x94>)
 800a5f2:	7a5b      	ldrb	r3, [r3, #9]
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	4b1a      	ldr	r3, [pc, #104]	; (800a664 <FATFS_LinkDriverEx+0x94>)
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a5fe:	4b19      	ldr	r3, [pc, #100]	; (800a664 <FATFS_LinkDriverEx+0x94>)
 800a600:	7a5b      	ldrb	r3, [r3, #9]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	4a17      	ldr	r2, [pc, #92]	; (800a664 <FATFS_LinkDriverEx+0x94>)
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a60e:	4b15      	ldr	r3, [pc, #84]	; (800a664 <FATFS_LinkDriverEx+0x94>)
 800a610:	7a5b      	ldrb	r3, [r3, #9]
 800a612:	b2db      	uxtb	r3, r3
 800a614:	461a      	mov	r2, r3
 800a616:	4b13      	ldr	r3, [pc, #76]	; (800a664 <FATFS_LinkDriverEx+0x94>)
 800a618:	4413      	add	r3, r2
 800a61a:	79fa      	ldrb	r2, [r7, #7]
 800a61c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a61e:	4b11      	ldr	r3, [pc, #68]	; (800a664 <FATFS_LinkDriverEx+0x94>)
 800a620:	7a5b      	ldrb	r3, [r3, #9]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	b2d1      	uxtb	r1, r2
 800a628:	4a0e      	ldr	r2, [pc, #56]	; (800a664 <FATFS_LinkDriverEx+0x94>)
 800a62a:	7251      	strb	r1, [r2, #9]
 800a62c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a62e:	7dbb      	ldrb	r3, [r7, #22]
 800a630:	3330      	adds	r3, #48	; 0x30
 800a632:	b2da      	uxtb	r2, r3
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	3301      	adds	r3, #1
 800a63c:	223a      	movs	r2, #58	; 0x3a
 800a63e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	3302      	adds	r3, #2
 800a644:	222f      	movs	r2, #47	; 0x2f
 800a646:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	3303      	adds	r3, #3
 800a64c:	2200      	movs	r2, #0
 800a64e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a650:	2300      	movs	r3, #0
 800a652:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a654:	7dfb      	ldrb	r3, [r7, #23]
}
 800a656:	4618      	mov	r0, r3
 800a658:	371c      	adds	r7, #28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	200007a0 	.word	0x200007a0

0800a668 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a672:	2200      	movs	r2, #0
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7ff ffaa 	bl	800a5d0 <FATFS_LinkDriverEx>
 800a67c:	4603      	mov	r3, r0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
	...

0800a688 <__libc_init_array>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	4d0d      	ldr	r5, [pc, #52]	; (800a6c0 <__libc_init_array+0x38>)
 800a68c:	4c0d      	ldr	r4, [pc, #52]	; (800a6c4 <__libc_init_array+0x3c>)
 800a68e:	1b64      	subs	r4, r4, r5
 800a690:	10a4      	asrs	r4, r4, #2
 800a692:	2600      	movs	r6, #0
 800a694:	42a6      	cmp	r6, r4
 800a696:	d109      	bne.n	800a6ac <__libc_init_array+0x24>
 800a698:	4d0b      	ldr	r5, [pc, #44]	; (800a6c8 <__libc_init_array+0x40>)
 800a69a:	4c0c      	ldr	r4, [pc, #48]	; (800a6cc <__libc_init_array+0x44>)
 800a69c:	f000 f820 	bl	800a6e0 <_init>
 800a6a0:	1b64      	subs	r4, r4, r5
 800a6a2:	10a4      	asrs	r4, r4, #2
 800a6a4:	2600      	movs	r6, #0
 800a6a6:	42a6      	cmp	r6, r4
 800a6a8:	d105      	bne.n	800a6b6 <__libc_init_array+0x2e>
 800a6aa:	bd70      	pop	{r4, r5, r6, pc}
 800a6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b0:	4798      	blx	r3
 800a6b2:	3601      	adds	r6, #1
 800a6b4:	e7ee      	b.n	800a694 <__libc_init_array+0xc>
 800a6b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ba:	4798      	blx	r3
 800a6bc:	3601      	adds	r6, #1
 800a6be:	e7f2      	b.n	800a6a6 <__libc_init_array+0x1e>
 800a6c0:	0800a72c 	.word	0x0800a72c
 800a6c4:	0800a72c 	.word	0x0800a72c
 800a6c8:	0800a72c 	.word	0x0800a72c
 800a6cc:	0800a730 	.word	0x0800a730

0800a6d0 <memset>:
 800a6d0:	4402      	add	r2, r0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d100      	bne.n	800a6da <memset+0xa>
 800a6d8:	4770      	bx	lr
 800a6da:	f803 1b01 	strb.w	r1, [r3], #1
 800a6de:	e7f9      	b.n	800a6d4 <memset+0x4>

0800a6e0 <_init>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	bf00      	nop
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr

0800a6ec <_fini>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	bf00      	nop
 800a6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f2:	bc08      	pop	{r3}
 800a6f4:	469e      	mov	lr, r3
 800a6f6:	4770      	bx	lr
