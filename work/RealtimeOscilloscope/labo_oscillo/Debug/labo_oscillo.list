
labo_oscillo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007948  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd0  08007bd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007bd0  08007bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd8  08007bd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd8  08007bd8  00017bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bdc  08007bdc  00017bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000070  08007c50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  200003fc  08007c50  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ddd1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d1  00000000  00000000  0003de71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  00041548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  00042e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007e82  00000000  00000000  00044630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f0d4  00000000  00000000  0004c4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001037b8  00000000  00000000  0006b586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ed3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007354  00000000  00000000  0016ed90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b00 	.word	0x08007b00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007b00 	.word	0x08007b00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005b8:	f000 fec4 	bl	8001344 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f001 fc83 	bl	8001ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f824 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 fb64 	bl	8000c90 <MX_GPIO_Init>
  MX_ADC3_Init();
 80005c8:	f000 f890 	bl	80006ec <MX_ADC3_Init>
  MX_CRC_Init();
 80005cc:	f000 f8e0 	bl	8000790 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005d0:	f000 f900 	bl	80007d4 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005d4:	f000 fb0c 	bl	8000bf0 <MX_FMC_Init>
  MX_I2C3_Init();
 80005d8:	f000 f92e 	bl	8000838 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005dc:	f000 f96c 	bl	80008b8 <MX_LTDC_Init>
  MX_SPI2_Init();
 80005e0:	f000 f9ec 	bl	80009bc <MX_SPI2_Init>
  MX_TIM1_Init();
 80005e4:	f000 fa28 	bl	8000a38 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 fad2 	bl	8000b90 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_IT(&hadc3);
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <main+0x50>)
 80005ee:	f001 fcff 	bl	8001ff0 <HAL_ADC_Start_IT>
	  HAL_Delay(2000);
 80005f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005f6:	f001 fc93 	bl	8001f20 <HAL_Delay>
    /* USER CODE END WHILE */
	  printf("test");
 80005fa:	4803      	ldr	r0, [pc, #12]	; (8000608 <main+0x54>)
 80005fc:	f006 faf2 	bl	8006be4 <iprintf>
	  HAL_ADC_Start_IT(&hadc3);
 8000600:	e7f4      	b.n	80005ec <main+0x38>
 8000602:	bf00      	nop
 8000604:	2000008c 	.word	0x2000008c
 8000608:	08007b18 	.word	0x08007b18

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f006 fada 	bl	8006bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000630:	f003 fa92 	bl	8003b58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <SystemClock_Config+0xd8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <SystemClock_Config+0xd8>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xd8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <SystemClock_Config+0xdc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a25      	ldr	r2, [pc, #148]	; (80006e8 <SystemClock_Config+0xdc>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemClock_Config+0xdc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000678:	2319      	movs	r3, #25
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800067c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000686:	2309      	movs	r3, #9
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fac2 	bl	8003c18 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800069a:	f000 fe91 	bl	80013c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800069e:	f003 fa6b 	bl	8003b78 <HAL_PWREx_EnableOverDrive>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006a8:	f000 fe8a 	bl	80013c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2106      	movs	r1, #6
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fd48 	bl	8004160 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006d6:	f000 fe73 	bl	80013c0 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_ADC3_Init+0x98>)
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <MX_ADC3_Init+0x9c>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC3_Init+0x98>)
 8000706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800070a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC3_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC3_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC3_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_ADC3_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_ADC3_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_ADC3_Init+0x98>)
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <MX_ADC3_Init+0xa0>)
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC3_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_ADC3_Init+0x98>)
 800073a:	2201      	movs	r2, #1
 800073c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ADC3_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_ADC3_Init+0x98>)
 8000748:	2201      	movs	r2, #1
 800074a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_ADC3_Init+0x98>)
 800074e:	f001 fc0b 	bl	8001f68 <HAL_ADC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000758:	f000 fe32 	bl	80013c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800075c:	2304      	movs	r3, #4
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000760:	2301      	movs	r3, #1
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_ADC3_Init+0x98>)
 800076e:	f001 fd17 	bl	80021a0 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000778:	f000 fe22 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000008c 	.word	0x2000008c
 8000788:	40012200 	.word	0x40012200
 800078c:	0f000001 	.word	0x0f000001

08000790 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_CRC_Init+0x3c>)
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <MX_CRC_Init+0x40>)
 8000798:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_CRC_Init+0x3c>)
 800079c:	2200      	movs	r2, #0
 800079e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_CRC_Init+0x3c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_CRC_Init+0x3c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_CRC_Init+0x3c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_CRC_Init+0x3c>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_CRC_Init+0x3c>)
 80007ba:	f002 f89f 	bl	80028fc <HAL_CRC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007c4:	f000 fdfc 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000d4 	.word	0x200000d4
 80007d0:	40023000 	.word	0x40023000

080007d4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <MX_DMA2D_Init+0x60>)
 80007dc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_DMA2D_Init+0x5c>)
 8000804:	2200      	movs	r2, #0
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <MX_DMA2D_Init+0x5c>)
 800080a:	f002 f961 	bl	8002ad0 <HAL_DMA2D_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000814:	f000 fdd4 	bl	80013c0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000818:	2101      	movs	r1, #1
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_DMA2D_Init+0x5c>)
 800081c:	f002 fab2 	bl	8002d84 <HAL_DMA2D_ConfigLayer>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000826:	f000 fdcb 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000f8 	.word	0x200000f8
 8000834:	4002b000 	.word	0x4002b000

08000838 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_I2C3_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <MX_I2C3_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_I2C3_Init+0x74>)
 8000844:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <MX_I2C3_Init+0x7c>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_I2C3_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_I2C3_Init+0x74>)
 8000850:	2201      	movs	r2, #1
 8000852:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_I2C3_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_I2C3_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_I2C3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_I2C3_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <MX_I2C3_Init+0x74>)
 8000874:	f002 fcde 	bl	8003234 <HAL_I2C_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800087e:	f000 fd9f 	bl	80013c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_I2C3_Init+0x74>)
 8000886:	f002 fd65 	bl	8003354 <HAL_I2CEx_ConfigAnalogFilter>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000890:	f000 fd96 	bl	80013c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000894:	2100      	movs	r1, #0
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_I2C3_Init+0x74>)
 8000898:	f002 fda7 	bl	80033ea <HAL_I2CEx_ConfigDigitalFilter>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 fd8d 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000138 	.word	0x20000138
 80008b0:	40005c00 	.word	0x40005c00
 80008b4:	00c0eaff 	.word	0x00c0eaff

080008b8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2234      	movs	r2, #52	; 0x34
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f006 f985 	bl	8006bd4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008ca:	4b3a      	ldr	r3, [pc, #232]	; (80009b4 <MX_LTDC_Init+0xfc>)
 80008cc:	4a3a      	ldr	r2, [pc, #232]	; (80009b8 <MX_LTDC_Init+0x100>)
 80008ce:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008d0:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <MX_LTDC_Init+0xfc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008d6:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <MX_LTDC_Init+0xfc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008dc:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <MX_LTDC_Init+0xfc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <MX_LTDC_Init+0xfc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80008e8:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <MX_LTDC_Init+0xfc>)
 80008ea:	2228      	movs	r2, #40	; 0x28
 80008ec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80008ee:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <MX_LTDC_Init+0xfc>)
 80008f0:	2209      	movs	r2, #9
 80008f2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <MX_LTDC_Init+0xfc>)
 80008f6:	2235      	movs	r2, #53	; 0x35
 80008f8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80008fa:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MX_LTDC_Init+0xfc>)
 80008fc:	220b      	movs	r2, #11
 80008fe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000900:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <MX_LTDC_Init+0xfc>)
 8000902:	f240 2215 	movw	r2, #533	; 0x215
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <MX_LTDC_Init+0xfc>)
 800090a:	f240 121b 	movw	r2, #283	; 0x11b
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_LTDC_Init+0xfc>)
 8000912:	f240 2235 	movw	r2, #565	; 0x235
 8000916:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_LTDC_Init+0xfc>)
 800091a:	f240 121d 	movw	r2, #285	; 0x11d
 800091e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <MX_LTDC_Init+0xfc>)
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_LTDC_Init+0xfc>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_LTDC_Init+0xfc>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000938:	481e      	ldr	r0, [pc, #120]	; (80009b4 <MX_LTDC_Init+0xfc>)
 800093a:	f002 fda3 	bl	8003484 <HAL_LTDC_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000944:	f000 fd3c 	bl	80013c0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800094c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000950:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000956:	f44f 7388 	mov.w	r3, #272	; 0x110
 800095a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800095c:	2302      	movs	r3, #2
 800095e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000960:	23ff      	movs	r3, #255	; 0xff
 8000962:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000968:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800096c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800096e:	2307      	movs	r3, #7
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000972:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000978:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800097e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_LTDC_Init+0xfc>)
 800099e:	f002 ff03 	bl	80037a8 <HAL_LTDC_ConfigLayer>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80009a8:	f000 fd0a 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3738      	adds	r7, #56	; 0x38
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000184 	.word	0x20000184
 80009b8:	40016800 	.word	0x40016800

080009bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_SPI2_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_SPI2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI2_Init+0x74>)
 8000a0a:	2207      	movs	r2, #7
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_SPI2_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI2_Init+0x74>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_SPI2_Init+0x74>)
 8000a1c:	f004 f9dc 	bl	8004dd8 <HAL_SPI_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 fccb 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000022c 	.word	0x2000022c
 8000a34:	40003800 	.word	0x40003800

08000a38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09a      	sub	sp, #104	; 0x68
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	222c      	movs	r2, #44	; 0x2c
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f006 f8ae 	bl	8006bd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a78:	4b43      	ldr	r3, [pc, #268]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a7a:	4a44      	ldr	r2, [pc, #272]	; (8000b8c <MX_TIM1_Init+0x154>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a7e:	4b42      	ldr	r3, [pc, #264]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a8a:	4b3f      	ldr	r3, [pc, #252]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b3d      	ldr	r3, [pc, #244]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a98:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aa4:	4838      	ldr	r0, [pc, #224]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000aa6:	f004 fa42 	bl	8004f2e <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ab0:	f000 fc86 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4831      	ldr	r0, [pc, #196]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000ac2:	f004 fd97 	bl	80055f4 <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000acc:	f000 fc78 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad0:	482d      	ldr	r0, [pc, #180]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000ad2:	f004 fafb 	bl	80050cc <HAL_TIM_PWM_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000adc:	f000 fc70 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000af0:	4619      	mov	r1, r3
 8000af2:	4825      	ldr	r0, [pc, #148]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000af4:	f005 fa08 	bl	8005f08 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000afe:	f000 fc5f 	bl	80013c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	; 0x60
 8000b04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b22:	2200      	movs	r2, #0
 8000b24:	4619      	mov	r1, r3
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000b28:	f004 fc50 	bl	80053cc <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b32:	f000 fc45 	bl	80013c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000b6c:	f005 fa5a 	bl	8006024 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000b76:	f000 fc23 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000b7c:	f000 fece 	bl	800191c <HAL_TIM_MspPostInit>

}
 8000b80:	bf00      	nop
 8000b82:	3768      	adds	r7, #104	; 0x68
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000290 	.word	0x20000290
 8000b8c:	40010000 	.word	0x40010000

08000b90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000b96:	4a15      	ldr	r2, [pc, #84]	; (8000bec <MX_USART1_UART_Init+0x5c>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART1_UART_Init+0x58>)
 8000bd4:	f005 fac2 	bl	800615c <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bde:	f000 fbef 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200002dc 	.word	0x200002dc
 8000bec:	40011000 	.word	0x40011000

08000bf0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	615a      	str	r2, [r3, #20]
 8000c06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c0a:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <MX_FMC_Init+0x9c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c22:	2210      	movs	r2, #16
 8000c24:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c28:	2240      	movs	r2, #64	; 0x40
 8000c2a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c2e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c32:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c40:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c54:	2307      	movs	r3, #7
 8000c56:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c60:	2303      	movs	r3, #3
 8000c62:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_FMC_Init+0x98>)
 8000c72:	f004 f87d 	bl	8004d70 <HAL_SDRAM_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000c7c:	f000 fba0 	bl	80013c0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000360 	.word	0x20000360
 8000c8c:	a0000140 	.word	0xa0000140

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b090      	sub	sp, #64	; 0x40
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca6:	4bae      	ldr	r3, [pc, #696]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4aad      	ldr	r2, [pc, #692]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4bab      	ldr	r3, [pc, #684]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cbe:	4ba8      	ldr	r3, [pc, #672]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4aa7      	ldr	r2, [pc, #668]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4ba5      	ldr	r3, [pc, #660]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4ba2      	ldr	r3, [pc, #648]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4aa1      	ldr	r2, [pc, #644]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b9f      	ldr	r3, [pc, #636]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
 8000cec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	4b9c      	ldr	r3, [pc, #624]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a9b      	ldr	r2, [pc, #620]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b99      	ldr	r3, [pc, #612]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b96      	ldr	r3, [pc, #600]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a95      	ldr	r2, [pc, #596]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b93      	ldr	r3, [pc, #588]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	61bb      	str	r3, [r7, #24]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b90      	ldr	r3, [pc, #576]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a8f      	ldr	r2, [pc, #572]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b8d      	ldr	r3, [pc, #564]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d36:	4b8a      	ldr	r3, [pc, #552]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a89      	ldr	r2, [pc, #548]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b87      	ldr	r3, [pc, #540]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d4e:	4b84      	ldr	r3, [pc, #528]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a83      	ldr	r2, [pc, #524]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b81      	ldr	r3, [pc, #516]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d66:	4b7e      	ldr	r3, [pc, #504]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a7d      	ldr	r2, [pc, #500]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b7b      	ldr	r3, [pc, #492]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d7e:	4b78      	ldr	r3, [pc, #480]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a77      	ldr	r2, [pc, #476]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d84:	f043 0320 	orr.w	r3, r3, #32
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b75      	ldr	r3, [pc, #468]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0320 	and.w	r3, r3, #32
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d96:	4b72      	ldr	r3, [pc, #456]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a71      	ldr	r2, [pc, #452]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b6f      	ldr	r3, [pc, #444]	; (8000f60 <MX_GPIO_Init+0x2d0>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2120      	movs	r1, #32
 8000db2:	486c      	ldr	r0, [pc, #432]	; (8000f64 <MX_GPIO_Init+0x2d4>)
 8000db4:	f002 fa24 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	210c      	movs	r1, #12
 8000dbc:	486a      	ldr	r0, [pc, #424]	; (8000f68 <MX_GPIO_Init+0x2d8>)
 8000dbe:	f002 fa1f 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	4869      	ldr	r0, [pc, #420]	; (8000f6c <MX_GPIO_Init+0x2dc>)
 8000dc8:	f002 fa1a 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd2:	4865      	ldr	r0, [pc, #404]	; (8000f68 <MX_GPIO_Init+0x2d8>)
 8000dd4:	f002 fa14 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dde:	4864      	ldr	r0, [pc, #400]	; (8000f70 <MX_GPIO_Init+0x2e0>)
 8000de0:	f002 fa0e 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	21c8      	movs	r1, #200	; 0xc8
 8000de8:	4862      	ldr	r0, [pc, #392]	; (8000f74 <MX_GPIO_Init+0x2e4>)
 8000dea:	f002 fa09 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000dee:	2308      	movs	r3, #8
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfe:	4619      	mov	r1, r3
 8000e00:	485d      	ldr	r0, [pc, #372]	; (8000f78 <MX_GPIO_Init+0x2e8>)
 8000e02:	f002 f851 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000e06:	2304      	movs	r3, #4
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e16:	2309      	movs	r3, #9
 8000e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4855      	ldr	r0, [pc, #340]	; (8000f78 <MX_GPIO_Init+0x2e8>)
 8000e22:	f002 f841 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000e26:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e38:	230b      	movs	r3, #11
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e40:	4619      	mov	r1, r3
 8000e42:	484c      	ldr	r0, [pc, #304]	; (8000f74 <MX_GPIO_Init+0x2e4>)
 8000e44:	f002 f830 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000e48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4e:	2312      	movs	r3, #18
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	4845      	ldr	r0, [pc, #276]	; (8000f7c <MX_GPIO_Init+0x2ec>)
 8000e66:	f002 f81f 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000e6a:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	483d      	ldr	r0, [pc, #244]	; (8000f7c <MX_GPIO_Init+0x2ec>)
 8000e88:	f002 f80e 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4835      	ldr	r0, [pc, #212]	; (8000f7c <MX_GPIO_Init+0x2ec>)
 8000ea8:	f001 fffe 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4827      	ldr	r0, [pc, #156]	; (8000f64 <MX_GPIO_Init+0x2d4>)
 8000ec8:	f001 ffee 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000ecc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ede:	230c      	movs	r3, #12
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4825      	ldr	r0, [pc, #148]	; (8000f80 <MX_GPIO_Init+0x2f0>)
 8000eea:	f001 ffdd 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f00:	2301      	movs	r3, #1
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481e      	ldr	r0, [pc, #120]	; (8000f84 <MX_GPIO_Init+0x2f4>)
 8000f0c:	f001 ffcc 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000f10:	2360      	movs	r3, #96	; 0x60
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f20:	230d      	movs	r3, #13
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4813      	ldr	r0, [pc, #76]	; (8000f78 <MX_GPIO_Init+0x2e8>)
 8000f2c:	f001 ffbc 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000f30:	2340      	movs	r3, #64	; 0x40
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f40:	230a      	movs	r3, #10
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_GPIO_Init+0x2ec>)
 8000f4c:	f001 ffac 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e014      	b.n	8000f88 <MX_GPIO_Init+0x2f8>
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020c00 	.word	0x40020c00
 8000f68:	40022000 	.word	0x40022000
 8000f6c:	40022800 	.word	0x40022800
 8000f70:	40021c00 	.word	0x40021c00
 8000f74:	40021800 	.word	0x40021800
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	48bb      	ldr	r0, [pc, #748]	; (8001280 <MX_GPIO_Init+0x5f0>)
 8000f92:	f001 ff89 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f96:	2340      	movs	r3, #64	; 0x40
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f9a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	48b6      	ldr	r0, [pc, #728]	; (8001284 <MX_GPIO_Init+0x5f4>)
 8000fac:	f001 ff7c 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000fb0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	48ae      	ldr	r0, [pc, #696]	; (8001288 <MX_GPIO_Init+0x5f8>)
 8000fce:	f001 ff6b 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000fd2:	23f0      	movs	r3, #240	; 0xf0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fea:	4619      	mov	r1, r3
 8000fec:	48a7      	ldr	r0, [pc, #668]	; (800128c <MX_GPIO_Init+0x5fc>)
 8000fee:	f001 ff5b 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001004:	230a      	movs	r3, #10
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100c:	4619      	mov	r1, r3
 800100e:	48a0      	ldr	r0, [pc, #640]	; (8001290 <MX_GPIO_Init+0x600>)
 8001010:	f001 ff4a 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001014:	2320      	movs	r3, #32
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001028:	4619      	mov	r1, r3
 800102a:	4896      	ldr	r0, [pc, #600]	; (8001284 <MX_GPIO_Init+0x5f4>)
 800102c:	f001 ff3c 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001030:	2308      	movs	r3, #8
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001040:	230d      	movs	r3, #13
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001048:	4619      	mov	r1, r3
 800104a:	488e      	ldr	r0, [pc, #568]	; (8001284 <MX_GPIO_Init+0x5f4>)
 800104c:	f001 ff2c 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001050:	f241 030c 	movw	r3, #4108	; 0x100c
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001066:	4619      	mov	r1, r3
 8001068:	4888      	ldr	r0, [pc, #544]	; (800128c <MX_GPIO_Init+0x5fc>)
 800106a:	f001 ff1d 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800106e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001080:	4619      	mov	r1, r3
 8001082:	4884      	ldr	r0, [pc, #528]	; (8001294 <MX_GPIO_Init+0x604>)
 8001084:	f001 ff10 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001088:	2308      	movs	r3, #8
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109c:	4619      	mov	r1, r3
 800109e:	487e      	ldr	r0, [pc, #504]	; (8001298 <MX_GPIO_Init+0x608>)
 80010a0:	f001 ff02 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80010a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010b6:	230d      	movs	r3, #13
 80010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010be:	4619      	mov	r1, r3
 80010c0:	4873      	ldr	r0, [pc, #460]	; (8001290 <MX_GPIO_Init+0x600>)
 80010c2:	f001 fef1 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010c6:	2310      	movs	r3, #16
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d6:	4619      	mov	r1, r3
 80010d8:	486a      	ldr	r0, [pc, #424]	; (8001284 <MX_GPIO_Init+0x5f4>)
 80010da:	f001 fee5 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80010de:	2304      	movs	r3, #4
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010ee:	230c      	movs	r3, #12
 80010f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f6:	4619      	mov	r1, r3
 80010f8:	4862      	ldr	r0, [pc, #392]	; (8001284 <MX_GPIO_Init+0x5f4>)
 80010fa:	f001 fed5 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80010fe:	f248 0304 	movw	r3, #32772	; 0x8004
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800110c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001110:	4619      	mov	r1, r3
 8001112:	4862      	ldr	r0, [pc, #392]	; (800129c <MX_GPIO_Init+0x60c>)
 8001114:	f001 fec8 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112e:	4619      	mov	r1, r3
 8001130:	485a      	ldr	r0, [pc, #360]	; (800129c <MX_GPIO_Init+0x60c>)
 8001132:	f001 feb9 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001136:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001148:	230d      	movs	r3, #13
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800114c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001150:	4619      	mov	r1, r3
 8001152:	4852      	ldr	r0, [pc, #328]	; (800129c <MX_GPIO_Init+0x60c>)
 8001154:	f001 fea8 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001158:	2301      	movs	r3, #1
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001168:	2302      	movs	r3, #2
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	4846      	ldr	r0, [pc, #280]	; (800128c <MX_GPIO_Init+0x5fc>)
 8001174:	f001 fe98 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800117e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800118c:	4619      	mov	r1, r3
 800118e:	483f      	ldr	r0, [pc, #252]	; (800128c <MX_GPIO_Init+0x5fc>)
 8001190:	f001 fe8a 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001194:	23c0      	movs	r3, #192	; 0xc0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011a4:	2308      	movs	r3, #8
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ac:	4619      	mov	r1, r3
 80011ae:	4839      	ldr	r0, [pc, #228]	; (8001294 <MX_GPIO_Init+0x604>)
 80011b0:	f001 fe7a 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80011b4:	2310      	movs	r3, #16
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011c4:	230a      	movs	r3, #10
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011cc:	4619      	mov	r1, r3
 80011ce:	4833      	ldr	r0, [pc, #204]	; (800129c <MX_GPIO_Init+0x60c>)
 80011d0:	f001 fe6a 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80011d4:	23c8      	movs	r3, #200	; 0xc8
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e8:	4619      	mov	r1, r3
 80011ea:	4829      	ldr	r0, [pc, #164]	; (8001290 <MX_GPIO_Init+0x600>)
 80011ec:	f001 fe5c 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80011f0:	2305      	movs	r3, #5
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001200:	230a      	movs	r3, #10
 8001202:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001208:	4619      	mov	r1, r3
 800120a:	4822      	ldr	r0, [pc, #136]	; (8001294 <MX_GPIO_Init+0x604>)
 800120c:	f001 fe4c 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001210:	2332      	movs	r3, #50	; 0x32
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001220:	230b      	movs	r3, #11
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001228:	4619      	mov	r1, r3
 800122a:	481a      	ldr	r0, [pc, #104]	; (8001294 <MX_GPIO_Init+0x604>)
 800122c:	f001 fe3c 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001230:	2304      	movs	r3, #4
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001240:	2309      	movs	r3, #9
 8001242:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001248:	4619      	mov	r1, r3
 800124a:	4815      	ldr	r0, [pc, #84]	; (80012a0 <MX_GPIO_Init+0x610>)
 800124c:	f001 fe2c 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001250:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001262:	2309      	movs	r3, #9
 8001264:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_GPIO_Init+0x5f4>)
 800126e:	f001 fe1b 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001272:	2304      	movs	r3, #4
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001276:	2300      	movs	r3, #0
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
 800127e:	e011      	b.n	80012a4 <MX_GPIO_Init+0x614>
 8001280:	40022400 	.word	0x40022400
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40020000 	.word	0x40020000
 800128c:	40022000 	.word	0x40022000
 8001290:	40021800 	.word	0x40021800
 8001294:	40020800 	.word	0x40020800
 8001298:	40022800 	.word	0x40022800
 800129c:	40021c00 	.word	0x40021c00
 80012a0:	40020400 	.word	0x40020400
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a8:	4619      	mov	r1, r3
 80012aa:	4823      	ldr	r0, [pc, #140]	; (8001338 <MX_GPIO_Init+0x6a8>)
 80012ac:	f001 fdfc 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012b0:	2386      	movs	r3, #134	; 0x86
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c0:	230b      	movs	r3, #11
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c8:	4619      	mov	r1, r3
 80012ca:	481c      	ldr	r0, [pc, #112]	; (800133c <MX_GPIO_Init+0x6ac>)
 80012cc:	f001 fdec 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012d0:	2350      	movs	r3, #80	; 0x50
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012e0:	230d      	movs	r3, #13
 80012e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e8:	4619      	mov	r1, r3
 80012ea:	4814      	ldr	r0, [pc, #80]	; (800133c <MX_GPIO_Init+0x6ac>)
 80012ec:	f001 fddc 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80012f0:	2328      	movs	r3, #40	; 0x28
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001300:	230a      	movs	r3, #10
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001308:	4619      	mov	r1, r3
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_GPIO_Init+0x6ac>)
 800130c:	f001 fdcc 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001320:	2309      	movs	r3, #9
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_GPIO_Init+0x6b0>)
 800132c:	f001 fdbc 	bl	8002ea8 <HAL_GPIO_Init>

}
 8001330:	bf00      	nop
 8001332:	3740      	adds	r7, #64	; 0x40
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021800 	.word	0x40021800
 800133c:	40020000 	.word	0x40020000
 8001340:	40021c00 	.word	0x40021c00

08001344 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800134a:	463b      	mov	r3, r7
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001356:	f001 fa55 	bl	8002804 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800135a:	2301      	movs	r3, #1
 800135c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800135e:	2300      	movs	r3, #0
 8001360:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001366:	231f      	movs	r3, #31
 8001368:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800136a:	2387      	movs	r3, #135	; 0x87
 800136c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800136e:	2300      	movs	r3, #0
 8001370:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001372:	2300      	movs	r3, #0
 8001374:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001376:	2301      	movs	r3, #1
 8001378:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800137a:	2301      	movs	r3, #1
 800137c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001386:	463b      	mov	r3, r7
 8001388:	4618      	mov	r0, r3
 800138a:	f001 fa73 	bl	8002874 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800138e:	2004      	movs	r0, #4
 8001390:	f001 fa50 	bl	8002834 <HAL_MPU_Enable>

}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ae:	f000 fd97 	bl	8001ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40001000 	.word	0x40001000

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
	...

080013cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_MspInit+0x44>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_MspInit+0x44>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_MspInit+0x44>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_MspInit+0x44>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_MspInit+0x44>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_MspInit+0x44>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <HAL_ADC_MspInit+0xa4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d13c      	bne.n	80014b0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_ADC_MspInit+0xa8>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a20      	ldr	r2, [pc, #128]	; (80014bc <HAL_ADC_MspInit+0xa8>)
 800143c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_ADC_MspInit+0xa8>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_ADC_MspInit+0xa8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <HAL_ADC_MspInit+0xa8>)
 8001454:	f043 0320 	orr.w	r3, r3, #32
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_ADC_MspInit+0xa8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0320 	and.w	r3, r3, #32
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_ADC_MspInit+0xa8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_ADC_MspInit+0xa8>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_ADC_MspInit+0xa8>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800147e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001482:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001484:	2303      	movs	r3, #3
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	480b      	ldr	r0, [pc, #44]	; (80014c0 <HAL_ADC_MspInit+0xac>)
 8001494:	f001 fd08 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001498:	2301      	movs	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149c:	2303      	movs	r3, #3
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <HAL_ADC_MspInit+0xb0>)
 80014ac:	f001 fcfc 	bl	8002ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	; 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40012200 	.word	0x40012200
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40021400 	.word	0x40021400
 80014c4:	40020000 	.word	0x40020000

080014c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_CRC_MspInit+0x38>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d10b      	bne.n	80014f2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_CRC_MspInit+0x3c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a09      	ldr	r2, [pc, #36]	; (8001504 <HAL_CRC_MspInit+0x3c>)
 80014e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <HAL_CRC_MspInit+0x3c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023000 	.word	0x40023000
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <HAL_DMA2D_MspInit+0x44>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d113      	bne.n	8001542 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_DMA2D_MspInit+0x48>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_DMA2D_MspInit+0x48>)
 8001520:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_DMA2D_MspInit+0x48>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	205a      	movs	r0, #90	; 0x5a
 8001538:	f001 f93a 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800153c:	205a      	movs	r0, #90	; 0x5a
 800153e:	f001 f953 	bl	80027e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	4002b000 	.word	0x4002b000
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0aa      	sub	sp, #168	; 0xa8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	2284      	movs	r2, #132	; 0x84
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f005 fb2d 	bl	8006bd4 <memset>
  if(hi2c->Instance==I2C3)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a22      	ldr	r2, [pc, #136]	; (8001608 <HAL_I2C_MspInit+0xb4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d13c      	bne.n	80015fe <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001588:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800158a:	2300      	movs	r3, #0
 800158c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fffc 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800159e:	f7ff ff0f 	bl	80013c0 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_I2C_MspInit+0xb8>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_I2C_MspInit+0xb8>)
 80015a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_I2C_MspInit+0xb8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80015ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c2:	2312      	movs	r3, #18
 80015c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015d4:	2304      	movs	r3, #4
 80015d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015de:	4619      	mov	r1, r3
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <HAL_I2C_MspInit+0xbc>)
 80015e2:	f001 fc61 	bl	8002ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_I2C_MspInit+0xb8>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_I2C_MspInit+0xb8>)
 80015ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_I2C_MspInit+0xb8>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	37a8      	adds	r7, #168	; 0xa8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40005c00 	.word	0x40005c00
 800160c:	40023800 	.word	0x40023800
 8001610:	40021c00 	.word	0x40021c00

08001614 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0ae      	sub	sp, #184	; 0xb8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	2284      	movs	r2, #132	; 0x84
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f005 facd 	bl	8006bd4 <memset>
  if(hltdc->Instance==LTDC)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6f      	ldr	r2, [pc, #444]	; (80017fc <HAL_LTDC_MspInit+0x1e8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	f040 80d6 	bne.w	80017f2 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001646:	2308      	movs	r3, #8
 8001648:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800164a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001650:	2305      	movs	r3, #5
 8001652:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001654:	2302      	movs	r3, #2
 8001656:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001658:	2303      	movs	r3, #3
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800165c:	2301      	movs	r3, #1
 800165e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001664:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	4618      	mov	r0, r3
 800166c:	f002 ff90 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8001676:	f7ff fea3 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800167a:	4b61      	ldr	r3, [pc, #388]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a60      	ldr	r2, [pc, #384]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 8001680:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b5e      	ldr	r3, [pc, #376]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001692:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a5a      	ldr	r2, [pc, #360]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 8001698:	f043 0310 	orr.w	r3, r3, #16
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b58      	ldr	r3, [pc, #352]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016aa:	4b55      	ldr	r3, [pc, #340]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a54      	ldr	r2, [pc, #336]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b52      	ldr	r3, [pc, #328]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80016c2:	4b4f      	ldr	r3, [pc, #316]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a4e      	ldr	r2, [pc, #312]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016da:	4b49      	ldr	r3, [pc, #292]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a48      	ldr	r2, [pc, #288]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b46      	ldr	r3, [pc, #280]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80016f2:	4b43      	ldr	r3, [pc, #268]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a42      	ldr	r2, [pc, #264]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b40      	ldr	r3, [pc, #256]	; (8001800 <HAL_LTDC_MspInit+0x1ec>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800170a:	2310      	movs	r3, #16
 800170c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001722:	230e      	movs	r3, #14
 8001724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800172c:	4619      	mov	r1, r3
 800172e:	4835      	ldr	r0, [pc, #212]	; (8001804 <HAL_LTDC_MspInit+0x1f0>)
 8001730:	f001 fbba 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001734:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800174e:	230e      	movs	r3, #14
 8001750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001754:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001758:	4619      	mov	r1, r3
 800175a:	482b      	ldr	r0, [pc, #172]	; (8001808 <HAL_LTDC_MspInit+0x1f4>)
 800175c:	f001 fba4 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001760:	23f7      	movs	r3, #247	; 0xf7
 8001762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001778:	230e      	movs	r3, #14
 800177a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800177e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001782:	4619      	mov	r1, r3
 8001784:	4821      	ldr	r0, [pc, #132]	; (800180c <HAL_LTDC_MspInit+0x1f8>)
 8001786:	f001 fb8f 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800178a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017a4:	2309      	movs	r3, #9
 80017a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4817      	ldr	r0, [pc, #92]	; (8001810 <HAL_LTDC_MspInit+0x1fc>)
 80017b2:	f001 fb79 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80017b6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80017ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017d0:	230e      	movs	r3, #14
 80017d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017da:	4619      	mov	r1, r3
 80017dc:	480d      	ldr	r0, [pc, #52]	; (8001814 <HAL_LTDC_MspInit+0x200>)
 80017de:	f001 fb63 	bl	8002ea8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2058      	movs	r0, #88	; 0x58
 80017e8:	f000 ffe2 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80017ec:	2058      	movs	r0, #88	; 0x58
 80017ee:	f000 fffb 	bl	80027e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	37b8      	adds	r7, #184	; 0xb8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40016800 	.word	0x40016800
 8001800:	40023800 	.word	0x40023800
 8001804:	40021000 	.word	0x40021000
 8001808:	40022400 	.word	0x40022400
 800180c:	40022800 	.word	0x40022800
 8001810:	40021800 	.word	0x40021800
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a25      	ldr	r2, [pc, #148]	; (80018cc <HAL_SPI_MspInit+0xb4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d144      	bne.n	80018c4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800183a:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_SPI_MspInit+0xb8>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a24      	ldr	r2, [pc, #144]	; (80018d0 <HAL_SPI_MspInit+0xb8>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_SPI_MspInit+0xb8>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <HAL_SPI_MspInit+0xb8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <HAL_SPI_MspInit+0xb8>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <HAL_SPI_MspInit+0xb8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_SPI_MspInit+0xb8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <HAL_SPI_MspInit+0xb8>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_SPI_MspInit+0xb8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001882:	2302      	movs	r3, #2
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001892:	2305      	movs	r3, #5
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <HAL_SPI_MspInit+0xbc>)
 800189e:	f001 fb03 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80018a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b4:	2305      	movs	r3, #5
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <HAL_SPI_MspInit+0xc0>)
 80018c0:	f001 faf2 	bl	8002ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40003800 	.word	0x40003800
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40022000 	.word	0x40022000
 80018d8:	40020400 	.word	0x40020400

080018dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_TIM_Base_MspInit+0x38>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10b      	bne.n	8001906 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_TIM_Base_MspInit+0x3c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_TIM_Base_MspInit+0x3c>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_TIM_Base_MspInit+0x3c>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40010000 	.word	0x40010000
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_TIM_MspPostInit+0x64>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d11c      	bne.n	8001978 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_TIM_MspPostInit+0x68>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_TIM_MspPostInit+0x68>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_TIM_MspPostInit+0x68>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <HAL_TIM_MspPostInit+0x6c>)
 8001974:	f001 fa98 	bl	8002ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40010000 	.word	0x40010000
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000

0800198c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b0ac      	sub	sp, #176	; 0xb0
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	2284      	movs	r2, #132	; 0x84
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f005 f911 	bl	8006bd4 <memset>
  if(huart->Instance==USART1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a32      	ldr	r2, [pc, #200]	; (8001a80 <HAL_UART_MspInit+0xf4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d15c      	bne.n	8001a76 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019bc:	2340      	movs	r3, #64	; 0x40
 80019be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019c0:	2300      	movs	r3, #0
 80019c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c4:	f107 0318 	add.w	r3, r7, #24
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 fde1 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019d4:	f7ff fcf4 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <HAL_UART_MspInit+0xf8>)
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <HAL_UART_MspInit+0xf8>)
 80019de:	f043 0310 	orr.w	r3, r3, #16
 80019e2:	6453      	str	r3, [r2, #68]	; 0x44
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_UART_MspInit+0xf8>)
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_UART_MspInit+0xf8>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4a23      	ldr	r2, [pc, #140]	; (8001a84 <HAL_UART_MspInit+0xf8>)
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	6313      	str	r3, [r2, #48]	; 0x30
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <HAL_UART_MspInit+0xf8>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <HAL_UART_MspInit+0xf8>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_UART_MspInit+0xf8>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6313      	str	r3, [r2, #48]	; 0x30
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_UART_MspInit+0xf8>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a38:	2307      	movs	r3, #7
 8001a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a42:	4619      	mov	r1, r3
 8001a44:	4810      	ldr	r0, [pc, #64]	; (8001a88 <HAL_UART_MspInit+0xfc>)
 8001a46:	f001 fa2f 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a64:	2307      	movs	r3, #7
 8001a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4806      	ldr	r0, [pc, #24]	; (8001a8c <HAL_UART_MspInit+0x100>)
 8001a72:	f001 fa19 	bl	8002ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a76:	bf00      	nop
 8001a78:	37b0      	adds	r7, #176	; 0xb0
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40011000 	.word	0x40011000
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40020000 	.word	0x40020000

08001a90 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001aa4:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <HAL_FMC_MspInit+0x100>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d16d      	bne.n	8001b88 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001aac:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_FMC_MspInit+0x100>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ab2:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <HAL_FMC_MspInit+0x104>)
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	4a37      	ldr	r2, [pc, #220]	; (8001b94 <HAL_FMC_MspInit+0x104>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6393      	str	r3, [r2, #56]	; 0x38
 8001abe:	4b35      	ldr	r3, [pc, #212]	; (8001b94 <HAL_FMC_MspInit+0x104>)
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001aca:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001ace:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001adc:	230c      	movs	r3, #12
 8001ade:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	482c      	ldr	r0, [pc, #176]	; (8001b98 <HAL_FMC_MspInit+0x108>)
 8001ae6:	f001 f9df 	bl	8002ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001aea:	f248 1333 	movw	r3, #33075	; 0x8133
 8001aee:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001afc:	230c      	movs	r3, #12
 8001afe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	4825      	ldr	r0, [pc, #148]	; (8001b9c <HAL_FMC_MspInit+0x10c>)
 8001b06:	f001 f9cf 	bl	8002ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001b0a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001b0e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b1c:	230c      	movs	r3, #12
 8001b1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	481e      	ldr	r0, [pc, #120]	; (8001ba0 <HAL_FMC_MspInit+0x110>)
 8001b26:	f001 f9bf 	bl	8002ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001b2a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001b2e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <HAL_FMC_MspInit+0x114>)
 8001b46:	f001 f9af 	bl	8002ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001b4a:	2328      	movs	r3, #40	; 0x28
 8001b4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4811      	ldr	r0, [pc, #68]	; (8001ba8 <HAL_FMC_MspInit+0x118>)
 8001b64:	f001 f9a0 	bl	8002ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b78:	230c      	movs	r3, #12
 8001b7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <HAL_FMC_MspInit+0x11c>)
 8001b82:	f001 f991 	bl	8002ea8 <HAL_GPIO_Init>
 8001b86:	e000      	b.n	8001b8a <HAL_FMC_MspInit+0xfa>
    return;
 8001b88:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000394 	.word	0x20000394
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	40021400 	.word	0x40021400
 8001ba8:	40021c00 	.word	0x40021c00
 8001bac:	40020800 	.word	0x40020800

08001bb0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001bb8:	f7ff ff6a 	bl	8001a90 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	2036      	movs	r0, #54	; 0x36
 8001bda:	f000 fde9 	bl	80027b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bde:	2036      	movs	r0, #54	; 0x36
 8001be0:	f000 fe02 	bl	80027e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <HAL_InitTick+0xa0>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_InitTick+0xa0>)
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_InitTick+0xa0>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bfc:	f107 0210 	add.w	r2, r7, #16
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 fc90 	bl	800452c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c0c:	f002 fc66 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8001c10:	4603      	mov	r3, r0
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <HAL_InitTick+0xa4>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	0c9b      	lsrs	r3, r3, #18
 8001c20:	3b01      	subs	r3, #1
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_InitTick+0xa8>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <HAL_InitTick+0xac>)
 8001c28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_InitTick+0xa8>)
 8001c2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c32:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <HAL_InitTick+0xa8>)
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_InitTick+0xa8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_InitTick+0xa8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c44:	4809      	ldr	r0, [pc, #36]	; (8001c6c <HAL_InitTick+0xa8>)
 8001c46:	f003 f972 	bl	8004f2e <HAL_TIM_Base_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d104      	bne.n	8001c5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c50:	4806      	ldr	r0, [pc, #24]	; (8001c6c <HAL_InitTick+0xa8>)
 8001c52:	f003 f9c3 	bl	8004fdc <HAL_TIM_Base_Start_IT>
 8001c56:	4603      	mov	r3, r0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3730      	adds	r7, #48	; 0x30
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	431bde83 	.word	0x431bde83
 8001c6c:	20000398 	.word	0x20000398
 8001c70:	40001000 	.word	0x40001000

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <NMI_Handler+0x4>

08001c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <HardFault_Handler+0x4>

08001c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <MemManage_Handler+0x4>

08001c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <BusFault_Handler+0x4>

08001c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <UsageFault_Handler+0x4>

08001c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <TIM6_DAC_IRQHandler+0x10>)
 8001cd2:	f003 fa5c 	bl	800518e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000398 	.word	0x20000398

08001ce0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <LTDC_IRQHandler+0x10>)
 8001ce6:	f001 fc9d 	bl	8003624 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000184 	.word	0x20000184

08001cf4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <DMA2D_IRQHandler+0x10>)
 8001cfa:	f000 ff33 	bl	8002b64 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200000f8 	.word	0x200000f8

08001d08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e00a      	b.n	8001d30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d1a:	f3af 8000 	nop.w
 8001d1e:	4601      	mov	r1, r0
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	60ba      	str	r2, [r7, #8]
 8001d26:	b2ca      	uxtb	r2, r1
 8001d28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbf0      	blt.n	8001d1a <_read+0x12>
	}

return len;
 8001d38:	687b      	ldr	r3, [r7, #4]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e009      	b.n	8001d68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	60ba      	str	r2, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbf1      	blt.n	8001d54 <_write+0x12>
	}
	return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_close>:

int _close(int file)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
	return -1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da2:	605a      	str	r2, [r3, #4]
	return 0;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <_isatty>:

int _isatty(int file)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	return 1;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
	return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dec:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <_sbrk+0x5c>)
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <_sbrk+0x60>)
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <_sbrk+0x64>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <_sbrk+0x68>)
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d207      	bcs.n	8001e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e14:	f004 feb4 	bl	8006b80 <__errno>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	e009      	b.n	8001e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <_sbrk+0x64>)
 8001e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e36:	68fb      	ldr	r3, [r7, #12]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20050000 	.word	0x20050000
 8001e44:	00001000 	.word	0x00001000
 8001e48:	200003e4 	.word	0x200003e4
 8001e4c:	20000400 	.word	0x20000400

08001e50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <SystemInit+0x20>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <SystemInit+0x20>)
 8001e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e78:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e7a:	490e      	ldr	r1, [pc, #56]	; (8001eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e7c:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e80:	e002      	b.n	8001e88 <LoopCopyDataInit>

08001e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e86:	3304      	adds	r3, #4

08001e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e8c:	d3f9      	bcc.n	8001e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e90:	4c0b      	ldr	r4, [pc, #44]	; (8001ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e94:	e001      	b.n	8001e9a <LoopFillZerobss>

08001e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e98:	3204      	adds	r2, #4

08001e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e9c:	d3fb      	bcc.n	8001e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e9e:	f7ff ffd7 	bl	8001e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea2:	f004 fe73 	bl	8006b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ea6:	f7fe fb85 	bl	80005b4 <main>
  bx  lr    
 8001eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001eb8:	08007be0 	.word	0x08007be0
  ldr r2, =_sbss
 8001ebc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ec0:	200003fc 	.word	0x200003fc

08001ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec4:	e7fe      	b.n	8001ec4 <ADC_IRQHandler>

08001ec6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eca:	2003      	movs	r0, #3
 8001ecc:	f000 fc65 	bl	800279a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed0:	200f      	movs	r0, #15
 8001ed2:	f7ff fe77 	bl	8001bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed6:	f7ff fa79 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x20>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x24>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_IncTick+0x24>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000008 	.word	0x20000008
 8001f04:	200003e8 	.word	0x200003e8

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	200003e8 	.word	0x200003e8

08001f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff ffee 	bl	8001f08 <HAL_GetTick>
 8001f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d005      	beq.n	8001f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_Delay+0x44>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f46:	bf00      	nop
 8001f48:	f7ff ffde 	bl	8001f08 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d8f7      	bhi.n	8001f48 <HAL_Delay+0x28>
  {
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000008 	.word	0x20000008

08001f68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e031      	b.n	8001fe2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fa44 	bl	8001414 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d116      	bne.n	8001fd4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_ADC_Init+0x84>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	f043 0202 	orr.w	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fa48 	bl	800244c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fd2:	e001      	b.n	8001fd8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	ffffeefd 	.word	0xffffeefd

08001ff0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_ADC_Start_IT+0x1a>
 8002006:	2302      	movs	r3, #2
 8002008:	e0b5      	b.n	8002176 <HAL_ADC_Start_IT+0x186>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d018      	beq.n	8002052 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002030:	4b54      	ldr	r3, [pc, #336]	; (8002184 <HAL_ADC_Start_IT+0x194>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a54      	ldr	r2, [pc, #336]	; (8002188 <HAL_ADC_Start_IT+0x198>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9a      	lsrs	r2, r3, #18
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002044:	e002      	b.n	800204c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3b01      	subs	r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f9      	bne.n	8002046 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d17d      	bne.n	800215c <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002064:	4b49      	ldr	r3, [pc, #292]	; (800218c <HAL_ADC_Start_IT+0x19c>)
 8002066:	4013      	ands	r3, r2
 8002068:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002086:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800209a:	d106      	bne.n	80020aa <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f023 0206 	bic.w	r2, r3, #6
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	645a      	str	r2, [r3, #68]	; 0x44
 80020a8:	e002      	b.n	80020b0 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020c0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b30      	ldr	r3, [pc, #192]	; (8002190 <HAL_ADC_Start_IT+0x1a0>)
 80020ce:	430b      	orrs	r3, r1
 80020d0:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <HAL_ADC_Start_IT+0x1a4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10f      	bne.n	80020fe <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d143      	bne.n	8002174 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	e03a      	b.n	8002174 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a25      	ldr	r2, [pc, #148]	; (8002198 <HAL_ADC_Start_IT+0x1a8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d10e      	bne.n	8002126 <HAL_ADC_Start_IT+0x136>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d107      	bne.n	8002126 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002124:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_ADC_Start_IT+0x1a4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	d120      	bne.n	8002174 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a19      	ldr	r2, [pc, #100]	; (800219c <HAL_ADC_Start_IT+0x1ac>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d11b      	bne.n	8002174 <HAL_ADC_Start_IT+0x184>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d114      	bne.n	8002174 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	e00b      	b.n	8002174 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f043 0210 	orr.w	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000000 	.word	0x20000000
 8002188:	431bde83 	.word	0x431bde83
 800218c:	fffff8fe 	.word	0xfffff8fe
 8002190:	04000020 	.word	0x04000020
 8002194:	40012300 	.word	0x40012300
 8002198:	40012000 	.word	0x40012000
 800219c:	40012200 	.word	0x40012200

080021a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1c>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e136      	b.n	800242a <HAL_ADC_ConfigChannel+0x28a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b09      	cmp	r3, #9
 80021ca:	d93a      	bls.n	8002242 <HAL_ADC_ConfigChannel+0xa2>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021d4:	d035      	beq.n	8002242 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68d9      	ldr	r1, [r3, #12]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	3b1e      	subs	r3, #30
 80021ec:	2207      	movs	r2, #7
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	400a      	ands	r2, r1
 80021fa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a8d      	ldr	r2, [pc, #564]	; (8002438 <HAL_ADC_ConfigChannel+0x298>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10a      	bne.n	800221c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68d9      	ldr	r1, [r3, #12]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	061a      	lsls	r2, r3, #24
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221a:	e035      	b.n	8002288 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68d9      	ldr	r1, [r3, #12]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	4603      	mov	r3, r0
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4403      	add	r3, r0
 8002234:	3b1e      	subs	r3, #30
 8002236:	409a      	lsls	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002240:	e022      	b.n	8002288 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6919      	ldr	r1, [r3, #16]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	2207      	movs	r2, #7
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43da      	mvns	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	400a      	ands	r2, r1
 8002264:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6919      	ldr	r1, [r3, #16]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	4618      	mov	r0, r3
 8002278:	4603      	mov	r3, r0
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4403      	add	r3, r0
 800227e:	409a      	lsls	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b06      	cmp	r3, #6
 800228e:	d824      	bhi.n	80022da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	3b05      	subs	r3, #5
 80022a2:	221f      	movs	r2, #31
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43da      	mvns	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	400a      	ands	r2, r1
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	3b05      	subs	r3, #5
 80022cc:	fa00 f203 	lsl.w	r2, r0, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	635a      	str	r2, [r3, #52]	; 0x34
 80022d8:	e04c      	b.n	8002374 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d824      	bhi.n	800232c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3b23      	subs	r3, #35	; 0x23
 80022f4:	221f      	movs	r2, #31
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	400a      	ands	r2, r1
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	3b23      	subs	r3, #35	; 0x23
 800231e:	fa00 f203 	lsl.w	r2, r0, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
 800232a:	e023      	b.n	8002374 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	3b41      	subs	r3, #65	; 0x41
 800233e:	221f      	movs	r2, #31
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43da      	mvns	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	400a      	ands	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	4618      	mov	r0, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3b41      	subs	r3, #65	; 0x41
 8002368:	fa00 f203 	lsl.w	r2, r0, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a30      	ldr	r2, [pc, #192]	; (800243c <HAL_ADC_ConfigChannel+0x29c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10a      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1f4>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002386:	d105      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a2c      	ldr	r2, [pc, #176]	; (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 800238e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002392:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <HAL_ADC_ConfigChannel+0x29c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10f      	bne.n	80023be <HAL_ADC_ConfigChannel+0x21e>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b12      	cmp	r3, #18
 80023a4:	d10b      	bne.n	80023be <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023b0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80023b2:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a22      	ldr	r2, [pc, #136]	; (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_ADC_ConfigChannel+0x29c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d12b      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x280>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1a      	ldr	r2, [pc, #104]	; (8002438 <HAL_ADC_ConfigChannel+0x298>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <HAL_ADC_ConfigChannel+0x23a>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b11      	cmp	r3, #17
 80023d8:	d122      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a18      	ldr	r2, [pc, #96]	; (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023e4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a15      	ldr	r2, [pc, #84]	; (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a10      	ldr	r2, [pc, #64]	; (8002438 <HAL_ADC_ConfigChannel+0x298>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d111      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_ADC_ConfigChannel+0x2a4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a11      	ldr	r2, [pc, #68]	; (8002448 <HAL_ADC_ConfigChannel+0x2a8>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0c9a      	lsrs	r2, r3, #18
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002412:	e002      	b.n	800241a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3b01      	subs	r3, #1
 8002418:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f9      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	10000012 	.word	0x10000012
 800243c:	40012000 	.word	0x40012000
 8002440:	40012300 	.word	0x40012300
 8002444:	20000000 	.word	0x20000000
 8002448:	431bde83 	.word	0x431bde83

0800244c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002454:	4b78      	ldr	r3, [pc, #480]	; (8002638 <ADC_Init+0x1ec>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a77      	ldr	r2, [pc, #476]	; (8002638 <ADC_Init+0x1ec>)
 800245a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800245e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002460:	4b75      	ldr	r3, [pc, #468]	; (8002638 <ADC_Init+0x1ec>)
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4973      	ldr	r1, [pc, #460]	; (8002638 <ADC_Init+0x1ec>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800247c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	021a      	lsls	r2, r3, #8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	4a58      	ldr	r2, [pc, #352]	; (800263c <ADC_Init+0x1f0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6899      	ldr	r1, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	e00f      	b.n	8002546 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002544:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0202 	bic.w	r2, r2, #2
 8002554:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6899      	ldr	r1, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	005a      	lsls	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01b      	beq.n	80025ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002582:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002592:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	3b01      	subs	r3, #1
 80025a0:	035a      	lsls	r2, r3, #13
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	e007      	b.n	80025bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	051a      	lsls	r2, r3, #20
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025fe:	025a      	lsls	r2, r3, #9
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	029a      	lsls	r2, r3, #10
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40012300 	.word	0x40012300
 800263c:	0f000001 	.word	0x0f000001

08002640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <__NVIC_SetPriorityGrouping+0x40>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 800266a:	4313      	orrs	r3, r2
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	; (8002680 <__NVIC_SetPriorityGrouping+0x40>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00
 8002684:	05fa0000 	.word	0x05fa0000

08002688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <__NVIC_EnableIRQ+0x38>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	; (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
         );
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff ff4c 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c2:	f7ff ff61 	bl	8002688 <__NVIC_GetPriorityGrouping>
 80027c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	6978      	ldr	r0, [r7, #20]
 80027ce:	f7ff ffb1 	bl	8002734 <NVIC_EncodePriority>
 80027d2:	4602      	mov	r2, r0
 80027d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff80 	bl	80026e0 <__NVIC_SetPriority>
}
 80027e0:	bf00      	nop
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff54 	bl	80026a4 <__NVIC_EnableIRQ>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002808:	f3bf 8f5f 	dmb	sy
}
 800280c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_MPU_Disable+0x28>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	4a06      	ldr	r2, [pc, #24]	; (800282c <HAL_MPU_Disable+0x28>)
 8002814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002818:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_MPU_Disable+0x2c>)
 800281c:	2200      	movs	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000ed00 	.word	0xe000ed00
 8002830:	e000ed90 	.word	0xe000ed90

08002834 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800283c:	4a0b      	ldr	r2, [pc, #44]	; (800286c <HAL_MPU_Enable+0x38>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_MPU_Enable+0x3c>)
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_MPU_Enable+0x3c>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002852:	f3bf 8f4f 	dsb	sy
}
 8002856:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002858:	f3bf 8f6f 	isb	sy
}
 800285c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed90 	.word	0xe000ed90
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	785a      	ldrb	r2, [r3, #1]
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_MPU_ConfigRegion+0x84>)
 8002882:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d029      	beq.n	80028e0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800288c:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <HAL_MPU_ConfigRegion+0x84>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7b1b      	ldrb	r3, [r3, #12]
 8002898:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7adb      	ldrb	r3, [r3, #11]
 800289e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7a9b      	ldrb	r3, [r3, #10]
 80028a6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	7b5b      	ldrb	r3, [r3, #13]
 80028ae:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7b9b      	ldrb	r3, [r3, #14]
 80028b6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7bdb      	ldrb	r3, [r3, #15]
 80028be:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7a5b      	ldrb	r3, [r3, #9]
 80028c6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7a1b      	ldrb	r3, [r3, #8]
 80028ce:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028d0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028da:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028dc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80028de:	e005      	b.n	80028ec <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_MPU_ConfigRegion+0x84>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <HAL_MPU_ConfigRegion+0x84>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed90 	.word	0xe000ed90

080028fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e054      	b.n	80029b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7f5b      	ldrb	r3, [r3, #29]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe fdd2 	bl	80014c8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	791b      	ldrb	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a22      	ldr	r2, [pc, #136]	; (80029c0 <HAL_CRC_Init+0xc4>)
 8002938:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0218 	bic.w	r2, r2, #24
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	e00c      	b.n	8002966 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6899      	ldr	r1, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	461a      	mov	r2, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f834 	bl	80029c4 <HAL_CRCEx_Polynomial_Set>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e028      	b.n	80029b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	795b      	ldrb	r3, [r3, #5]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f04f 32ff 	mov.w	r2, #4294967295
 8002976:	611a      	str	r2, [r3, #16]
 8002978:	e004      	b.n	8002984 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6912      	ldr	r2, [r2, #16]
 8002982:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	04c11db7 	.word	0x04c11db7

080029c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80029d4:	231f      	movs	r3, #31
 80029d6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80029d8:	bf00      	nop
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1e5a      	subs	r2, r3, #1
 80029de:	613a      	str	r2, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d009      	beq.n	80029f8 <HAL_CRCEx_Polynomial_Set+0x34>
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b18      	cmp	r3, #24
 80029fc:	d846      	bhi.n	8002a8c <HAL_CRCEx_Polynomial_Set+0xc8>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a93 	.word	0x08002a93
 8002a08:	08002a8d 	.word	0x08002a8d
 8002a0c:	08002a8d 	.word	0x08002a8d
 8002a10:	08002a8d 	.word	0x08002a8d
 8002a14:	08002a8d 	.word	0x08002a8d
 8002a18:	08002a8d 	.word	0x08002a8d
 8002a1c:	08002a8d 	.word	0x08002a8d
 8002a20:	08002a8d 	.word	0x08002a8d
 8002a24:	08002a81 	.word	0x08002a81
 8002a28:	08002a8d 	.word	0x08002a8d
 8002a2c:	08002a8d 	.word	0x08002a8d
 8002a30:	08002a8d 	.word	0x08002a8d
 8002a34:	08002a8d 	.word	0x08002a8d
 8002a38:	08002a8d 	.word	0x08002a8d
 8002a3c:	08002a8d 	.word	0x08002a8d
 8002a40:	08002a8d 	.word	0x08002a8d
 8002a44:	08002a75 	.word	0x08002a75
 8002a48:	08002a8d 	.word	0x08002a8d
 8002a4c:	08002a8d 	.word	0x08002a8d
 8002a50:	08002a8d 	.word	0x08002a8d
 8002a54:	08002a8d 	.word	0x08002a8d
 8002a58:	08002a8d 	.word	0x08002a8d
 8002a5c:	08002a8d 	.word	0x08002a8d
 8002a60:	08002a8d 	.word	0x08002a8d
 8002a64:	08002a69 	.word	0x08002a69
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d913      	bls.n	8002a96 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a72:	e010      	b.n	8002a96 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b07      	cmp	r3, #7
 8002a78:	d90f      	bls.n	8002a9a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a7e:	e00c      	b.n	8002a9a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b0f      	cmp	r3, #15
 8002a84:	d90b      	bls.n	8002a9e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a8a:	e008      	b.n	8002a9e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a90:	e006      	b.n	8002aa0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a92:	bf00      	nop
 8002a94:	e004      	b.n	8002aa0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a96:	bf00      	nop
 8002a98:	e002      	b.n	8002aa0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a9a:	bf00      	nop
 8002a9c:	e000      	b.n	8002aa0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a9e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 0118 	bic.w	r1, r3, #24
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e039      	b.n	8002b56 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fd06 	bl	8001508 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	f023 0107 	bic.w	r1, r3, #7
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_DMA2D_Init+0x90>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68d1      	ldr	r1, [r2, #12]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	430b      	orrs	r3, r1
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	ffffc000 	.word	0xffffc000

08002b64 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d026      	beq.n	8002bd4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d021      	beq.n	8002bd4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d026      	beq.n	8002c2c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d021      	beq.n	8002c2c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c04:	f043 0202 	orr.w	r2, r3, #2
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d026      	beq.n	8002c84 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d021      	beq.n	8002c84 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2208      	movs	r2, #8
 8002c56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	f043 0204 	orr.w	r2, r3, #4
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2204      	movs	r2, #4
 8002c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d013      	beq.n	8002cb6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2204      	movs	r2, #4
 8002cae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f853 	bl	8002d5c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d024      	beq.n	8002d0a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01f      	beq.n	8002d0a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cd8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01f      	beq.n	8002d54 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01a      	beq.n	8002d54 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2210      	movs	r2, #16
 8002d34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f80e 	bl	8002d70 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_DMA2D_ConfigLayer+0x20>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e079      	b.n	8002e98 <HAL_DMA2D_ConfigLayer+0x114>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	3318      	adds	r3, #24
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002dce:	4b35      	ldr	r3, [pc, #212]	; (8002ea4 <HAL_DMA2D_ConfigLayer+0x120>)
 8002dd0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b0a      	cmp	r3, #10
 8002dd8:	d003      	beq.n	8002de2 <HAL_DMA2D_ConfigLayer+0x5e>
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b09      	cmp	r3, #9
 8002de0:	d107      	bne.n	8002df2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e005      	b.n	8002dfe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	061b      	lsls	r3, r3, #24
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d120      	bne.n	8002e46 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	ea02 0103 	and.w	r1, r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b0a      	cmp	r3, #10
 8002e2c:	d003      	beq.n	8002e36 <HAL_DMA2D_ConfigLayer+0xb2>
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b09      	cmp	r3, #9
 8002e34:	d127      	bne.n	8002e86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28
 8002e44:	e01f      	b.n	8002e86 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	ea02 0103 	and.w	r1, r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b0a      	cmp	r3, #10
 8002e6e:	d003      	beq.n	8002e78 <HAL_DMA2D_ConfigLayer+0xf4>
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b09      	cmp	r3, #9
 8002e76:	d106      	bne.n	8002e86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002e84:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	ff03000f 	.word	0xff03000f

08002ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	e175      	b.n	80031b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ec8:	2201      	movs	r2, #1
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	f040 8164 	bne.w	80031ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d005      	beq.n	8002efe <HAL_GPIO_Init+0x56>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d130      	bne.n	8002f60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	2203      	movs	r2, #3
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f34:	2201      	movs	r2, #1
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 0201 	and.w	r2, r3, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d017      	beq.n	8002f9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d123      	bne.n	8002ff0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	08da      	lsrs	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3208      	adds	r2, #8
 8002fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	220f      	movs	r2, #15
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	08da      	lsrs	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3208      	adds	r2, #8
 8002fea:	69b9      	ldr	r1, [r7, #24]
 8002fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0203 	and.w	r2, r3, #3
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80be 	beq.w	80031ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003032:	4b66      	ldr	r3, [pc, #408]	; (80031cc <HAL_GPIO_Init+0x324>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	4a65      	ldr	r2, [pc, #404]	; (80031cc <HAL_GPIO_Init+0x324>)
 8003038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303c:	6453      	str	r3, [r2, #68]	; 0x44
 800303e:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_GPIO_Init+0x324>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800304a:	4a61      	ldr	r2, [pc, #388]	; (80031d0 <HAL_GPIO_Init+0x328>)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	3302      	adds	r3, #2
 8003052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	220f      	movs	r2, #15
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a58      	ldr	r2, [pc, #352]	; (80031d4 <HAL_GPIO_Init+0x32c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d037      	beq.n	80030e6 <HAL_GPIO_Init+0x23e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a57      	ldr	r2, [pc, #348]	; (80031d8 <HAL_GPIO_Init+0x330>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d031      	beq.n	80030e2 <HAL_GPIO_Init+0x23a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a56      	ldr	r2, [pc, #344]	; (80031dc <HAL_GPIO_Init+0x334>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d02b      	beq.n	80030de <HAL_GPIO_Init+0x236>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a55      	ldr	r2, [pc, #340]	; (80031e0 <HAL_GPIO_Init+0x338>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d025      	beq.n	80030da <HAL_GPIO_Init+0x232>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a54      	ldr	r2, [pc, #336]	; (80031e4 <HAL_GPIO_Init+0x33c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01f      	beq.n	80030d6 <HAL_GPIO_Init+0x22e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a53      	ldr	r2, [pc, #332]	; (80031e8 <HAL_GPIO_Init+0x340>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d019      	beq.n	80030d2 <HAL_GPIO_Init+0x22a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a52      	ldr	r2, [pc, #328]	; (80031ec <HAL_GPIO_Init+0x344>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <HAL_GPIO_Init+0x226>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a51      	ldr	r2, [pc, #324]	; (80031f0 <HAL_GPIO_Init+0x348>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00d      	beq.n	80030ca <HAL_GPIO_Init+0x222>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a50      	ldr	r2, [pc, #320]	; (80031f4 <HAL_GPIO_Init+0x34c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d007      	beq.n	80030c6 <HAL_GPIO_Init+0x21e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4f      	ldr	r2, [pc, #316]	; (80031f8 <HAL_GPIO_Init+0x350>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_GPIO_Init+0x21a>
 80030be:	2309      	movs	r3, #9
 80030c0:	e012      	b.n	80030e8 <HAL_GPIO_Init+0x240>
 80030c2:	230a      	movs	r3, #10
 80030c4:	e010      	b.n	80030e8 <HAL_GPIO_Init+0x240>
 80030c6:	2308      	movs	r3, #8
 80030c8:	e00e      	b.n	80030e8 <HAL_GPIO_Init+0x240>
 80030ca:	2307      	movs	r3, #7
 80030cc:	e00c      	b.n	80030e8 <HAL_GPIO_Init+0x240>
 80030ce:	2306      	movs	r3, #6
 80030d0:	e00a      	b.n	80030e8 <HAL_GPIO_Init+0x240>
 80030d2:	2305      	movs	r3, #5
 80030d4:	e008      	b.n	80030e8 <HAL_GPIO_Init+0x240>
 80030d6:	2304      	movs	r3, #4
 80030d8:	e006      	b.n	80030e8 <HAL_GPIO_Init+0x240>
 80030da:	2303      	movs	r3, #3
 80030dc:	e004      	b.n	80030e8 <HAL_GPIO_Init+0x240>
 80030de:	2302      	movs	r3, #2
 80030e0:	e002      	b.n	80030e8 <HAL_GPIO_Init+0x240>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <HAL_GPIO_Init+0x240>
 80030e6:	2300      	movs	r3, #0
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	f002 0203 	and.w	r2, r2, #3
 80030ee:	0092      	lsls	r2, r2, #2
 80030f0:	4093      	lsls	r3, r2
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030f8:	4935      	ldr	r1, [pc, #212]	; (80031d0 <HAL_GPIO_Init+0x328>)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3302      	adds	r3, #2
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003106:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <HAL_GPIO_Init+0x354>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800312a:	4a34      	ldr	r2, [pc, #208]	; (80031fc <HAL_GPIO_Init+0x354>)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003130:	4b32      	ldr	r3, [pc, #200]	; (80031fc <HAL_GPIO_Init+0x354>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003154:	4a29      	ldr	r2, [pc, #164]	; (80031fc <HAL_GPIO_Init+0x354>)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800315a:	4b28      	ldr	r3, [pc, #160]	; (80031fc <HAL_GPIO_Init+0x354>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <HAL_GPIO_Init+0x354>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_GPIO_Init+0x354>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031a8:	4a14      	ldr	r2, [pc, #80]	; (80031fc <HAL_GPIO_Init+0x354>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3301      	adds	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	f67f ae86 	bls.w	8002ec8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40013800 	.word	0x40013800
 80031d4:	40020000 	.word	0x40020000
 80031d8:	40020400 	.word	0x40020400
 80031dc:	40020800 	.word	0x40020800
 80031e0:	40020c00 	.word	0x40020c00
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40021400 	.word	0x40021400
 80031ec:	40021800 	.word	0x40021800
 80031f0:	40021c00 	.word	0x40021c00
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40022400 	.word	0x40022400
 80031fc:	40013c00 	.word	0x40013c00

08003200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800321c:	e003      	b.n	8003226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	619a      	str	r2, [r3, #24]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e07f      	b.n	8003346 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fe f97a 	bl	8001554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2224      	movs	r2, #36	; 0x24
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003284:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003294:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d107      	bne.n	80032ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	e006      	b.n	80032bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d104      	bne.n	80032ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <HAL_I2C_Init+0x11c>)
 80032da:	430b      	orrs	r3, r1
 80032dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69d9      	ldr	r1, [r3, #28]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1a      	ldr	r2, [r3, #32]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	02008000 	.word	0x02008000

08003354 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b20      	cmp	r3, #32
 8003368:	d138      	bne.n	80033dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003374:	2302      	movs	r3, #2
 8003376:	e032      	b.n	80033de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2224      	movs	r2, #36	; 0x24
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d139      	bne.n	8003474 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800340a:	2302      	movs	r3, #2
 800340c:	e033      	b.n	8003476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2224      	movs	r2, #36	; 0x24
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800343c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0bf      	b.n	8003616 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fe f8b2 	bl	8001614 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80034c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6999      	ldr	r1, [r3, #24]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b4a      	ldr	r3, [pc, #296]	; (8003620 <HAL_LTDC_Init+0x19c>)
 80034f8:	400b      	ands	r3, r1
 80034fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	041b      	lsls	r3, r3, #16
 8003502:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6899      	ldr	r1, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68d9      	ldr	r1, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b3e      	ldr	r3, [pc, #248]	; (8003620 <HAL_LTDC_Init+0x19c>)
 8003526:	400b      	ands	r3, r1
 8003528:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	041b      	lsls	r3, r3, #16
 8003530:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68d9      	ldr	r1, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1a      	ldr	r2, [r3, #32]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6919      	ldr	r1, [r3, #16]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b33      	ldr	r3, [pc, #204]	; (8003620 <HAL_LTDC_Init+0x19c>)
 8003554:	400b      	ands	r3, r1
 8003556:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6919      	ldr	r1, [r3, #16]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6959      	ldr	r1, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b27      	ldr	r3, [pc, #156]	; (8003620 <HAL_LTDC_Init+0x19c>)
 8003582:	400b      	ands	r3, r1
 8003584:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	041b      	lsls	r3, r3, #16
 800358c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6959      	ldr	r1, [r3, #20]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0206 	orr.w	r2, r2, #6
 80035f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	f000f800 	.word	0xf000f800

08003624 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d023      	beq.n	800368e <HAL_LTDC_IRQHandler+0x6a>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01e      	beq.n	800368e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0204 	bic.w	r2, r2, #4
 800365e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2204      	movs	r2, #4
 8003666:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800366e:	f043 0201 	orr.w	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2204      	movs	r2, #4
 800367c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f86f 	bl	800376c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d023      	beq.n	80036e0 <HAL_LTDC_IRQHandler+0xbc>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01e      	beq.n	80036e0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0202 	bic.w	r2, r2, #2
 80036b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2202      	movs	r2, #2
 80036b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036c0:	f043 0202 	orr.w	r2, r3, #2
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2204      	movs	r2, #4
 80036ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f846 	bl	800376c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01b      	beq.n	8003722 <HAL_LTDC_IRQHandler+0xfe>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d016      	beq.n	8003722 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2201      	movs	r2, #1
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f82f 	bl	8003780 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_LTDC_IRQHandler+0x140>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0208 	bic.w	r2, r2, #8
 8003744:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2208      	movs	r2, #8
 800374c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f818 	bl	8003794 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80037a8:	b5b0      	push	{r4, r5, r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_LTDC_ConfigLayer+0x1a>
 80037be:	2302      	movs	r3, #2
 80037c0:	e02c      	b.n	800381c <HAL_LTDC_ConfigLayer+0x74>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2134      	movs	r1, #52	; 0x34
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4614      	mov	r4, r2
 80037e6:	461d      	mov	r5, r3
 80037e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f811 	bl	8003824 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2201      	movs	r2, #1
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bdb0      	pop	{r4, r5, r7, pc}

08003824 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003824:	b480      	push	{r7}
 8003826:	b089      	sub	sp, #36	; 0x24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003840:	4413      	add	r3, r2
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	01db      	lsls	r3, r3, #7
 8003850:	4413      	add	r3, r2
 8003852:	3384      	adds	r3, #132	; 0x84
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	4611      	mov	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	01d2      	lsls	r2, r2, #7
 8003860:	440a      	add	r2, r1
 8003862:	3284      	adds	r2, #132	; 0x84
 8003864:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003868:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387a:	4413      	add	r3, r2
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4619      	mov	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	01db      	lsls	r3, r3, #7
 8003888:	440b      	add	r3, r1
 800388a:	3384      	adds	r3, #132	; 0x84
 800388c:	4619      	mov	r1, r3
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a2:	4413      	add	r3, r2
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	01db      	lsls	r3, r3, #7
 80038b2:	4413      	add	r3, r2
 80038b4:	3384      	adds	r3, #132	; 0x84
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	4611      	mov	r1, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	01d2      	lsls	r2, r2, #7
 80038c2:	440a      	add	r2, r1
 80038c4:	3284      	adds	r2, #132	; 0x84
 80038c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80038ca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038da:	4413      	add	r3, r2
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4619      	mov	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	01db      	lsls	r3, r3, #7
 80038e8:	440b      	add	r3, r1
 80038ea:	3384      	adds	r3, #132	; 0x84
 80038ec:	4619      	mov	r1, r3
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	01db      	lsls	r3, r3, #7
 80038fe:	4413      	add	r3, r2
 8003900:	3384      	adds	r3, #132	; 0x84
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	4611      	mov	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	01d2      	lsls	r2, r2, #7
 800390e:	440a      	add	r2, r1
 8003910:	3284      	adds	r2, #132	; 0x84
 8003912:	f023 0307 	bic.w	r3, r3, #7
 8003916:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	01db      	lsls	r3, r3, #7
 8003922:	4413      	add	r3, r2
 8003924:	3384      	adds	r3, #132	; 0x84
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800393e:	041b      	lsls	r3, r3, #16
 8003940:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	061b      	lsls	r3, r3, #24
 8003948:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	01db      	lsls	r3, r3, #7
 8003954:	4413      	add	r3, r2
 8003956:	3384      	adds	r3, #132	; 0x84
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	01db      	lsls	r3, r3, #7
 8003964:	4413      	add	r3, r2
 8003966:	3384      	adds	r3, #132	; 0x84
 8003968:	461a      	mov	r2, r3
 800396a:	2300      	movs	r3, #0
 800396c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003974:	461a      	mov	r2, r3
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	431a      	orrs	r2, r3
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4619      	mov	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	01db      	lsls	r3, r3, #7
 8003988:	440b      	add	r3, r1
 800398a:	3384      	adds	r3, #132	; 0x84
 800398c:	4619      	mov	r1, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	01db      	lsls	r3, r3, #7
 800399e:	4413      	add	r3, r2
 80039a0:	3384      	adds	r3, #132	; 0x84
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	4611      	mov	r1, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	01d2      	lsls	r2, r2, #7
 80039ae:	440a      	add	r2, r1
 80039b0:	3284      	adds	r2, #132	; 0x84
 80039b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	01db      	lsls	r3, r3, #7
 80039c2:	4413      	add	r3, r2
 80039c4:	3384      	adds	r3, #132	; 0x84
 80039c6:	461a      	mov	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	01db      	lsls	r3, r3, #7
 80039d8:	4413      	add	r3, r2
 80039da:	3384      	adds	r3, #132	; 0x84
 80039dc:	69da      	ldr	r2, [r3, #28]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4619      	mov	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	01db      	lsls	r3, r3, #7
 80039e8:	440b      	add	r3, r1
 80039ea:	3384      	adds	r3, #132	; 0x84
 80039ec:	4619      	mov	r1, r3
 80039ee:	4b58      	ldr	r3, [pc, #352]	; (8003b50 <LTDC_SetConfig+0x32c>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	68f9      	ldr	r1, [r7, #12]
 80039fe:	6809      	ldr	r1, [r1, #0]
 8003a00:	4608      	mov	r0, r1
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	01c9      	lsls	r1, r1, #7
 8003a06:	4401      	add	r1, r0
 8003a08:	3184      	adds	r1, #132	; 0x84
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	01db      	lsls	r3, r3, #7
 8003a18:	4413      	add	r3, r2
 8003a1a:	3384      	adds	r3, #132	; 0x84
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	01db      	lsls	r3, r3, #7
 8003a28:	4413      	add	r3, r2
 8003a2a:	3384      	adds	r3, #132	; 0x84
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2300      	movs	r3, #0
 8003a30:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	01db      	lsls	r3, r3, #7
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3384      	adds	r3, #132	; 0x84
 8003a40:	461a      	mov	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003a50:	2304      	movs	r3, #4
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	e01b      	b.n	8003a8e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d102      	bne.n	8003a64 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	e014      	b.n	8003a8e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d00b      	beq.n	8003a84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d007      	beq.n	8003a84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d003      	beq.n	8003a84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003a80:	2b07      	cmp	r3, #7
 8003a82:	d102      	bne.n	8003a8a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003a84:	2302      	movs	r3, #2
 8003a86:	61fb      	str	r3, [r7, #28]
 8003a88:	e001      	b.n	8003a8e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	01db      	lsls	r3, r3, #7
 8003a98:	4413      	add	r3, r2
 8003a9a:	3384      	adds	r3, #132	; 0x84
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	01d2      	lsls	r2, r2, #7
 8003aa8:	440a      	add	r2, r1
 8003aaa:	3284      	adds	r2, #132	; 0x84
 8003aac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	041a      	lsls	r2, r3, #16
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6859      	ldr	r1, [r3, #4]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	1acb      	subs	r3, r1, r3
 8003ac8:	69f9      	ldr	r1, [r7, #28]
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	3303      	adds	r3, #3
 8003ad0:	68f9      	ldr	r1, [r7, #12]
 8003ad2:	6809      	ldr	r1, [r1, #0]
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	01c9      	lsls	r1, r1, #7
 8003ada:	4401      	add	r1, r0
 8003adc:	3184      	adds	r1, #132	; 0x84
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	01db      	lsls	r3, r3, #7
 8003aec:	4413      	add	r3, r2
 8003aee:	3384      	adds	r3, #132	; 0x84
 8003af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4619      	mov	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	01db      	lsls	r3, r3, #7
 8003afc:	440b      	add	r3, r1
 8003afe:	3384      	adds	r3, #132	; 0x84
 8003b00:	4619      	mov	r1, r3
 8003b02:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <LTDC_SetConfig+0x330>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	01db      	lsls	r3, r3, #7
 8003b12:	4413      	add	r3, r2
 8003b14:	3384      	adds	r3, #132	; 0x84
 8003b16:	461a      	mov	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	01db      	lsls	r3, r3, #7
 8003b28:	4413      	add	r3, r2
 8003b2a:	3384      	adds	r3, #132	; 0x84
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	4611      	mov	r1, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	01d2      	lsls	r2, r2, #7
 8003b38:	440a      	add	r2, r1
 8003b3a:	3284      	adds	r2, #132	; 0x84
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6013      	str	r3, [r2, #0]
}
 8003b42:	bf00      	nop
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	fffff8f8 	.word	0xfffff8f8
 8003b54:	fffff800 	.word	0xfffff800

08003b58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40007000 	.word	0x40007000

08003b78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	4a22      	ldr	r2, [pc, #136]	; (8003c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ba6:	f7fe f9af 	bl	8001f08 <HAL_GetTick>
 8003baa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bac:	e009      	b.n	8003bc2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bae:	f7fe f9ab 	bl	8001f08 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bbc:	d901      	bls.n	8003bc2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e022      	b.n	8003c08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bce:	d1ee      	bne.n	8003bae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0f      	ldr	r2, [pc, #60]	; (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bdc:	f7fe f994 	bl	8001f08 <HAL_GetTick>
 8003be0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003be2:	e009      	b.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003be4:	f7fe f990 	bl	8001f08 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bf2:	d901      	bls.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e007      	b.n	8003c08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c04:	d1ee      	bne.n	8003be4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40007000 	.word	0x40007000

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e291      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8087 	beq.w	8003d4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c3c:	4b96      	ldr	r3, [pc, #600]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d00c      	beq.n	8003c62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c48:	4b93      	ldr	r3, [pc, #588]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d112      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62>
 8003c54:	4b90      	ldr	r3, [pc, #576]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c60:	d10b      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c62:	4b8d      	ldr	r3, [pc, #564]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d06c      	beq.n	8003d48 <HAL_RCC_OscConfig+0x130>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d168      	bne.n	8003d48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e26b      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x7a>
 8003c84:	4b84      	ldr	r3, [pc, #528]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a83      	ldr	r2, [pc, #524]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e02e      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x9c>
 8003c9a:	4b7f      	ldr	r3, [pc, #508]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7e      	ldr	r2, [pc, #504]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b7c      	ldr	r3, [pc, #496]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7b      	ldr	r2, [pc, #492]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e01d      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0xc0>
 8003cbe:	4b76      	ldr	r3, [pc, #472]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a75      	ldr	r2, [pc, #468]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b73      	ldr	r3, [pc, #460]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a72      	ldr	r2, [pc, #456]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003cd8:	4b6f      	ldr	r3, [pc, #444]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6e      	ldr	r2, [pc, #440]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b6c      	ldr	r3, [pc, #432]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6b      	ldr	r2, [pc, #428]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe f906 	bl	8001f08 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fe f902 	bl	8001f08 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e21f      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b61      	ldr	r3, [pc, #388]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0xe8>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fe f8f2 	bl	8001f08 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe f8ee 	bl	8001f08 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e20b      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b57      	ldr	r3, [pc, #348]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x110>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d069      	beq.n	8003e2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d56:	4b50      	ldr	r3, [pc, #320]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d62:	4b4d      	ldr	r3, [pc, #308]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d11c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x190>
 8003d6e:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_RCC_OscConfig+0x17a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e1df      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d92:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	493d      	ldr	r1, [pc, #244]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e040      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d023      	beq.n	8003df8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db0:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a38      	ldr	r2, [pc, #224]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe f8a4 	bl	8001f08 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc4:	f7fe f8a0 	bl	8001f08 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1bd      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd6:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4929      	ldr	r1, [pc, #164]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
 8003df6:	e018      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe f880 	bl	8001f08 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fe f87c 	bl	8001f08 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e199      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d038      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3e:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fe f85d 	bl	8001f08 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e52:	f7fe f859 	bl	8001f08 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e176      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x23a>
 8003e70:	e01a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fe f843 	bl	8001f08 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e86:	f7fe f83f 	bl	8001f08 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d903      	bls.n	8003e9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e15c      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
 8003e98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	4b91      	ldr	r3, [pc, #580]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ee      	bne.n	8003e86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a4 	beq.w	8003ffe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb6:	4b8b      	ldr	r3, [pc, #556]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	4b88      	ldr	r3, [pc, #544]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a87      	ldr	r2, [pc, #540]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ece:	4b85      	ldr	r3, [pc, #532]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ede:	4b82      	ldr	r3, [pc, #520]	; (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d118      	bne.n	8003f1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003eea:	4b7f      	ldr	r3, [pc, #508]	; (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7e      	ldr	r2, [pc, #504]	; (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fe f807 	bl	8001f08 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fe f803 	bl	8001f08 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b64      	cmp	r3, #100	; 0x64
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e120      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f10:	4b75      	ldr	r3, [pc, #468]	; (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x31a>
 8003f24:	4b6f      	ldr	r3, [pc, #444]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	4a6e      	ldr	r2, [pc, #440]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f30:	e02d      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x33c>
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4a69      	ldr	r2, [pc, #420]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6713      	str	r3, [r2, #112]	; 0x70
 8003f46:	4b67      	ldr	r3, [pc, #412]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a66      	ldr	r2, [pc, #408]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	6713      	str	r3, [r2, #112]	; 0x70
 8003f52:	e01c      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x35e>
 8003f5c:	4b61      	ldr	r3, [pc, #388]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a60      	ldr	r2, [pc, #384]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	4b5e      	ldr	r3, [pc, #376]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a5d      	ldr	r2, [pc, #372]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	e00b      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f76:	4b5b      	ldr	r3, [pc, #364]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	4a5a      	ldr	r2, [pc, #360]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6713      	str	r3, [r2, #112]	; 0x70
 8003f82:	4b58      	ldr	r3, [pc, #352]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a57      	ldr	r2, [pc, #348]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d015      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7fd ffb7 	bl	8001f08 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fd ffb3 	bl	8001f08 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0ce      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ee      	beq.n	8003f9e <HAL_RCC_OscConfig+0x386>
 8003fc0:	e014      	b.n	8003fec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fd ffa1 	bl	8001f08 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fd ff9d 	bl	8001f08 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0b8      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe0:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4b3c      	ldr	r3, [pc, #240]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	4a3b      	ldr	r2, [pc, #236]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80a4 	beq.w	8004150 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004008:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d06b      	beq.n	80040ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d149      	bne.n	80040b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a30      	ldr	r2, [pc, #192]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd ff6e 	bl	8001f08 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fd ff6a 	bl	8001f08 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e087      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	019b      	lsls	r3, r3, #6
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	3b01      	subs	r3, #1
 8004068:	041b      	lsls	r3, r3, #16
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	061b      	lsls	r3, r3, #24
 8004072:	4313      	orrs	r3, r2
 8004074:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004076:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800407a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b19      	ldr	r3, [pc, #100]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fd ff3e 	bl	8001f08 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004090:	f7fd ff3a 	bl	8001f08 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e057      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x478>
 80040ae:	e04f      	b.n	8004150 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b0:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0b      	ldr	r2, [pc, #44]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 80040b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd ff24 	bl	8001f08 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fd ff20 	bl	8001f08 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e03d      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4ac>
 80040e2:	e035      	b.n	8004150 <HAL_RCC_OscConfig+0x538>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040ec:	4b1b      	ldr	r3, [pc, #108]	; (800415c <HAL_RCC_OscConfig+0x544>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d028      	beq.n	800414c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d121      	bne.n	800414c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d11a      	bne.n	800414c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800411c:	4013      	ands	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004122:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004124:	4293      	cmp	r3, r2
 8004126:	d111      	bne.n	800414c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	3b01      	subs	r3, #1
 8004136:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d107      	bne.n	800414c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800

08004160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0d0      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d910      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 020f 	bic.w	r2, r3, #15
 800418e:	4965      	ldr	r1, [pc, #404]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b63      	ldr	r3, [pc, #396]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0b8      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c0:	4b59      	ldr	r3, [pc, #356]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4a58      	ldr	r2, [pc, #352]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d8:	4b53      	ldr	r3, [pc, #332]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a52      	ldr	r2, [pc, #328]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b50      	ldr	r3, [pc, #320]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	494d      	ldr	r1, [pc, #308]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d040      	beq.n	8004284 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d115      	bne.n	8004242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e07f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b41      	ldr	r3, [pc, #260]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e073      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06b      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b39      	ldr	r3, [pc, #228]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4936      	ldr	r1, [pc, #216]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004254:	f7fd fe58 	bl	8001f08 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fd fe54 	bl	8001f08 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e053      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b27      	ldr	r3, [pc, #156]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d210      	bcs.n	80042b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b24      	ldr	r3, [pc, #144]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 020f 	bic.w	r2, r3, #15
 800429a:	4922      	ldr	r1, [pc, #136]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e032      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4916      	ldr	r1, [pc, #88]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	490e      	ldr	r1, [pc, #56]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042f2:	f000 f821 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	490a      	ldr	r1, [pc, #40]	; (800432c <HAL_RCC_ClockConfig+0x1cc>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	4a09      	ldr	r2, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1d0>)
 800430c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_ClockConfig+0x1d4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd fc56 	bl	8001bc4 <HAL_InitTick>

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023c00 	.word	0x40023c00
 8004328:	40023800 	.word	0x40023800
 800432c:	08007b20 	.word	0x08007b20
 8004330:	20000000 	.word	0x20000000
 8004334:	20000004 	.word	0x20000004

08004338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800433c:	b090      	sub	sp, #64	; 0x40
 800433e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	637b      	str	r3, [r7, #52]	; 0x34
 8004344:	2300      	movs	r3, #0
 8004346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004348:	2300      	movs	r3, #0
 800434a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 030c 	and.w	r3, r3, #12
 8004358:	2b08      	cmp	r3, #8
 800435a:	d00d      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x40>
 800435c:	2b08      	cmp	r3, #8
 800435e:	f200 80a1 	bhi.w	80044a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x34>
 8004366:	2b04      	cmp	r3, #4
 8004368:	d003      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x3a>
 800436a:	e09b      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800436c:	4b53      	ldr	r3, [pc, #332]	; (80044bc <HAL_RCC_GetSysClockFreq+0x184>)
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004370:	e09b      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004372:	4b53      	ldr	r3, [pc, #332]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004374:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004376:	e098      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004378:	4b4f      	ldr	r3, [pc, #316]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004380:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004382:	4b4d      	ldr	r3, [pc, #308]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d028      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438e:	4b4a      	ldr	r3, [pc, #296]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	2200      	movs	r2, #0
 8004396:	623b      	str	r3, [r7, #32]
 8004398:	627a      	str	r2, [r7, #36]	; 0x24
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043a0:	2100      	movs	r1, #0
 80043a2:	4b47      	ldr	r3, [pc, #284]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80043a4:	fb03 f201 	mul.w	r2, r3, r1
 80043a8:	2300      	movs	r3, #0
 80043aa:	fb00 f303 	mul.w	r3, r0, r3
 80043ae:	4413      	add	r3, r2
 80043b0:	4a43      	ldr	r2, [pc, #268]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80043b2:	fba0 1202 	umull	r1, r2, r0, r2
 80043b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043b8:	460a      	mov	r2, r1
 80043ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80043bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043be:	4413      	add	r3, r2
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c4:	2200      	movs	r2, #0
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	61fa      	str	r2, [r7, #28]
 80043ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043d2:	f7fb ff6d 	bl	80002b0 <__aeabi_uldivmod>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4613      	mov	r3, r2
 80043dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043de:	e053      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e0:	4b35      	ldr	r3, [pc, #212]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	2200      	movs	r2, #0
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	617a      	str	r2, [r7, #20]
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043f2:	f04f 0b00 	mov.w	fp, #0
 80043f6:	4652      	mov	r2, sl
 80043f8:	465b      	mov	r3, fp
 80043fa:	f04f 0000 	mov.w	r0, #0
 80043fe:	f04f 0100 	mov.w	r1, #0
 8004402:	0159      	lsls	r1, r3, #5
 8004404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004408:	0150      	lsls	r0, r2, #5
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	ebb2 080a 	subs.w	r8, r2, sl
 8004412:	eb63 090b 	sbc.w	r9, r3, fp
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004422:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004426:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800442a:	ebb2 0408 	subs.w	r4, r2, r8
 800442e:	eb63 0509 	sbc.w	r5, r3, r9
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	00eb      	lsls	r3, r5, #3
 800443c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004440:	00e2      	lsls	r2, r4, #3
 8004442:	4614      	mov	r4, r2
 8004444:	461d      	mov	r5, r3
 8004446:	eb14 030a 	adds.w	r3, r4, sl
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	eb45 030b 	adc.w	r3, r5, fp
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800445e:	4629      	mov	r1, r5
 8004460:	028b      	lsls	r3, r1, #10
 8004462:	4621      	mov	r1, r4
 8004464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004468:	4621      	mov	r1, r4
 800446a:	028a      	lsls	r2, r1, #10
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004472:	2200      	movs	r2, #0
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	60fa      	str	r2, [r7, #12]
 8004478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800447c:	f7fb ff18 	bl	80002b0 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4613      	mov	r3, r2
 8004486:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	3301      	adds	r3, #1
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044a2:	e002      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetSysClockFreq+0x184>)
 80044a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3740      	adds	r7, #64	; 0x40
 80044b0:	46bd      	mov	sp, r7
 80044b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800
 80044bc:	00f42400 	.word	0x00f42400
 80044c0:	017d7840 	.word	0x017d7840

080044c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ca:	681b      	ldr	r3, [r3, #0]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000000 	.word	0x20000000

080044dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044e0:	f7ff fff0 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	0a9b      	lsrs	r3, r3, #10
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4903      	ldr	r1, [pc, #12]	; (8004500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	08007b30 	.word	0x08007b30

08004504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004508:	f7ff ffdc 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	0b5b      	lsrs	r3, r3, #13
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4903      	ldr	r1, [pc, #12]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40023800 	.word	0x40023800
 8004528:	08007b30 	.word	0x08007b30

0800452c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	220f      	movs	r2, #15
 800453a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800453c:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0203 	and.w	r2, r3, #3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004548:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	08db      	lsrs	r3, r3, #3
 8004566:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <HAL_RCC_GetClockConfig+0x60>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 020f 	and.w	r2, r3, #15
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	601a      	str	r2, [r3, #0]
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800
 800458c:	40023c00 	.word	0x40023c00

08004590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d012      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045b8:	4b69      	ldr	r3, [pc, #420]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a68      	ldr	r2, [pc, #416]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045c2:	6093      	str	r3, [r2, #8]
 80045c4:	4b66      	ldr	r3, [pc, #408]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045cc:	4964      	ldr	r1, [pc, #400]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045da:	2301      	movs	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d017      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ea:	4b5d      	ldr	r3, [pc, #372]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	4959      	ldr	r1, [pc, #356]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004608:	d101      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800460a:	2301      	movs	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004616:	2301      	movs	r3, #1
 8004618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d017      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004626:	4b4e      	ldr	r3, [pc, #312]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800462c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	494a      	ldr	r1, [pc, #296]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004644:	d101      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004646:	2301      	movs	r3, #1
 8004648:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004652:	2301      	movs	r3, #1
 8004654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004662:	2301      	movs	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 808b 	beq.w	800478a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004674:	4b3a      	ldr	r3, [pc, #232]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	4a39      	ldr	r2, [pc, #228]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467e:	6413      	str	r3, [r2, #64]	; 0x40
 8004680:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800468c:	4b35      	ldr	r3, [pc, #212]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a34      	ldr	r2, [pc, #208]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004698:	f7fd fc36 	bl	8001f08 <HAL_GetTick>
 800469c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a0:	f7fd fc32 	bl	8001f08 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e357      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046b2:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046be:	4b28      	ldr	r3, [pc, #160]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d035      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d02e      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046dc:	4b20      	ldr	r3, [pc, #128]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e6:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a1d      	ldr	r2, [pc, #116]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f2:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a1a      	ldr	r2, [pc, #104]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046fe:	4a18      	ldr	r2, [pc, #96]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004704:	4b16      	ldr	r3, [pc, #88]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d114      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd fbfa 	bl	8001f08 <HAL_GetTick>
 8004714:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fd fbf6 	bl	8001f08 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e319      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ee      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004746:	d111      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004756:	400b      	ands	r3, r1
 8004758:	4901      	ldr	r1, [pc, #4]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
 800475e:	e00b      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004760:	40023800 	.word	0x40023800
 8004764:	40007000 	.word	0x40007000
 8004768:	0ffffcff 	.word	0x0ffffcff
 800476c:	4baa      	ldr	r3, [pc, #680]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4aa9      	ldr	r2, [pc, #676]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004772:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004776:	6093      	str	r3, [r2, #8]
 8004778:	4ba7      	ldr	r3, [pc, #668]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800477a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	49a4      	ldr	r1, [pc, #656]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004786:	4313      	orrs	r3, r2
 8004788:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b00      	cmp	r3, #0
 8004794:	d010      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004796:	4ba0      	ldr	r3, [pc, #640]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800479c:	4a9e      	ldr	r2, [pc, #632]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047a6:	4b9c      	ldr	r3, [pc, #624]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	4999      	ldr	r1, [pc, #612]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c4:	4b94      	ldr	r3, [pc, #592]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d2:	4991      	ldr	r1, [pc, #580]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047e6:	4b8c      	ldr	r3, [pc, #560]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f4:	4988      	ldr	r1, [pc, #544]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004808:	4b83      	ldr	r3, [pc, #524]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004816:	4980      	ldr	r1, [pc, #512]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800482a:	4b7b      	ldr	r3, [pc, #492]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4977      	ldr	r1, [pc, #476]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800484c:	4b72      	ldr	r3, [pc, #456]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f023 0203 	bic.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	496f      	ldr	r1, [pc, #444]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800486e:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	f023 020c 	bic.w	r2, r3, #12
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487c:	4966      	ldr	r1, [pc, #408]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004890:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489e:	495e      	ldr	r1, [pc, #376]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048b2:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c0:	4955      	ldr	r1, [pc, #340]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048d4:	4b50      	ldr	r3, [pc, #320]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	494d      	ldr	r1, [pc, #308]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048f6:	4b48      	ldr	r3, [pc, #288]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	4944      	ldr	r1, [pc, #272]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004918:	4b3f      	ldr	r3, [pc, #252]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004926:	493c      	ldr	r1, [pc, #240]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004940:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004948:	4933      	ldr	r1, [pc, #204]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800495c:	4b2e      	ldr	r3, [pc, #184]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496a:	492b      	ldr	r1, [pc, #172]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d011      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800497e:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004984:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800498c:	4922      	ldr	r1, [pc, #136]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800499c:	d101      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049ae:	2301      	movs	r3, #1
 80049b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049be:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	4912      	ldr	r1, [pc, #72]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00b      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049e0:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049f0:	4909      	ldr	r1, [pc, #36]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d006      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80d9 	beq.w	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a0c:	4b02      	ldr	r3, [pc, #8]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a01      	ldr	r2, [pc, #4]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a16:	e001      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1e:	f7fd fa73 	bl	8001f08 <HAL_GetTick>
 8004a22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a26:	f7fd fa6f 	bl	8001f08 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b64      	cmp	r3, #100	; 0x64
 8004a32:	d901      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e194      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a38:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f0      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d021      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11d      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a58:	4b64      	ldr	r3, [pc, #400]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a5e:	0c1b      	lsrs	r3, r3, #16
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a66:	4b61      	ldr	r3, [pc, #388]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6c:	0e1b      	lsrs	r3, r3, #24
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	019a      	lsls	r2, r3, #6
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	061b      	lsls	r3, r3, #24
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	071b      	lsls	r3, r3, #28
 8004a8c:	4957      	ldr	r1, [pc, #348]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02e      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004abe:	d129      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ac0:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac6:	0c1b      	lsrs	r3, r3, #16
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ace:	4b47      	ldr	r3, [pc, #284]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad4:	0f1b      	lsrs	r3, r3, #28
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	019a      	lsls	r2, r3, #6
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	431a      	orrs	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	071b      	lsls	r3, r3, #28
 8004af4:	493d      	ldr	r1, [pc, #244]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004afc:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b02:	f023 021f 	bic.w	r2, r3, #31
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	4937      	ldr	r1, [pc, #220]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01d      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b20:	4b32      	ldr	r3, [pc, #200]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b26:	0e1b      	lsrs	r3, r3, #24
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b2e:	4b2f      	ldr	r3, [pc, #188]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b34:	0f1b      	lsrs	r3, r3, #28
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	019a      	lsls	r2, r3, #6
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	061b      	lsls	r3, r3, #24
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	071b      	lsls	r3, r3, #28
 8004b54:	4925      	ldr	r1, [pc, #148]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d011      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	019a      	lsls	r2, r3, #6
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	071b      	lsls	r3, r3, #28
 8004b84:	4919      	ldr	r1, [pc, #100]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a16      	ldr	r2, [pc, #88]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b98:	f7fd f9b6 	bl	8001f08 <HAL_GetTick>
 8004b9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ba0:	f7fd f9b2 	bl	8001f08 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0d7      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	f040 80cd 	bne.w	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a08      	ldr	r2, [pc, #32]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd2:	f7fd f999 	bl	8001f08 <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bda:	f7fd f995 	bl	8001f08 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b64      	cmp	r3, #100	; 0x64
 8004be6:	d903      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0ba      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004bec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bf0:	4b5e      	ldr	r3, [pc, #376]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfc:	d0ed      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d02e      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d12a      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c26:	4b51      	ldr	r3, [pc, #324]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c34:	4b4d      	ldr	r3, [pc, #308]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	0f1b      	lsrs	r3, r3, #28
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	019a      	lsls	r2, r3, #6
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	061b      	lsls	r3, r3, #24
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	071b      	lsls	r3, r3, #28
 8004c5a:	4944      	ldr	r1, [pc, #272]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c62:	4b42      	ldr	r3, [pc, #264]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	3b01      	subs	r3, #1
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	493d      	ldr	r1, [pc, #244]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d022      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c90:	d11d      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c92:	4b36      	ldr	r3, [pc, #216]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	0e1b      	lsrs	r3, r3, #24
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ca0:	4b32      	ldr	r3, [pc, #200]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	0f1b      	lsrs	r3, r3, #28
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	019a      	lsls	r2, r3, #6
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	061b      	lsls	r3, r3, #24
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	4929      	ldr	r1, [pc, #164]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d028      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cda:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	0e1b      	lsrs	r3, r3, #24
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ce8:	4b20      	ldr	r3, [pc, #128]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	019a      	lsls	r2, r3, #6
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	041b      	lsls	r3, r3, #16
 8004d00:	431a      	orrs	r2, r3
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	071b      	lsls	r3, r3, #28
 8004d0e:	4917      	ldr	r1, [pc, #92]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d16:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4911      	ldr	r1, [pc, #68]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d38:	f7fd f8e6 	bl	8001f08 <HAL_GetTick>
 8004d3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d40:	f7fd f8e2 	bl	8001f08 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	; 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e007      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d5e:	d1ef      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800

08004d70 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e025      	b.n	8004dd0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fc ff09 	bl	8001bb0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f001 fe1f 	bl	80069f4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	f001 fe73 	bl	8006aac <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e09d      	b.n	8004f26 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d108      	bne.n	8004e04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfa:	d009      	beq.n	8004e10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	61da      	str	r2, [r3, #28]
 8004e02:	e005      	b.n	8004e10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fc fcf4 	bl	8001818 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e50:	d902      	bls.n	8004e58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e002      	b.n	8004e5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e66:	d007      	beq.n	8004e78 <HAL_SPI_Init+0xa0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e70:	d002      	beq.n	8004e78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	ea42 0103 	orr.w	r1, r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	0c1b      	lsrs	r3, r3, #16
 8004ed4:	f003 0204 	and.w	r2, r3, #4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ef4:	ea42 0103 	orr.w	r1, r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e049      	b.n	8004fd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7fc fcc1 	bl	80018dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f000 fc33 	bl	80057d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d001      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e054      	b.n	800509e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a26      	ldr	r2, [pc, #152]	; (80050ac <HAL_TIM_Base_Start_IT+0xd0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d022      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501e:	d01d      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a22      	ldr	r2, [pc, #136]	; (80050b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d018      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d013      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00e      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <HAL_TIM_Base_Start_IT+0xe0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d009      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1c      	ldr	r2, [pc, #112]	; (80050c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1b      	ldr	r2, [pc, #108]	; (80050c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d115      	bne.n	8005088 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <HAL_TIM_Base_Start_IT+0xec>)
 8005064:	4013      	ands	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b06      	cmp	r3, #6
 800506c:	d015      	beq.n	800509a <HAL_TIM_Base_Start_IT+0xbe>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005074:	d011      	beq.n	800509a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0201 	orr.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005086:	e008      	b.n	800509a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e000      	b.n	800509c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40010000 	.word	0x40010000
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800
 80050b8:	40000c00 	.word	0x40000c00
 80050bc:	40010400 	.word	0x40010400
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40001800 	.word	0x40001800
 80050c8:	00010007 	.word	0x00010007

080050cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e049      	b.n	8005172 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f841 	bl	800517a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f000 fb64 	bl	80057d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d122      	bne.n	80051ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d11b      	bne.n	80051ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f06f 0202 	mvn.w	r2, #2
 80051ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fae3 	bl	800579c <HAL_TIM_IC_CaptureCallback>
 80051d6:	e005      	b.n	80051e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fad5 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fae6 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d122      	bne.n	800523e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b04      	cmp	r3, #4
 8005204:	d11b      	bne.n	800523e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f06f 0204 	mvn.w	r2, #4
 800520e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fab9 	bl	800579c <HAL_TIM_IC_CaptureCallback>
 800522a:	e005      	b.n	8005238 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 faab 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fabc 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b08      	cmp	r3, #8
 800524a:	d122      	bne.n	8005292 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b08      	cmp	r3, #8
 8005258:	d11b      	bne.n	8005292 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f06f 0208 	mvn.w	r2, #8
 8005262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2204      	movs	r2, #4
 8005268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fa8f 	bl	800579c <HAL_TIM_IC_CaptureCallback>
 800527e:	e005      	b.n	800528c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fa81 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa92 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b10      	cmp	r3, #16
 800529e:	d122      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b10      	cmp	r3, #16
 80052ac:	d11b      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f06f 0210 	mvn.w	r2, #16
 80052b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2208      	movs	r2, #8
 80052bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fa65 	bl	800579c <HAL_TIM_IC_CaptureCallback>
 80052d2:	e005      	b.n	80052e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fa57 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fa68 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d10e      	bne.n	8005312 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d107      	bne.n	8005312 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0201 	mvn.w	r2, #1
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7fc f845 	bl	800139c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531c:	2b80      	cmp	r3, #128	; 0x80
 800531e:	d10e      	bne.n	800533e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d107      	bne.n	800533e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fefb 	bl	8006134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534c:	d10e      	bne.n	800536c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005358:	2b80      	cmp	r3, #128	; 0x80
 800535a:	d107      	bne.n	800536c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 feee 	bl	8006148 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005376:	2b40      	cmp	r3, #64	; 0x40
 8005378:	d10e      	bne.n	8005398 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d107      	bne.n	8005398 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fa16 	bl	80057c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d10e      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d107      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0220 	mvn.w	r2, #32
 80053bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 feae 	bl	8006120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e0ff      	b.n	80055ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b14      	cmp	r3, #20
 80053f6:	f200 80f0 	bhi.w	80055da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053fa:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005455 	.word	0x08005455
 8005404:	080055db 	.word	0x080055db
 8005408:	080055db 	.word	0x080055db
 800540c:	080055db 	.word	0x080055db
 8005410:	08005495 	.word	0x08005495
 8005414:	080055db 	.word	0x080055db
 8005418:	080055db 	.word	0x080055db
 800541c:	080055db 	.word	0x080055db
 8005420:	080054d7 	.word	0x080054d7
 8005424:	080055db 	.word	0x080055db
 8005428:	080055db 	.word	0x080055db
 800542c:	080055db 	.word	0x080055db
 8005430:	08005517 	.word	0x08005517
 8005434:	080055db 	.word	0x080055db
 8005438:	080055db 	.word	0x080055db
 800543c:	080055db 	.word	0x080055db
 8005440:	08005559 	.word	0x08005559
 8005444:	080055db 	.word	0x080055db
 8005448:	080055db 	.word	0x080055db
 800544c:	080055db 	.word	0x080055db
 8005450:	08005599 	.word	0x08005599
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fa5c 	bl	8005918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0208 	orr.w	r2, r2, #8
 800546e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0204 	bic.w	r2, r2, #4
 800547e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6999      	ldr	r1, [r3, #24]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	619a      	str	r2, [r3, #24]
      break;
 8005492:	e0a5      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 faae 	bl	80059fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6999      	ldr	r1, [r3, #24]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	021a      	lsls	r2, r3, #8
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	619a      	str	r2, [r3, #24]
      break;
 80054d4:	e084      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fb05 	bl	8005aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0208 	orr.w	r2, r2, #8
 80054f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0204 	bic.w	r2, r2, #4
 8005500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69d9      	ldr	r1, [r3, #28]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	61da      	str	r2, [r3, #28]
      break;
 8005514:	e064      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fb5b 	bl	8005bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69d9      	ldr	r1, [r3, #28]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	021a      	lsls	r2, r3, #8
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	61da      	str	r2, [r3, #28]
      break;
 8005556:	e043      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fb92 	bl	8005c88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0208 	orr.w	r2, r2, #8
 8005572:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0204 	bic.w	r2, r2, #4
 8005582:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005596:	e023      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fbc4 	bl	8005d2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	021a      	lsls	r2, r3, #8
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055d8:	e002      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	75fb      	strb	r3, [r7, #23]
      break;
 80055de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop

080055f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_TIM_ConfigClockSource+0x1c>
 800560c:	2302      	movs	r3, #2
 800560e:	e0b4      	b.n	800577a <HAL_TIM_ConfigClockSource+0x186>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	4b56      	ldr	r3, [pc, #344]	; (8005784 <HAL_TIM_ConfigClockSource+0x190>)
 800562c:	4013      	ands	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005648:	d03e      	beq.n	80056c8 <HAL_TIM_ConfigClockSource+0xd4>
 800564a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564e:	f200 8087 	bhi.w	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005656:	f000 8086 	beq.w	8005766 <HAL_TIM_ConfigClockSource+0x172>
 800565a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565e:	d87f      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005660:	2b70      	cmp	r3, #112	; 0x70
 8005662:	d01a      	beq.n	800569a <HAL_TIM_ConfigClockSource+0xa6>
 8005664:	2b70      	cmp	r3, #112	; 0x70
 8005666:	d87b      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005668:	2b60      	cmp	r3, #96	; 0x60
 800566a:	d050      	beq.n	800570e <HAL_TIM_ConfigClockSource+0x11a>
 800566c:	2b60      	cmp	r3, #96	; 0x60
 800566e:	d877      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005670:	2b50      	cmp	r3, #80	; 0x50
 8005672:	d03c      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0xfa>
 8005674:	2b50      	cmp	r3, #80	; 0x50
 8005676:	d873      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d058      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x13a>
 800567c:	2b40      	cmp	r3, #64	; 0x40
 800567e:	d86f      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b30      	cmp	r3, #48	; 0x30
 8005682:	d064      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 8005684:	2b30      	cmp	r3, #48	; 0x30
 8005686:	d86b      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005688:	2b20      	cmp	r3, #32
 800568a:	d060      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 800568c:	2b20      	cmp	r3, #32
 800568e:	d867      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d05c      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 8005694:	2b10      	cmp	r3, #16
 8005696:	d05a      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 8005698:	e062      	b.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6899      	ldr	r1, [r3, #8]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f000 fc0d 	bl	8005ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	609a      	str	r2, [r3, #8]
      break;
 80056c6:	e04f      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6899      	ldr	r1, [r3, #8]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f000 fbf6 	bl	8005ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ea:	609a      	str	r2, [r3, #8]
      break;
 80056ec:	e03c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6859      	ldr	r1, [r3, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f000 fb6a 	bl	8005dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2150      	movs	r1, #80	; 0x50
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fbc3 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 800570c:	e02c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6859      	ldr	r1, [r3, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	461a      	mov	r2, r3
 800571c:	f000 fb89 	bl	8005e32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2160      	movs	r1, #96	; 0x60
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fbb3 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 800572c:	e01c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6859      	ldr	r1, [r3, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	461a      	mov	r2, r3
 800573c:	f000 fb4a 	bl	8005dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2140      	movs	r1, #64	; 0x40
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fba3 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 800574c:	e00c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f000 fb9a 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 800575e:	e003      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      break;
 8005764:	e000      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	fffeff88 	.word	0xfffeff88

08005788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a40      	ldr	r2, [pc, #256]	; (80058ec <TIM_Base_SetConfig+0x114>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d013      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f6:	d00f      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a3d      	ldr	r2, [pc, #244]	; (80058f0 <TIM_Base_SetConfig+0x118>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00b      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a3c      	ldr	r2, [pc, #240]	; (80058f4 <TIM_Base_SetConfig+0x11c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d007      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a3b      	ldr	r2, [pc, #236]	; (80058f8 <TIM_Base_SetConfig+0x120>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a3a      	ldr	r2, [pc, #232]	; (80058fc <TIM_Base_SetConfig+0x124>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d108      	bne.n	800582a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2f      	ldr	r2, [pc, #188]	; (80058ec <TIM_Base_SetConfig+0x114>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d02b      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005838:	d027      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2c      	ldr	r2, [pc, #176]	; (80058f0 <TIM_Base_SetConfig+0x118>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d023      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a2b      	ldr	r2, [pc, #172]	; (80058f4 <TIM_Base_SetConfig+0x11c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01f      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <TIM_Base_SetConfig+0x120>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01b      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a29      	ldr	r2, [pc, #164]	; (80058fc <TIM_Base_SetConfig+0x124>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d017      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a28      	ldr	r2, [pc, #160]	; (8005900 <TIM_Base_SetConfig+0x128>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a27      	ldr	r2, [pc, #156]	; (8005904 <TIM_Base_SetConfig+0x12c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00f      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a26      	ldr	r2, [pc, #152]	; (8005908 <TIM_Base_SetConfig+0x130>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00b      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <TIM_Base_SetConfig+0x134>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a24      	ldr	r2, [pc, #144]	; (8005910 <TIM_Base_SetConfig+0x138>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a23      	ldr	r2, [pc, #140]	; (8005914 <TIM_Base_SetConfig+0x13c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d108      	bne.n	800589c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <TIM_Base_SetConfig+0x114>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_Base_SetConfig+0xf8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <TIM_Base_SetConfig+0x124>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d103      	bne.n	80058d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	615a      	str	r2, [r3, #20]
}
 80058de:	bf00      	nop
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40010000 	.word	0x40010000
 80058f0:	40000400 	.word	0x40000400
 80058f4:	40000800 	.word	0x40000800
 80058f8:	40000c00 	.word	0x40000c00
 80058fc:	40010400 	.word	0x40010400
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800
 800590c:	40001800 	.word	0x40001800
 8005910:	40001c00 	.word	0x40001c00
 8005914:	40002000 	.word	0x40002000

08005918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	f023 0201 	bic.w	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4b2b      	ldr	r3, [pc, #172]	; (80059f0 <TIM_OC1_SetConfig+0xd8>)
 8005944:	4013      	ands	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f023 0302 	bic.w	r3, r3, #2
 8005960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a21      	ldr	r2, [pc, #132]	; (80059f4 <TIM_OC1_SetConfig+0xdc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_OC1_SetConfig+0x64>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a20      	ldr	r2, [pc, #128]	; (80059f8 <TIM_OC1_SetConfig+0xe0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d10c      	bne.n	8005996 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f023 0308 	bic.w	r3, r3, #8
 8005982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f023 0304 	bic.w	r3, r3, #4
 8005994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a16      	ldr	r2, [pc, #88]	; (80059f4 <TIM_OC1_SetConfig+0xdc>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d003      	beq.n	80059a6 <TIM_OC1_SetConfig+0x8e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <TIM_OC1_SetConfig+0xe0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d111      	bne.n	80059ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	621a      	str	r2, [r3, #32]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	fffeff8f 	.word	0xfffeff8f
 80059f4:	40010000 	.word	0x40010000
 80059f8:	40010400 	.word	0x40010400

080059fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f023 0210 	bic.w	r2, r3, #16
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4b2e      	ldr	r3, [pc, #184]	; (8005ae0 <TIM_OC2_SetConfig+0xe4>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	021b      	lsls	r3, r3, #8
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0320 	bic.w	r3, r3, #32
 8005a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a23      	ldr	r2, [pc, #140]	; (8005ae4 <TIM_OC2_SetConfig+0xe8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_OC2_SetConfig+0x68>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a22      	ldr	r2, [pc, #136]	; (8005ae8 <TIM_OC2_SetConfig+0xec>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d10d      	bne.n	8005a80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <TIM_OC2_SetConfig+0xe8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_OC2_SetConfig+0x94>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <TIM_OC2_SetConfig+0xec>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d113      	bne.n	8005ab8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	feff8fff 	.word	0xfeff8fff
 8005ae4:	40010000 	.word	0x40010000
 8005ae8:	40010400 	.word	0x40010400

08005aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <TIM_OC3_SetConfig+0xe0>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0303 	bic.w	r3, r3, #3
 8005b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a22      	ldr	r2, [pc, #136]	; (8005bd0 <TIM_OC3_SetConfig+0xe4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d003      	beq.n	8005b52 <TIM_OC3_SetConfig+0x66>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a21      	ldr	r2, [pc, #132]	; (8005bd4 <TIM_OC3_SetConfig+0xe8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d10d      	bne.n	8005b6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <TIM_OC3_SetConfig+0xe4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_OC3_SetConfig+0x92>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a16      	ldr	r2, [pc, #88]	; (8005bd4 <TIM_OC3_SetConfig+0xe8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d113      	bne.n	8005ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	621a      	str	r2, [r3, #32]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	fffeff8f 	.word	0xfffeff8f
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40010400 	.word	0x40010400

08005bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <TIM_OC4_SetConfig+0xa4>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	031b      	lsls	r3, r3, #12
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <TIM_OC4_SetConfig+0xa8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_OC4_SetConfig+0x68>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a12      	ldr	r2, [pc, #72]	; (8005c84 <TIM_OC4_SetConfig+0xac>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d109      	bne.n	8005c54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	019b      	lsls	r3, r3, #6
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	621a      	str	r2, [r3, #32]
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	feff8fff 	.word	0xfeff8fff
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40010400 	.word	0x40010400

08005c88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <TIM_OC5_SetConfig+0x98>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	041b      	lsls	r3, r3, #16
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a12      	ldr	r2, [pc, #72]	; (8005d24 <TIM_OC5_SetConfig+0x9c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d003      	beq.n	8005ce6 <TIM_OC5_SetConfig+0x5e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a11      	ldr	r2, [pc, #68]	; (8005d28 <TIM_OC5_SetConfig+0xa0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d109      	bne.n	8005cfa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	621a      	str	r2, [r3, #32]
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	fffeff8f 	.word	0xfffeff8f
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40010400 	.word	0x40010400

08005d2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4b1c      	ldr	r3, [pc, #112]	; (8005dc8 <TIM_OC6_SetConfig+0x9c>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	021b      	lsls	r3, r3, #8
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	051b      	lsls	r3, r3, #20
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <TIM_OC6_SetConfig+0xa0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_OC6_SetConfig+0x60>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a12      	ldr	r2, [pc, #72]	; (8005dd0 <TIM_OC6_SetConfig+0xa4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d109      	bne.n	8005da0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	029b      	lsls	r3, r3, #10
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	feff8fff 	.word	0xfeff8fff
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40010400 	.word	0x40010400

08005dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f023 0201 	bic.w	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f023 030a 	bic.w	r3, r3, #10
 8005e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	621a      	str	r2, [r3, #32]
}
 8005e26:	bf00      	nop
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b087      	sub	sp, #28
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f023 0210 	bic.w	r2, r3, #16
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	031b      	lsls	r3, r3, #12
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f043 0307 	orr.w	r3, r3, #7
 8005eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	609a      	str	r2, [r3, #8]
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	021a      	lsls	r2, r3, #8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	609a      	str	r2, [r3, #8]
}
 8005efc:	bf00      	nop
 8005efe:	371c      	adds	r7, #28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e06d      	b.n	8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a30      	ldr	r2, [pc, #192]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d004      	beq.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a2f      	ldr	r2, [pc, #188]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d108      	bne.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a20      	ldr	r2, [pc, #128]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d022      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f92:	d01d      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1d      	ldr	r2, [pc, #116]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d018      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1c      	ldr	r2, [pc, #112]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d013      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1a      	ldr	r2, [pc, #104]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a15      	ldr	r2, [pc, #84]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a16      	ldr	r2, [pc, #88]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a15      	ldr	r2, [pc, #84]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d10c      	bne.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40010000 	.word	0x40010000
 800600c:	40010400 	.word	0x40010400
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40000c00 	.word	0x40000c00
 800601c:	40014000 	.word	0x40014000
 8006020:	40001800 	.word	0x40001800

08006024 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800603c:	2302      	movs	r3, #2
 800603e:	e065      	b.n	800610c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	041b      	lsls	r3, r3, #16
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a16      	ldr	r2, [pc, #88]	; (8006118 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d004      	beq.n	80060ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a14      	ldr	r2, [pc, #80]	; (800611c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d115      	bne.n	80060fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	051b      	lsls	r3, r3, #20
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	40010000 	.word	0x40010000
 800611c:	40010400 	.word	0x40010400

08006120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e040      	b.n	80061f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fb fc04 	bl	800198c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2224      	movs	r2, #36	; 0x24
 8006188:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0201 	bic.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f82c 	bl	80061f8 <UART_SetConfig>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e022      	b.n	80061f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fa84 	bl	80066c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fb0b 	bl	8006804 <UART_CheckIdleState>
 80061ee:	4603      	mov	r3, r0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4ba6      	ldr	r3, [pc, #664]	; (80064bc <UART_SetConfig+0x2c4>)
 8006224:	4013      	ands	r3, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	6979      	ldr	r1, [r7, #20]
 800622c:	430b      	orrs	r3, r1
 800622e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	430a      	orrs	r2, r1
 8006268:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a94      	ldr	r2, [pc, #592]	; (80064c0 <UART_SetConfig+0x2c8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d120      	bne.n	80062b6 <UART_SetConfig+0xbe>
 8006274:	4b93      	ldr	r3, [pc, #588]	; (80064c4 <UART_SetConfig+0x2cc>)
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b03      	cmp	r3, #3
 8006280:	d816      	bhi.n	80062b0 <UART_SetConfig+0xb8>
 8006282:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <UART_SetConfig+0x90>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	08006299 	.word	0x08006299
 800628c:	080062a5 	.word	0x080062a5
 8006290:	0800629f 	.word	0x0800629f
 8006294:	080062ab 	.word	0x080062ab
 8006298:	2301      	movs	r3, #1
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e150      	b.n	8006540 <UART_SetConfig+0x348>
 800629e:	2302      	movs	r3, #2
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e14d      	b.n	8006540 <UART_SetConfig+0x348>
 80062a4:	2304      	movs	r3, #4
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e14a      	b.n	8006540 <UART_SetConfig+0x348>
 80062aa:	2308      	movs	r3, #8
 80062ac:	77fb      	strb	r3, [r7, #31]
 80062ae:	e147      	b.n	8006540 <UART_SetConfig+0x348>
 80062b0:	2310      	movs	r3, #16
 80062b2:	77fb      	strb	r3, [r7, #31]
 80062b4:	e144      	b.n	8006540 <UART_SetConfig+0x348>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a83      	ldr	r2, [pc, #524]	; (80064c8 <UART_SetConfig+0x2d0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d132      	bne.n	8006326 <UART_SetConfig+0x12e>
 80062c0:	4b80      	ldr	r3, [pc, #512]	; (80064c4 <UART_SetConfig+0x2cc>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b0c      	cmp	r3, #12
 80062cc:	d828      	bhi.n	8006320 <UART_SetConfig+0x128>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0xdc>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	08006309 	.word	0x08006309
 80062d8:	08006321 	.word	0x08006321
 80062dc:	08006321 	.word	0x08006321
 80062e0:	08006321 	.word	0x08006321
 80062e4:	08006315 	.word	0x08006315
 80062e8:	08006321 	.word	0x08006321
 80062ec:	08006321 	.word	0x08006321
 80062f0:	08006321 	.word	0x08006321
 80062f4:	0800630f 	.word	0x0800630f
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006321 	.word	0x08006321
 8006304:	0800631b 	.word	0x0800631b
 8006308:	2300      	movs	r3, #0
 800630a:	77fb      	strb	r3, [r7, #31]
 800630c:	e118      	b.n	8006540 <UART_SetConfig+0x348>
 800630e:	2302      	movs	r3, #2
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e115      	b.n	8006540 <UART_SetConfig+0x348>
 8006314:	2304      	movs	r3, #4
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e112      	b.n	8006540 <UART_SetConfig+0x348>
 800631a:	2308      	movs	r3, #8
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e10f      	b.n	8006540 <UART_SetConfig+0x348>
 8006320:	2310      	movs	r3, #16
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e10c      	b.n	8006540 <UART_SetConfig+0x348>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a68      	ldr	r2, [pc, #416]	; (80064cc <UART_SetConfig+0x2d4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d120      	bne.n	8006372 <UART_SetConfig+0x17a>
 8006330:	4b64      	ldr	r3, [pc, #400]	; (80064c4 <UART_SetConfig+0x2cc>)
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006336:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800633a:	2b30      	cmp	r3, #48	; 0x30
 800633c:	d013      	beq.n	8006366 <UART_SetConfig+0x16e>
 800633e:	2b30      	cmp	r3, #48	; 0x30
 8006340:	d814      	bhi.n	800636c <UART_SetConfig+0x174>
 8006342:	2b20      	cmp	r3, #32
 8006344:	d009      	beq.n	800635a <UART_SetConfig+0x162>
 8006346:	2b20      	cmp	r3, #32
 8006348:	d810      	bhi.n	800636c <UART_SetConfig+0x174>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <UART_SetConfig+0x15c>
 800634e:	2b10      	cmp	r3, #16
 8006350:	d006      	beq.n	8006360 <UART_SetConfig+0x168>
 8006352:	e00b      	b.n	800636c <UART_SetConfig+0x174>
 8006354:	2300      	movs	r3, #0
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e0f2      	b.n	8006540 <UART_SetConfig+0x348>
 800635a:	2302      	movs	r3, #2
 800635c:	77fb      	strb	r3, [r7, #31]
 800635e:	e0ef      	b.n	8006540 <UART_SetConfig+0x348>
 8006360:	2304      	movs	r3, #4
 8006362:	77fb      	strb	r3, [r7, #31]
 8006364:	e0ec      	b.n	8006540 <UART_SetConfig+0x348>
 8006366:	2308      	movs	r3, #8
 8006368:	77fb      	strb	r3, [r7, #31]
 800636a:	e0e9      	b.n	8006540 <UART_SetConfig+0x348>
 800636c:	2310      	movs	r3, #16
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	e0e6      	b.n	8006540 <UART_SetConfig+0x348>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a56      	ldr	r2, [pc, #344]	; (80064d0 <UART_SetConfig+0x2d8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d120      	bne.n	80063be <UART_SetConfig+0x1c6>
 800637c:	4b51      	ldr	r3, [pc, #324]	; (80064c4 <UART_SetConfig+0x2cc>)
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006382:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006386:	2bc0      	cmp	r3, #192	; 0xc0
 8006388:	d013      	beq.n	80063b2 <UART_SetConfig+0x1ba>
 800638a:	2bc0      	cmp	r3, #192	; 0xc0
 800638c:	d814      	bhi.n	80063b8 <UART_SetConfig+0x1c0>
 800638e:	2b80      	cmp	r3, #128	; 0x80
 8006390:	d009      	beq.n	80063a6 <UART_SetConfig+0x1ae>
 8006392:	2b80      	cmp	r3, #128	; 0x80
 8006394:	d810      	bhi.n	80063b8 <UART_SetConfig+0x1c0>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <UART_SetConfig+0x1a8>
 800639a:	2b40      	cmp	r3, #64	; 0x40
 800639c:	d006      	beq.n	80063ac <UART_SetConfig+0x1b4>
 800639e:	e00b      	b.n	80063b8 <UART_SetConfig+0x1c0>
 80063a0:	2300      	movs	r3, #0
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e0cc      	b.n	8006540 <UART_SetConfig+0x348>
 80063a6:	2302      	movs	r3, #2
 80063a8:	77fb      	strb	r3, [r7, #31]
 80063aa:	e0c9      	b.n	8006540 <UART_SetConfig+0x348>
 80063ac:	2304      	movs	r3, #4
 80063ae:	77fb      	strb	r3, [r7, #31]
 80063b0:	e0c6      	b.n	8006540 <UART_SetConfig+0x348>
 80063b2:	2308      	movs	r3, #8
 80063b4:	77fb      	strb	r3, [r7, #31]
 80063b6:	e0c3      	b.n	8006540 <UART_SetConfig+0x348>
 80063b8:	2310      	movs	r3, #16
 80063ba:	77fb      	strb	r3, [r7, #31]
 80063bc:	e0c0      	b.n	8006540 <UART_SetConfig+0x348>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a44      	ldr	r2, [pc, #272]	; (80064d4 <UART_SetConfig+0x2dc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d125      	bne.n	8006414 <UART_SetConfig+0x21c>
 80063c8:	4b3e      	ldr	r3, [pc, #248]	; (80064c4 <UART_SetConfig+0x2cc>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063d6:	d017      	beq.n	8006408 <UART_SetConfig+0x210>
 80063d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063dc:	d817      	bhi.n	800640e <UART_SetConfig+0x216>
 80063de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e2:	d00b      	beq.n	80063fc <UART_SetConfig+0x204>
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e8:	d811      	bhi.n	800640e <UART_SetConfig+0x216>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <UART_SetConfig+0x1fe>
 80063ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f2:	d006      	beq.n	8006402 <UART_SetConfig+0x20a>
 80063f4:	e00b      	b.n	800640e <UART_SetConfig+0x216>
 80063f6:	2300      	movs	r3, #0
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e0a1      	b.n	8006540 <UART_SetConfig+0x348>
 80063fc:	2302      	movs	r3, #2
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e09e      	b.n	8006540 <UART_SetConfig+0x348>
 8006402:	2304      	movs	r3, #4
 8006404:	77fb      	strb	r3, [r7, #31]
 8006406:	e09b      	b.n	8006540 <UART_SetConfig+0x348>
 8006408:	2308      	movs	r3, #8
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	e098      	b.n	8006540 <UART_SetConfig+0x348>
 800640e:	2310      	movs	r3, #16
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e095      	b.n	8006540 <UART_SetConfig+0x348>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a2f      	ldr	r2, [pc, #188]	; (80064d8 <UART_SetConfig+0x2e0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d125      	bne.n	800646a <UART_SetConfig+0x272>
 800641e:	4b29      	ldr	r3, [pc, #164]	; (80064c4 <UART_SetConfig+0x2cc>)
 8006420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006424:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006428:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800642c:	d017      	beq.n	800645e <UART_SetConfig+0x266>
 800642e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006432:	d817      	bhi.n	8006464 <UART_SetConfig+0x26c>
 8006434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006438:	d00b      	beq.n	8006452 <UART_SetConfig+0x25a>
 800643a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800643e:	d811      	bhi.n	8006464 <UART_SetConfig+0x26c>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <UART_SetConfig+0x254>
 8006444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006448:	d006      	beq.n	8006458 <UART_SetConfig+0x260>
 800644a:	e00b      	b.n	8006464 <UART_SetConfig+0x26c>
 800644c:	2301      	movs	r3, #1
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e076      	b.n	8006540 <UART_SetConfig+0x348>
 8006452:	2302      	movs	r3, #2
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e073      	b.n	8006540 <UART_SetConfig+0x348>
 8006458:	2304      	movs	r3, #4
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e070      	b.n	8006540 <UART_SetConfig+0x348>
 800645e:	2308      	movs	r3, #8
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e06d      	b.n	8006540 <UART_SetConfig+0x348>
 8006464:	2310      	movs	r3, #16
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e06a      	b.n	8006540 <UART_SetConfig+0x348>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <UART_SetConfig+0x2e4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d138      	bne.n	80064e6 <UART_SetConfig+0x2ee>
 8006474:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <UART_SetConfig+0x2cc>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800647e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006482:	d017      	beq.n	80064b4 <UART_SetConfig+0x2bc>
 8006484:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006488:	d82a      	bhi.n	80064e0 <UART_SetConfig+0x2e8>
 800648a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648e:	d00b      	beq.n	80064a8 <UART_SetConfig+0x2b0>
 8006490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006494:	d824      	bhi.n	80064e0 <UART_SetConfig+0x2e8>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <UART_SetConfig+0x2aa>
 800649a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649e:	d006      	beq.n	80064ae <UART_SetConfig+0x2b6>
 80064a0:	e01e      	b.n	80064e0 <UART_SetConfig+0x2e8>
 80064a2:	2300      	movs	r3, #0
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e04b      	b.n	8006540 <UART_SetConfig+0x348>
 80064a8:	2302      	movs	r3, #2
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	e048      	b.n	8006540 <UART_SetConfig+0x348>
 80064ae:	2304      	movs	r3, #4
 80064b0:	77fb      	strb	r3, [r7, #31]
 80064b2:	e045      	b.n	8006540 <UART_SetConfig+0x348>
 80064b4:	2308      	movs	r3, #8
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e042      	b.n	8006540 <UART_SetConfig+0x348>
 80064ba:	bf00      	nop
 80064bc:	efff69f3 	.word	0xefff69f3
 80064c0:	40011000 	.word	0x40011000
 80064c4:	40023800 	.word	0x40023800
 80064c8:	40004400 	.word	0x40004400
 80064cc:	40004800 	.word	0x40004800
 80064d0:	40004c00 	.word	0x40004c00
 80064d4:	40005000 	.word	0x40005000
 80064d8:	40011400 	.word	0x40011400
 80064dc:	40007800 	.word	0x40007800
 80064e0:	2310      	movs	r3, #16
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e02c      	b.n	8006540 <UART_SetConfig+0x348>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a72      	ldr	r2, [pc, #456]	; (80066b4 <UART_SetConfig+0x4bc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d125      	bne.n	800653c <UART_SetConfig+0x344>
 80064f0:	4b71      	ldr	r3, [pc, #452]	; (80066b8 <UART_SetConfig+0x4c0>)
 80064f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064fe:	d017      	beq.n	8006530 <UART_SetConfig+0x338>
 8006500:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006504:	d817      	bhi.n	8006536 <UART_SetConfig+0x33e>
 8006506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800650a:	d00b      	beq.n	8006524 <UART_SetConfig+0x32c>
 800650c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006510:	d811      	bhi.n	8006536 <UART_SetConfig+0x33e>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <UART_SetConfig+0x326>
 8006516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651a:	d006      	beq.n	800652a <UART_SetConfig+0x332>
 800651c:	e00b      	b.n	8006536 <UART_SetConfig+0x33e>
 800651e:	2300      	movs	r3, #0
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e00d      	b.n	8006540 <UART_SetConfig+0x348>
 8006524:	2302      	movs	r3, #2
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e00a      	b.n	8006540 <UART_SetConfig+0x348>
 800652a:	2304      	movs	r3, #4
 800652c:	77fb      	strb	r3, [r7, #31]
 800652e:	e007      	b.n	8006540 <UART_SetConfig+0x348>
 8006530:	2308      	movs	r3, #8
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e004      	b.n	8006540 <UART_SetConfig+0x348>
 8006536:	2310      	movs	r3, #16
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e001      	b.n	8006540 <UART_SetConfig+0x348>
 800653c:	2310      	movs	r3, #16
 800653e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006548:	d15b      	bne.n	8006602 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800654a:	7ffb      	ldrb	r3, [r7, #31]
 800654c:	2b08      	cmp	r3, #8
 800654e:	d828      	bhi.n	80065a2 <UART_SetConfig+0x3aa>
 8006550:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <UART_SetConfig+0x360>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	0800657d 	.word	0x0800657d
 800655c:	08006585 	.word	0x08006585
 8006560:	0800658d 	.word	0x0800658d
 8006564:	080065a3 	.word	0x080065a3
 8006568:	08006593 	.word	0x08006593
 800656c:	080065a3 	.word	0x080065a3
 8006570:	080065a3 	.word	0x080065a3
 8006574:	080065a3 	.word	0x080065a3
 8006578:	0800659b 	.word	0x0800659b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800657c:	f7fd ffae 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8006580:	61b8      	str	r0, [r7, #24]
        break;
 8006582:	e013      	b.n	80065ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006584:	f7fd ffbe 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 8006588:	61b8      	str	r0, [r7, #24]
        break;
 800658a:	e00f      	b.n	80065ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800658c:	4b4b      	ldr	r3, [pc, #300]	; (80066bc <UART_SetConfig+0x4c4>)
 800658e:	61bb      	str	r3, [r7, #24]
        break;
 8006590:	e00c      	b.n	80065ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006592:	f7fd fed1 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 8006596:	61b8      	str	r0, [r7, #24]
        break;
 8006598:	e008      	b.n	80065ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800659a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800659e:	61bb      	str	r3, [r7, #24]
        break;
 80065a0:	e004      	b.n	80065ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	77bb      	strb	r3, [r7, #30]
        break;
 80065aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d074      	beq.n	800669c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	005a      	lsls	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	085b      	lsrs	r3, r3, #1
 80065bc:	441a      	add	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b0f      	cmp	r3, #15
 80065cc:	d916      	bls.n	80065fc <UART_SetConfig+0x404>
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d4:	d212      	bcs.n	80065fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f023 030f 	bic.w	r3, r3, #15
 80065de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	89fb      	ldrh	r3, [r7, #14]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	89fa      	ldrh	r2, [r7, #14]
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	e04f      	b.n	800669c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	77bb      	strb	r3, [r7, #30]
 8006600:	e04c      	b.n	800669c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006602:	7ffb      	ldrb	r3, [r7, #31]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d828      	bhi.n	800665a <UART_SetConfig+0x462>
 8006608:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <UART_SetConfig+0x418>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006635 	.word	0x08006635
 8006614:	0800663d 	.word	0x0800663d
 8006618:	08006645 	.word	0x08006645
 800661c:	0800665b 	.word	0x0800665b
 8006620:	0800664b 	.word	0x0800664b
 8006624:	0800665b 	.word	0x0800665b
 8006628:	0800665b 	.word	0x0800665b
 800662c:	0800665b 	.word	0x0800665b
 8006630:	08006653 	.word	0x08006653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006634:	f7fd ff52 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8006638:	61b8      	str	r0, [r7, #24]
        break;
 800663a:	e013      	b.n	8006664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800663c:	f7fd ff62 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 8006640:	61b8      	str	r0, [r7, #24]
        break;
 8006642:	e00f      	b.n	8006664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006644:	4b1d      	ldr	r3, [pc, #116]	; (80066bc <UART_SetConfig+0x4c4>)
 8006646:	61bb      	str	r3, [r7, #24]
        break;
 8006648:	e00c      	b.n	8006664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664a:	f7fd fe75 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 800664e:	61b8      	str	r0, [r7, #24]
        break;
 8006650:	e008      	b.n	8006664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006656:	61bb      	str	r3, [r7, #24]
        break;
 8006658:	e004      	b.n	8006664 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	77bb      	strb	r3, [r7, #30]
        break;
 8006662:	bf00      	nop
    }

    if (pclk != 0U)
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d018      	beq.n	800669c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	085a      	lsrs	r2, r3, #1
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	441a      	add	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	fbb2 f3f3 	udiv	r3, r2, r3
 800667c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b0f      	cmp	r3, #15
 8006682:	d909      	bls.n	8006698 <UART_SetConfig+0x4a0>
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800668a:	d205      	bcs.n	8006698 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60da      	str	r2, [r3, #12]
 8006696:	e001      	b.n	800669c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40007c00 	.word	0x40007c00
 80066b8:	40023800 	.word	0x40023800
 80066bc:	00f42400 	.word	0x00f42400

080066c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01a      	beq.n	80067d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067be:	d10a      	bne.n	80067d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	605a      	str	r2, [r3, #4]
  }
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af02      	add	r7, sp, #8
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006814:	f7fb fb78 	bl	8001f08 <HAL_GetTick>
 8006818:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b08      	cmp	r3, #8
 8006826:	d10e      	bne.n	8006846 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f817 	bl	800686a <UART_WaitOnFlagUntilTimeout>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e00d      	b.n	8006862 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b09c      	sub	sp, #112	; 0x70
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800687a:	e0a5      	b.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	f000 80a1 	beq.w	80069c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006886:	f7fb fb3f 	bl	8001f08 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006892:	429a      	cmp	r2, r3
 8006894:	d302      	bcc.n	800689c <UART_WaitOnFlagUntilTimeout+0x32>
 8006896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006898:	2b00      	cmp	r3, #0
 800689a:	d13e      	bne.n	800691a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068b0:	667b      	str	r3, [r7, #100]	; 0x64
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e6      	bne.n	800689c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3308      	adds	r3, #8
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	663b      	str	r3, [r7, #96]	; 0x60
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3308      	adds	r3, #8
 80068ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80068f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e5      	bne.n	80068ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2220      	movs	r2, #32
 8006906:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e067      	b.n	80069ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	d04f      	beq.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006936:	d147      	bne.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006940:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006956:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
 8006962:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e6      	bne.n	8006942 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3308      	adds	r3, #8
 800697a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	613b      	str	r3, [r7, #16]
   return(result);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	66bb      	str	r3, [r7, #104]	; 0x68
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3308      	adds	r3, #8
 8006992:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006994:	623a      	str	r2, [r7, #32]
 8006996:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	69f9      	ldr	r1, [r7, #28]
 800699a:	6a3a      	ldr	r2, [r7, #32]
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e5      	bne.n	8006974 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e010      	b.n	80069ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69da      	ldr	r2, [r3, #28]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4013      	ands	r3, r2
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	bf0c      	ite	eq
 80069d8:	2301      	moveq	r3, #1
 80069da:	2300      	movne	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	461a      	mov	r2, r3
 80069e0:	79fb      	ldrb	r3, [r7, #7]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	f43f af4a 	beq.w	800687c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3770      	adds	r7, #112	; 0x70
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d121      	bne.n	8006a4a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	4b27      	ldr	r3, [pc, #156]	; (8006aa8 <FMC_SDRAM_Init+0xb4>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	6851      	ldr	r1, [r2, #4]
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	6892      	ldr	r2, [r2, #8]
 8006a16:	4311      	orrs	r1, r2
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	68d2      	ldr	r2, [r2, #12]
 8006a1c:	4311      	orrs	r1, r2
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	6912      	ldr	r2, [r2, #16]
 8006a22:	4311      	orrs	r1, r2
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	6952      	ldr	r2, [r2, #20]
 8006a28:	4311      	orrs	r1, r2
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	6992      	ldr	r2, [r2, #24]
 8006a2e:	4311      	orrs	r1, r2
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	69d2      	ldr	r2, [r2, #28]
 8006a34:	4311      	orrs	r1, r2
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	6a12      	ldr	r2, [r2, #32]
 8006a3a:	4311      	orrs	r1, r2
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a40:	430a      	orrs	r2, r1
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	e026      	b.n	8006a98 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	69d9      	ldr	r1, [r3, #28]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	4319      	orrs	r1, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	430b      	orrs	r3, r1
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <FMC_SDRAM_Init+0xb4>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	6851      	ldr	r1, [r2, #4]
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	6892      	ldr	r2, [r2, #8]
 8006a78:	4311      	orrs	r1, r2
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	68d2      	ldr	r2, [r2, #12]
 8006a7e:	4311      	orrs	r1, r2
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	6912      	ldr	r2, [r2, #16]
 8006a84:	4311      	orrs	r1, r2
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	6952      	ldr	r2, [r2, #20]
 8006a8a:	4311      	orrs	r1, r2
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	6992      	ldr	r2, [r2, #24]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	ffff8000 	.word	0xffff8000

08006aac <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d128      	bne.n	8006b10 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	1e59      	subs	r1, r3, #1
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	4319      	orrs	r1, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	4319      	orrs	r1, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	031b      	lsls	r3, r3, #12
 8006ae8:	4319      	orrs	r1, r3
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	041b      	lsls	r3, r3, #16
 8006af2:	4319      	orrs	r1, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	051b      	lsls	r3, r3, #20
 8006afc:	4319      	orrs	r1, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	061b      	lsls	r3, r3, #24
 8006b06:	430b      	orrs	r3, r1
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	609a      	str	r2, [r3, #8]
 8006b0e:	e02d      	b.n	8006b6c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	4b19      	ldr	r3, [pc, #100]	; (8006b7c <FMC_SDRAM_Timing_Init+0xd0>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	68d2      	ldr	r2, [r2, #12]
 8006b1c:	3a01      	subs	r2, #1
 8006b1e:	0311      	lsls	r1, r2, #12
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	6952      	ldr	r2, [r2, #20]
 8006b24:	3a01      	subs	r2, #1
 8006b26:	0512      	lsls	r2, r2, #20
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	1e59      	subs	r1, r3, #1
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	4319      	orrs	r1, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	4319      	orrs	r1, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	041b      	lsls	r3, r3, #16
 8006b5a:	4319      	orrs	r1, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	061b      	lsls	r3, r3, #24
 8006b64:	430b      	orrs	r3, r1
 8006b66:	431a      	orrs	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	ff0f0fff 	.word	0xff0f0fff

08006b80 <__errno>:
 8006b80:	4b01      	ldr	r3, [pc, #4]	; (8006b88 <__errno+0x8>)
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	2000000c 	.word	0x2000000c

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4d0d      	ldr	r5, [pc, #52]	; (8006bc4 <__libc_init_array+0x38>)
 8006b90:	4c0d      	ldr	r4, [pc, #52]	; (8006bc8 <__libc_init_array+0x3c>)
 8006b92:	1b64      	subs	r4, r4, r5
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	2600      	movs	r6, #0
 8006b98:	42a6      	cmp	r6, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	4d0b      	ldr	r5, [pc, #44]	; (8006bcc <__libc_init_array+0x40>)
 8006b9e:	4c0c      	ldr	r4, [pc, #48]	; (8006bd0 <__libc_init_array+0x44>)
 8006ba0:	f000 ffae 	bl	8007b00 <_init>
 8006ba4:	1b64      	subs	r4, r4, r5
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	2600      	movs	r6, #0
 8006baa:	42a6      	cmp	r6, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb4:	4798      	blx	r3
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbe:	4798      	blx	r3
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	08007bd8 	.word	0x08007bd8
 8006bc8:	08007bd8 	.word	0x08007bd8
 8006bcc:	08007bd8 	.word	0x08007bd8
 8006bd0:	08007bdc 	.word	0x08007bdc

08006bd4 <memset>:
 8006bd4:	4402      	add	r2, r0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d100      	bne.n	8006bde <memset+0xa>
 8006bdc:	4770      	bx	lr
 8006bde:	f803 1b01 	strb.w	r1, [r3], #1
 8006be2:	e7f9      	b.n	8006bd8 <memset+0x4>

08006be4 <iprintf>:
 8006be4:	b40f      	push	{r0, r1, r2, r3}
 8006be6:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <iprintf+0x2c>)
 8006be8:	b513      	push	{r0, r1, r4, lr}
 8006bea:	681c      	ldr	r4, [r3, #0]
 8006bec:	b124      	cbz	r4, 8006bf8 <iprintf+0x14>
 8006bee:	69a3      	ldr	r3, [r4, #24]
 8006bf0:	b913      	cbnz	r3, 8006bf8 <iprintf+0x14>
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 f866 	bl	8006cc4 <__sinit>
 8006bf8:	ab05      	add	r3, sp, #20
 8006bfa:	9a04      	ldr	r2, [sp, #16]
 8006bfc:	68a1      	ldr	r1, [r4, #8]
 8006bfe:	9301      	str	r3, [sp, #4]
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 f9bd 	bl	8006f80 <_vfiprintf_r>
 8006c06:	b002      	add	sp, #8
 8006c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0c:	b004      	add	sp, #16
 8006c0e:	4770      	bx	lr
 8006c10:	2000000c 	.word	0x2000000c

08006c14 <std>:
 8006c14:	2300      	movs	r3, #0
 8006c16:	b510      	push	{r4, lr}
 8006c18:	4604      	mov	r4, r0
 8006c1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c22:	6083      	str	r3, [r0, #8]
 8006c24:	8181      	strh	r1, [r0, #12]
 8006c26:	6643      	str	r3, [r0, #100]	; 0x64
 8006c28:	81c2      	strh	r2, [r0, #14]
 8006c2a:	6183      	str	r3, [r0, #24]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	2208      	movs	r2, #8
 8006c30:	305c      	adds	r0, #92	; 0x5c
 8006c32:	f7ff ffcf 	bl	8006bd4 <memset>
 8006c36:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <std+0x38>)
 8006c38:	6263      	str	r3, [r4, #36]	; 0x24
 8006c3a:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <std+0x3c>)
 8006c3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <std+0x40>)
 8006c40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c42:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <std+0x44>)
 8006c44:	6224      	str	r4, [r4, #32]
 8006c46:	6323      	str	r3, [r4, #48]	; 0x30
 8006c48:	bd10      	pop	{r4, pc}
 8006c4a:	bf00      	nop
 8006c4c:	08007529 	.word	0x08007529
 8006c50:	0800754b 	.word	0x0800754b
 8006c54:	08007583 	.word	0x08007583
 8006c58:	080075a7 	.word	0x080075a7

08006c5c <_cleanup_r>:
 8006c5c:	4901      	ldr	r1, [pc, #4]	; (8006c64 <_cleanup_r+0x8>)
 8006c5e:	f000 b8af 	b.w	8006dc0 <_fwalk_reent>
 8006c62:	bf00      	nop
 8006c64:	08007881 	.word	0x08007881

08006c68 <__sfmoreglue>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	2268      	movs	r2, #104	; 0x68
 8006c6c:	1e4d      	subs	r5, r1, #1
 8006c6e:	4355      	muls	r5, r2
 8006c70:	460e      	mov	r6, r1
 8006c72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c76:	f000 f8e5 	bl	8006e44 <_malloc_r>
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	b140      	cbz	r0, 8006c90 <__sfmoreglue+0x28>
 8006c7e:	2100      	movs	r1, #0
 8006c80:	e9c0 1600 	strd	r1, r6, [r0]
 8006c84:	300c      	adds	r0, #12
 8006c86:	60a0      	str	r0, [r4, #8]
 8006c88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c8c:	f7ff ffa2 	bl	8006bd4 <memset>
 8006c90:	4620      	mov	r0, r4
 8006c92:	bd70      	pop	{r4, r5, r6, pc}

08006c94 <__sfp_lock_acquire>:
 8006c94:	4801      	ldr	r0, [pc, #4]	; (8006c9c <__sfp_lock_acquire+0x8>)
 8006c96:	f000 b8b3 	b.w	8006e00 <__retarget_lock_acquire_recursive>
 8006c9a:	bf00      	nop
 8006c9c:	200003ed 	.word	0x200003ed

08006ca0 <__sfp_lock_release>:
 8006ca0:	4801      	ldr	r0, [pc, #4]	; (8006ca8 <__sfp_lock_release+0x8>)
 8006ca2:	f000 b8ae 	b.w	8006e02 <__retarget_lock_release_recursive>
 8006ca6:	bf00      	nop
 8006ca8:	200003ed 	.word	0x200003ed

08006cac <__sinit_lock_acquire>:
 8006cac:	4801      	ldr	r0, [pc, #4]	; (8006cb4 <__sinit_lock_acquire+0x8>)
 8006cae:	f000 b8a7 	b.w	8006e00 <__retarget_lock_acquire_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	200003ee 	.word	0x200003ee

08006cb8 <__sinit_lock_release>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	; (8006cc0 <__sinit_lock_release+0x8>)
 8006cba:	f000 b8a2 	b.w	8006e02 <__retarget_lock_release_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	200003ee 	.word	0x200003ee

08006cc4 <__sinit>:
 8006cc4:	b510      	push	{r4, lr}
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	f7ff fff0 	bl	8006cac <__sinit_lock_acquire>
 8006ccc:	69a3      	ldr	r3, [r4, #24]
 8006cce:	b11b      	cbz	r3, 8006cd8 <__sinit+0x14>
 8006cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd4:	f7ff bff0 	b.w	8006cb8 <__sinit_lock_release>
 8006cd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cdc:	6523      	str	r3, [r4, #80]	; 0x50
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <__sinit+0x68>)
 8006ce0:	4a13      	ldr	r2, [pc, #76]	; (8006d30 <__sinit+0x6c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	bf04      	itt	eq
 8006cea:	2301      	moveq	r3, #1
 8006cec:	61a3      	streq	r3, [r4, #24]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 f820 	bl	8006d34 <__sfp>
 8006cf4:	6060      	str	r0, [r4, #4]
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 f81c 	bl	8006d34 <__sfp>
 8006cfc:	60a0      	str	r0, [r4, #8]
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 f818 	bl	8006d34 <__sfp>
 8006d04:	2200      	movs	r2, #0
 8006d06:	60e0      	str	r0, [r4, #12]
 8006d08:	2104      	movs	r1, #4
 8006d0a:	6860      	ldr	r0, [r4, #4]
 8006d0c:	f7ff ff82 	bl	8006c14 <std>
 8006d10:	68a0      	ldr	r0, [r4, #8]
 8006d12:	2201      	movs	r2, #1
 8006d14:	2109      	movs	r1, #9
 8006d16:	f7ff ff7d 	bl	8006c14 <std>
 8006d1a:	68e0      	ldr	r0, [r4, #12]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	2112      	movs	r1, #18
 8006d20:	f7ff ff78 	bl	8006c14 <std>
 8006d24:	2301      	movs	r3, #1
 8006d26:	61a3      	str	r3, [r4, #24]
 8006d28:	e7d2      	b.n	8006cd0 <__sinit+0xc>
 8006d2a:	bf00      	nop
 8006d2c:	08007b38 	.word	0x08007b38
 8006d30:	08006c5d 	.word	0x08006c5d

08006d34 <__sfp>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	4607      	mov	r7, r0
 8006d38:	f7ff ffac 	bl	8006c94 <__sfp_lock_acquire>
 8006d3c:	4b1e      	ldr	r3, [pc, #120]	; (8006db8 <__sfp+0x84>)
 8006d3e:	681e      	ldr	r6, [r3, #0]
 8006d40:	69b3      	ldr	r3, [r6, #24]
 8006d42:	b913      	cbnz	r3, 8006d4a <__sfp+0x16>
 8006d44:	4630      	mov	r0, r6
 8006d46:	f7ff ffbd 	bl	8006cc4 <__sinit>
 8006d4a:	3648      	adds	r6, #72	; 0x48
 8006d4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	d503      	bpl.n	8006d5c <__sfp+0x28>
 8006d54:	6833      	ldr	r3, [r6, #0]
 8006d56:	b30b      	cbz	r3, 8006d9c <__sfp+0x68>
 8006d58:	6836      	ldr	r6, [r6, #0]
 8006d5a:	e7f7      	b.n	8006d4c <__sfp+0x18>
 8006d5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d60:	b9d5      	cbnz	r5, 8006d98 <__sfp+0x64>
 8006d62:	4b16      	ldr	r3, [pc, #88]	; (8006dbc <__sfp+0x88>)
 8006d64:	60e3      	str	r3, [r4, #12]
 8006d66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d6a:	6665      	str	r5, [r4, #100]	; 0x64
 8006d6c:	f000 f847 	bl	8006dfe <__retarget_lock_init_recursive>
 8006d70:	f7ff ff96 	bl	8006ca0 <__sfp_lock_release>
 8006d74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d7c:	6025      	str	r5, [r4, #0]
 8006d7e:	61a5      	str	r5, [r4, #24]
 8006d80:	2208      	movs	r2, #8
 8006d82:	4629      	mov	r1, r5
 8006d84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d88:	f7ff ff24 	bl	8006bd4 <memset>
 8006d8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d94:	4620      	mov	r0, r4
 8006d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d98:	3468      	adds	r4, #104	; 0x68
 8006d9a:	e7d9      	b.n	8006d50 <__sfp+0x1c>
 8006d9c:	2104      	movs	r1, #4
 8006d9e:	4638      	mov	r0, r7
 8006da0:	f7ff ff62 	bl	8006c68 <__sfmoreglue>
 8006da4:	4604      	mov	r4, r0
 8006da6:	6030      	str	r0, [r6, #0]
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d1d5      	bne.n	8006d58 <__sfp+0x24>
 8006dac:	f7ff ff78 	bl	8006ca0 <__sfp_lock_release>
 8006db0:	230c      	movs	r3, #12
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	e7ee      	b.n	8006d94 <__sfp+0x60>
 8006db6:	bf00      	nop
 8006db8:	08007b38 	.word	0x08007b38
 8006dbc:	ffff0001 	.word	0xffff0001

08006dc0 <_fwalk_reent>:
 8006dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	4688      	mov	r8, r1
 8006dc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dcc:	2700      	movs	r7, #0
 8006dce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dd2:	f1b9 0901 	subs.w	r9, r9, #1
 8006dd6:	d505      	bpl.n	8006de4 <_fwalk_reent+0x24>
 8006dd8:	6824      	ldr	r4, [r4, #0]
 8006dda:	2c00      	cmp	r4, #0
 8006ddc:	d1f7      	bne.n	8006dce <_fwalk_reent+0xe>
 8006dde:	4638      	mov	r0, r7
 8006de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de4:	89ab      	ldrh	r3, [r5, #12]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d907      	bls.n	8006dfa <_fwalk_reent+0x3a>
 8006dea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dee:	3301      	adds	r3, #1
 8006df0:	d003      	beq.n	8006dfa <_fwalk_reent+0x3a>
 8006df2:	4629      	mov	r1, r5
 8006df4:	4630      	mov	r0, r6
 8006df6:	47c0      	blx	r8
 8006df8:	4307      	orrs	r7, r0
 8006dfa:	3568      	adds	r5, #104	; 0x68
 8006dfc:	e7e9      	b.n	8006dd2 <_fwalk_reent+0x12>

08006dfe <__retarget_lock_init_recursive>:
 8006dfe:	4770      	bx	lr

08006e00 <__retarget_lock_acquire_recursive>:
 8006e00:	4770      	bx	lr

08006e02 <__retarget_lock_release_recursive>:
 8006e02:	4770      	bx	lr

08006e04 <sbrk_aligned>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	4e0e      	ldr	r6, [pc, #56]	; (8006e40 <sbrk_aligned+0x3c>)
 8006e08:	460c      	mov	r4, r1
 8006e0a:	6831      	ldr	r1, [r6, #0]
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	b911      	cbnz	r1, 8006e16 <sbrk_aligned+0x12>
 8006e10:	f000 fb7a 	bl	8007508 <_sbrk_r>
 8006e14:	6030      	str	r0, [r6, #0]
 8006e16:	4621      	mov	r1, r4
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f000 fb75 	bl	8007508 <_sbrk_r>
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	d00a      	beq.n	8006e38 <sbrk_aligned+0x34>
 8006e22:	1cc4      	adds	r4, r0, #3
 8006e24:	f024 0403 	bic.w	r4, r4, #3
 8006e28:	42a0      	cmp	r0, r4
 8006e2a:	d007      	beq.n	8006e3c <sbrk_aligned+0x38>
 8006e2c:	1a21      	subs	r1, r4, r0
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 fb6a 	bl	8007508 <_sbrk_r>
 8006e34:	3001      	adds	r0, #1
 8006e36:	d101      	bne.n	8006e3c <sbrk_aligned+0x38>
 8006e38:	f04f 34ff 	mov.w	r4, #4294967295
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	200003f4 	.word	0x200003f4

08006e44 <_malloc_r>:
 8006e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e48:	1ccd      	adds	r5, r1, #3
 8006e4a:	f025 0503 	bic.w	r5, r5, #3
 8006e4e:	3508      	adds	r5, #8
 8006e50:	2d0c      	cmp	r5, #12
 8006e52:	bf38      	it	cc
 8006e54:	250c      	movcc	r5, #12
 8006e56:	2d00      	cmp	r5, #0
 8006e58:	4607      	mov	r7, r0
 8006e5a:	db01      	blt.n	8006e60 <_malloc_r+0x1c>
 8006e5c:	42a9      	cmp	r1, r5
 8006e5e:	d905      	bls.n	8006e6c <_malloc_r+0x28>
 8006e60:	230c      	movs	r3, #12
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	2600      	movs	r6, #0
 8006e66:	4630      	mov	r0, r6
 8006e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6c:	4e2e      	ldr	r6, [pc, #184]	; (8006f28 <_malloc_r+0xe4>)
 8006e6e:	f000 fdbb 	bl	80079e8 <__malloc_lock>
 8006e72:	6833      	ldr	r3, [r6, #0]
 8006e74:	461c      	mov	r4, r3
 8006e76:	bb34      	cbnz	r4, 8006ec6 <_malloc_r+0x82>
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	f7ff ffc2 	bl	8006e04 <sbrk_aligned>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	4604      	mov	r4, r0
 8006e84:	d14d      	bne.n	8006f22 <_malloc_r+0xde>
 8006e86:	6834      	ldr	r4, [r6, #0]
 8006e88:	4626      	mov	r6, r4
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	d140      	bne.n	8006f10 <_malloc_r+0xcc>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	4631      	mov	r1, r6
 8006e92:	4638      	mov	r0, r7
 8006e94:	eb04 0803 	add.w	r8, r4, r3
 8006e98:	f000 fb36 	bl	8007508 <_sbrk_r>
 8006e9c:	4580      	cmp	r8, r0
 8006e9e:	d13a      	bne.n	8006f16 <_malloc_r+0xd2>
 8006ea0:	6821      	ldr	r1, [r4, #0]
 8006ea2:	3503      	adds	r5, #3
 8006ea4:	1a6d      	subs	r5, r5, r1
 8006ea6:	f025 0503 	bic.w	r5, r5, #3
 8006eaa:	3508      	adds	r5, #8
 8006eac:	2d0c      	cmp	r5, #12
 8006eae:	bf38      	it	cc
 8006eb0:	250c      	movcc	r5, #12
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f7ff ffa5 	bl	8006e04 <sbrk_aligned>
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d02b      	beq.n	8006f16 <_malloc_r+0xd2>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	442b      	add	r3, r5
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	e00e      	b.n	8006ee4 <_malloc_r+0xa0>
 8006ec6:	6822      	ldr	r2, [r4, #0]
 8006ec8:	1b52      	subs	r2, r2, r5
 8006eca:	d41e      	bmi.n	8006f0a <_malloc_r+0xc6>
 8006ecc:	2a0b      	cmp	r2, #11
 8006ece:	d916      	bls.n	8006efe <_malloc_r+0xba>
 8006ed0:	1961      	adds	r1, r4, r5
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	6025      	str	r5, [r4, #0]
 8006ed6:	bf18      	it	ne
 8006ed8:	6059      	strne	r1, [r3, #4]
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	bf08      	it	eq
 8006ede:	6031      	streq	r1, [r6, #0]
 8006ee0:	5162      	str	r2, [r4, r5]
 8006ee2:	604b      	str	r3, [r1, #4]
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	f104 060b 	add.w	r6, r4, #11
 8006eea:	f000 fd83 	bl	80079f4 <__malloc_unlock>
 8006eee:	f026 0607 	bic.w	r6, r6, #7
 8006ef2:	1d23      	adds	r3, r4, #4
 8006ef4:	1af2      	subs	r2, r6, r3
 8006ef6:	d0b6      	beq.n	8006e66 <_malloc_r+0x22>
 8006ef8:	1b9b      	subs	r3, r3, r6
 8006efa:	50a3      	str	r3, [r4, r2]
 8006efc:	e7b3      	b.n	8006e66 <_malloc_r+0x22>
 8006efe:	6862      	ldr	r2, [r4, #4]
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	bf0c      	ite	eq
 8006f04:	6032      	streq	r2, [r6, #0]
 8006f06:	605a      	strne	r2, [r3, #4]
 8006f08:	e7ec      	b.n	8006ee4 <_malloc_r+0xa0>
 8006f0a:	4623      	mov	r3, r4
 8006f0c:	6864      	ldr	r4, [r4, #4]
 8006f0e:	e7b2      	b.n	8006e76 <_malloc_r+0x32>
 8006f10:	4634      	mov	r4, r6
 8006f12:	6876      	ldr	r6, [r6, #4]
 8006f14:	e7b9      	b.n	8006e8a <_malloc_r+0x46>
 8006f16:	230c      	movs	r3, #12
 8006f18:	603b      	str	r3, [r7, #0]
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	f000 fd6a 	bl	80079f4 <__malloc_unlock>
 8006f20:	e7a1      	b.n	8006e66 <_malloc_r+0x22>
 8006f22:	6025      	str	r5, [r4, #0]
 8006f24:	e7de      	b.n	8006ee4 <_malloc_r+0xa0>
 8006f26:	bf00      	nop
 8006f28:	200003f0 	.word	0x200003f0

08006f2c <__sfputc_r>:
 8006f2c:	6893      	ldr	r3, [r2, #8]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	b410      	push	{r4}
 8006f34:	6093      	str	r3, [r2, #8]
 8006f36:	da08      	bge.n	8006f4a <__sfputc_r+0x1e>
 8006f38:	6994      	ldr	r4, [r2, #24]
 8006f3a:	42a3      	cmp	r3, r4
 8006f3c:	db01      	blt.n	8006f42 <__sfputc_r+0x16>
 8006f3e:	290a      	cmp	r1, #10
 8006f40:	d103      	bne.n	8006f4a <__sfputc_r+0x1e>
 8006f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f46:	f000 bb33 	b.w	80075b0 <__swbuf_r>
 8006f4a:	6813      	ldr	r3, [r2, #0]
 8006f4c:	1c58      	adds	r0, r3, #1
 8006f4e:	6010      	str	r0, [r2, #0]
 8006f50:	7019      	strb	r1, [r3, #0]
 8006f52:	4608      	mov	r0, r1
 8006f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <__sfputs_r>:
 8006f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5c:	4606      	mov	r6, r0
 8006f5e:	460f      	mov	r7, r1
 8006f60:	4614      	mov	r4, r2
 8006f62:	18d5      	adds	r5, r2, r3
 8006f64:	42ac      	cmp	r4, r5
 8006f66:	d101      	bne.n	8006f6c <__sfputs_r+0x12>
 8006f68:	2000      	movs	r0, #0
 8006f6a:	e007      	b.n	8006f7c <__sfputs_r+0x22>
 8006f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f70:	463a      	mov	r2, r7
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7ff ffda 	bl	8006f2c <__sfputc_r>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d1f3      	bne.n	8006f64 <__sfputs_r+0xa>
 8006f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f80 <_vfiprintf_r>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	460d      	mov	r5, r1
 8006f86:	b09d      	sub	sp, #116	; 0x74
 8006f88:	4614      	mov	r4, r2
 8006f8a:	4698      	mov	r8, r3
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	b118      	cbz	r0, 8006f98 <_vfiprintf_r+0x18>
 8006f90:	6983      	ldr	r3, [r0, #24]
 8006f92:	b90b      	cbnz	r3, 8006f98 <_vfiprintf_r+0x18>
 8006f94:	f7ff fe96 	bl	8006cc4 <__sinit>
 8006f98:	4b89      	ldr	r3, [pc, #548]	; (80071c0 <_vfiprintf_r+0x240>)
 8006f9a:	429d      	cmp	r5, r3
 8006f9c:	d11b      	bne.n	8006fd6 <_vfiprintf_r+0x56>
 8006f9e:	6875      	ldr	r5, [r6, #4]
 8006fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fa2:	07d9      	lsls	r1, r3, #31
 8006fa4:	d405      	bmi.n	8006fb2 <_vfiprintf_r+0x32>
 8006fa6:	89ab      	ldrh	r3, [r5, #12]
 8006fa8:	059a      	lsls	r2, r3, #22
 8006faa:	d402      	bmi.n	8006fb2 <_vfiprintf_r+0x32>
 8006fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fae:	f7ff ff27 	bl	8006e00 <__retarget_lock_acquire_recursive>
 8006fb2:	89ab      	ldrh	r3, [r5, #12]
 8006fb4:	071b      	lsls	r3, r3, #28
 8006fb6:	d501      	bpl.n	8006fbc <_vfiprintf_r+0x3c>
 8006fb8:	692b      	ldr	r3, [r5, #16]
 8006fba:	b9eb      	cbnz	r3, 8006ff8 <_vfiprintf_r+0x78>
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f000 fb5a 	bl	8007678 <__swsetup_r>
 8006fc4:	b1c0      	cbz	r0, 8006ff8 <_vfiprintf_r+0x78>
 8006fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fc8:	07dc      	lsls	r4, r3, #31
 8006fca:	d50e      	bpl.n	8006fea <_vfiprintf_r+0x6a>
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd0:	b01d      	add	sp, #116	; 0x74
 8006fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd6:	4b7b      	ldr	r3, [pc, #492]	; (80071c4 <_vfiprintf_r+0x244>)
 8006fd8:	429d      	cmp	r5, r3
 8006fda:	d101      	bne.n	8006fe0 <_vfiprintf_r+0x60>
 8006fdc:	68b5      	ldr	r5, [r6, #8]
 8006fde:	e7df      	b.n	8006fa0 <_vfiprintf_r+0x20>
 8006fe0:	4b79      	ldr	r3, [pc, #484]	; (80071c8 <_vfiprintf_r+0x248>)
 8006fe2:	429d      	cmp	r5, r3
 8006fe4:	bf08      	it	eq
 8006fe6:	68f5      	ldreq	r5, [r6, #12]
 8006fe8:	e7da      	b.n	8006fa0 <_vfiprintf_r+0x20>
 8006fea:	89ab      	ldrh	r3, [r5, #12]
 8006fec:	0598      	lsls	r0, r3, #22
 8006fee:	d4ed      	bmi.n	8006fcc <_vfiprintf_r+0x4c>
 8006ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ff2:	f7ff ff06 	bl	8006e02 <__retarget_lock_release_recursive>
 8006ff6:	e7e9      	b.n	8006fcc <_vfiprintf_r+0x4c>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffc:	2320      	movs	r3, #32
 8006ffe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007002:	f8cd 800c 	str.w	r8, [sp, #12]
 8007006:	2330      	movs	r3, #48	; 0x30
 8007008:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071cc <_vfiprintf_r+0x24c>
 800700c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007010:	f04f 0901 	mov.w	r9, #1
 8007014:	4623      	mov	r3, r4
 8007016:	469a      	mov	sl, r3
 8007018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800701c:	b10a      	cbz	r2, 8007022 <_vfiprintf_r+0xa2>
 800701e:	2a25      	cmp	r2, #37	; 0x25
 8007020:	d1f9      	bne.n	8007016 <_vfiprintf_r+0x96>
 8007022:	ebba 0b04 	subs.w	fp, sl, r4
 8007026:	d00b      	beq.n	8007040 <_vfiprintf_r+0xc0>
 8007028:	465b      	mov	r3, fp
 800702a:	4622      	mov	r2, r4
 800702c:	4629      	mov	r1, r5
 800702e:	4630      	mov	r0, r6
 8007030:	f7ff ff93 	bl	8006f5a <__sfputs_r>
 8007034:	3001      	adds	r0, #1
 8007036:	f000 80aa 	beq.w	800718e <_vfiprintf_r+0x20e>
 800703a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800703c:	445a      	add	r2, fp
 800703e:	9209      	str	r2, [sp, #36]	; 0x24
 8007040:	f89a 3000 	ldrb.w	r3, [sl]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80a2 	beq.w	800718e <_vfiprintf_r+0x20e>
 800704a:	2300      	movs	r3, #0
 800704c:	f04f 32ff 	mov.w	r2, #4294967295
 8007050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007054:	f10a 0a01 	add.w	sl, sl, #1
 8007058:	9304      	str	r3, [sp, #16]
 800705a:	9307      	str	r3, [sp, #28]
 800705c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007060:	931a      	str	r3, [sp, #104]	; 0x68
 8007062:	4654      	mov	r4, sl
 8007064:	2205      	movs	r2, #5
 8007066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706a:	4858      	ldr	r0, [pc, #352]	; (80071cc <_vfiprintf_r+0x24c>)
 800706c:	f7f9 f8d0 	bl	8000210 <memchr>
 8007070:	9a04      	ldr	r2, [sp, #16]
 8007072:	b9d8      	cbnz	r0, 80070ac <_vfiprintf_r+0x12c>
 8007074:	06d1      	lsls	r1, r2, #27
 8007076:	bf44      	itt	mi
 8007078:	2320      	movmi	r3, #32
 800707a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800707e:	0713      	lsls	r3, r2, #28
 8007080:	bf44      	itt	mi
 8007082:	232b      	movmi	r3, #43	; 0x2b
 8007084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007088:	f89a 3000 	ldrb.w	r3, [sl]
 800708c:	2b2a      	cmp	r3, #42	; 0x2a
 800708e:	d015      	beq.n	80070bc <_vfiprintf_r+0x13c>
 8007090:	9a07      	ldr	r2, [sp, #28]
 8007092:	4654      	mov	r4, sl
 8007094:	2000      	movs	r0, #0
 8007096:	f04f 0c0a 	mov.w	ip, #10
 800709a:	4621      	mov	r1, r4
 800709c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070a0:	3b30      	subs	r3, #48	; 0x30
 80070a2:	2b09      	cmp	r3, #9
 80070a4:	d94e      	bls.n	8007144 <_vfiprintf_r+0x1c4>
 80070a6:	b1b0      	cbz	r0, 80070d6 <_vfiprintf_r+0x156>
 80070a8:	9207      	str	r2, [sp, #28]
 80070aa:	e014      	b.n	80070d6 <_vfiprintf_r+0x156>
 80070ac:	eba0 0308 	sub.w	r3, r0, r8
 80070b0:	fa09 f303 	lsl.w	r3, r9, r3
 80070b4:	4313      	orrs	r3, r2
 80070b6:	9304      	str	r3, [sp, #16]
 80070b8:	46a2      	mov	sl, r4
 80070ba:	e7d2      	b.n	8007062 <_vfiprintf_r+0xe2>
 80070bc:	9b03      	ldr	r3, [sp, #12]
 80070be:	1d19      	adds	r1, r3, #4
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	9103      	str	r1, [sp, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bfbb      	ittet	lt
 80070c8:	425b      	neglt	r3, r3
 80070ca:	f042 0202 	orrlt.w	r2, r2, #2
 80070ce:	9307      	strge	r3, [sp, #28]
 80070d0:	9307      	strlt	r3, [sp, #28]
 80070d2:	bfb8      	it	lt
 80070d4:	9204      	strlt	r2, [sp, #16]
 80070d6:	7823      	ldrb	r3, [r4, #0]
 80070d8:	2b2e      	cmp	r3, #46	; 0x2e
 80070da:	d10c      	bne.n	80070f6 <_vfiprintf_r+0x176>
 80070dc:	7863      	ldrb	r3, [r4, #1]
 80070de:	2b2a      	cmp	r3, #42	; 0x2a
 80070e0:	d135      	bne.n	800714e <_vfiprintf_r+0x1ce>
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	1d1a      	adds	r2, r3, #4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	9203      	str	r2, [sp, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bfb8      	it	lt
 80070ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80070f2:	3402      	adds	r4, #2
 80070f4:	9305      	str	r3, [sp, #20]
 80070f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071dc <_vfiprintf_r+0x25c>
 80070fa:	7821      	ldrb	r1, [r4, #0]
 80070fc:	2203      	movs	r2, #3
 80070fe:	4650      	mov	r0, sl
 8007100:	f7f9 f886 	bl	8000210 <memchr>
 8007104:	b140      	cbz	r0, 8007118 <_vfiprintf_r+0x198>
 8007106:	2340      	movs	r3, #64	; 0x40
 8007108:	eba0 000a 	sub.w	r0, r0, sl
 800710c:	fa03 f000 	lsl.w	r0, r3, r0
 8007110:	9b04      	ldr	r3, [sp, #16]
 8007112:	4303      	orrs	r3, r0
 8007114:	3401      	adds	r4, #1
 8007116:	9304      	str	r3, [sp, #16]
 8007118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711c:	482c      	ldr	r0, [pc, #176]	; (80071d0 <_vfiprintf_r+0x250>)
 800711e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007122:	2206      	movs	r2, #6
 8007124:	f7f9 f874 	bl	8000210 <memchr>
 8007128:	2800      	cmp	r0, #0
 800712a:	d03f      	beq.n	80071ac <_vfiprintf_r+0x22c>
 800712c:	4b29      	ldr	r3, [pc, #164]	; (80071d4 <_vfiprintf_r+0x254>)
 800712e:	bb1b      	cbnz	r3, 8007178 <_vfiprintf_r+0x1f8>
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	3307      	adds	r3, #7
 8007134:	f023 0307 	bic.w	r3, r3, #7
 8007138:	3308      	adds	r3, #8
 800713a:	9303      	str	r3, [sp, #12]
 800713c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800713e:	443b      	add	r3, r7
 8007140:	9309      	str	r3, [sp, #36]	; 0x24
 8007142:	e767      	b.n	8007014 <_vfiprintf_r+0x94>
 8007144:	fb0c 3202 	mla	r2, ip, r2, r3
 8007148:	460c      	mov	r4, r1
 800714a:	2001      	movs	r0, #1
 800714c:	e7a5      	b.n	800709a <_vfiprintf_r+0x11a>
 800714e:	2300      	movs	r3, #0
 8007150:	3401      	adds	r4, #1
 8007152:	9305      	str	r3, [sp, #20]
 8007154:	4619      	mov	r1, r3
 8007156:	f04f 0c0a 	mov.w	ip, #10
 800715a:	4620      	mov	r0, r4
 800715c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007160:	3a30      	subs	r2, #48	; 0x30
 8007162:	2a09      	cmp	r2, #9
 8007164:	d903      	bls.n	800716e <_vfiprintf_r+0x1ee>
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0c5      	beq.n	80070f6 <_vfiprintf_r+0x176>
 800716a:	9105      	str	r1, [sp, #20]
 800716c:	e7c3      	b.n	80070f6 <_vfiprintf_r+0x176>
 800716e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007172:	4604      	mov	r4, r0
 8007174:	2301      	movs	r3, #1
 8007176:	e7f0      	b.n	800715a <_vfiprintf_r+0x1da>
 8007178:	ab03      	add	r3, sp, #12
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	462a      	mov	r2, r5
 800717e:	4b16      	ldr	r3, [pc, #88]	; (80071d8 <_vfiprintf_r+0x258>)
 8007180:	a904      	add	r1, sp, #16
 8007182:	4630      	mov	r0, r6
 8007184:	f3af 8000 	nop.w
 8007188:	4607      	mov	r7, r0
 800718a:	1c78      	adds	r0, r7, #1
 800718c:	d1d6      	bne.n	800713c <_vfiprintf_r+0x1bc>
 800718e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007190:	07d9      	lsls	r1, r3, #31
 8007192:	d405      	bmi.n	80071a0 <_vfiprintf_r+0x220>
 8007194:	89ab      	ldrh	r3, [r5, #12]
 8007196:	059a      	lsls	r2, r3, #22
 8007198:	d402      	bmi.n	80071a0 <_vfiprintf_r+0x220>
 800719a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800719c:	f7ff fe31 	bl	8006e02 <__retarget_lock_release_recursive>
 80071a0:	89ab      	ldrh	r3, [r5, #12]
 80071a2:	065b      	lsls	r3, r3, #25
 80071a4:	f53f af12 	bmi.w	8006fcc <_vfiprintf_r+0x4c>
 80071a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071aa:	e711      	b.n	8006fd0 <_vfiprintf_r+0x50>
 80071ac:	ab03      	add	r3, sp, #12
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	462a      	mov	r2, r5
 80071b2:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <_vfiprintf_r+0x258>)
 80071b4:	a904      	add	r1, sp, #16
 80071b6:	4630      	mov	r0, r6
 80071b8:	f000 f880 	bl	80072bc <_printf_i>
 80071bc:	e7e4      	b.n	8007188 <_vfiprintf_r+0x208>
 80071be:	bf00      	nop
 80071c0:	08007b5c 	.word	0x08007b5c
 80071c4:	08007b7c 	.word	0x08007b7c
 80071c8:	08007b3c 	.word	0x08007b3c
 80071cc:	08007b9c 	.word	0x08007b9c
 80071d0:	08007ba6 	.word	0x08007ba6
 80071d4:	00000000 	.word	0x00000000
 80071d8:	08006f5b 	.word	0x08006f5b
 80071dc:	08007ba2 	.word	0x08007ba2

080071e0 <_printf_common>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	4616      	mov	r6, r2
 80071e6:	4699      	mov	r9, r3
 80071e8:	688a      	ldr	r2, [r1, #8]
 80071ea:	690b      	ldr	r3, [r1, #16]
 80071ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071f0:	4293      	cmp	r3, r2
 80071f2:	bfb8      	it	lt
 80071f4:	4613      	movlt	r3, r2
 80071f6:	6033      	str	r3, [r6, #0]
 80071f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071fc:	4607      	mov	r7, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	b10a      	cbz	r2, 8007206 <_printf_common+0x26>
 8007202:	3301      	adds	r3, #1
 8007204:	6033      	str	r3, [r6, #0]
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	0699      	lsls	r1, r3, #26
 800720a:	bf42      	ittt	mi
 800720c:	6833      	ldrmi	r3, [r6, #0]
 800720e:	3302      	addmi	r3, #2
 8007210:	6033      	strmi	r3, [r6, #0]
 8007212:	6825      	ldr	r5, [r4, #0]
 8007214:	f015 0506 	ands.w	r5, r5, #6
 8007218:	d106      	bne.n	8007228 <_printf_common+0x48>
 800721a:	f104 0a19 	add.w	sl, r4, #25
 800721e:	68e3      	ldr	r3, [r4, #12]
 8007220:	6832      	ldr	r2, [r6, #0]
 8007222:	1a9b      	subs	r3, r3, r2
 8007224:	42ab      	cmp	r3, r5
 8007226:	dc26      	bgt.n	8007276 <_printf_common+0x96>
 8007228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800722c:	1e13      	subs	r3, r2, #0
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	bf18      	it	ne
 8007232:	2301      	movne	r3, #1
 8007234:	0692      	lsls	r2, r2, #26
 8007236:	d42b      	bmi.n	8007290 <_printf_common+0xb0>
 8007238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800723c:	4649      	mov	r1, r9
 800723e:	4638      	mov	r0, r7
 8007240:	47c0      	blx	r8
 8007242:	3001      	adds	r0, #1
 8007244:	d01e      	beq.n	8007284 <_printf_common+0xa4>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	68e5      	ldr	r5, [r4, #12]
 800724a:	6832      	ldr	r2, [r6, #0]
 800724c:	f003 0306 	and.w	r3, r3, #6
 8007250:	2b04      	cmp	r3, #4
 8007252:	bf08      	it	eq
 8007254:	1aad      	subeq	r5, r5, r2
 8007256:	68a3      	ldr	r3, [r4, #8]
 8007258:	6922      	ldr	r2, [r4, #16]
 800725a:	bf0c      	ite	eq
 800725c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007260:	2500      	movne	r5, #0
 8007262:	4293      	cmp	r3, r2
 8007264:	bfc4      	itt	gt
 8007266:	1a9b      	subgt	r3, r3, r2
 8007268:	18ed      	addgt	r5, r5, r3
 800726a:	2600      	movs	r6, #0
 800726c:	341a      	adds	r4, #26
 800726e:	42b5      	cmp	r5, r6
 8007270:	d11a      	bne.n	80072a8 <_printf_common+0xc8>
 8007272:	2000      	movs	r0, #0
 8007274:	e008      	b.n	8007288 <_printf_common+0xa8>
 8007276:	2301      	movs	r3, #1
 8007278:	4652      	mov	r2, sl
 800727a:	4649      	mov	r1, r9
 800727c:	4638      	mov	r0, r7
 800727e:	47c0      	blx	r8
 8007280:	3001      	adds	r0, #1
 8007282:	d103      	bne.n	800728c <_printf_common+0xac>
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728c:	3501      	adds	r5, #1
 800728e:	e7c6      	b.n	800721e <_printf_common+0x3e>
 8007290:	18e1      	adds	r1, r4, r3
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	2030      	movs	r0, #48	; 0x30
 8007296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800729a:	4422      	add	r2, r4
 800729c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072a4:	3302      	adds	r3, #2
 80072a6:	e7c7      	b.n	8007238 <_printf_common+0x58>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4622      	mov	r2, r4
 80072ac:	4649      	mov	r1, r9
 80072ae:	4638      	mov	r0, r7
 80072b0:	47c0      	blx	r8
 80072b2:	3001      	adds	r0, #1
 80072b4:	d0e6      	beq.n	8007284 <_printf_common+0xa4>
 80072b6:	3601      	adds	r6, #1
 80072b8:	e7d9      	b.n	800726e <_printf_common+0x8e>
	...

080072bc <_printf_i>:
 80072bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	7e0f      	ldrb	r7, [r1, #24]
 80072c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072c4:	2f78      	cmp	r7, #120	; 0x78
 80072c6:	4691      	mov	r9, r2
 80072c8:	4680      	mov	r8, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	469a      	mov	sl, r3
 80072ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072d2:	d807      	bhi.n	80072e4 <_printf_i+0x28>
 80072d4:	2f62      	cmp	r7, #98	; 0x62
 80072d6:	d80a      	bhi.n	80072ee <_printf_i+0x32>
 80072d8:	2f00      	cmp	r7, #0
 80072da:	f000 80d8 	beq.w	800748e <_printf_i+0x1d2>
 80072de:	2f58      	cmp	r7, #88	; 0x58
 80072e0:	f000 80a3 	beq.w	800742a <_printf_i+0x16e>
 80072e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072ec:	e03a      	b.n	8007364 <_printf_i+0xa8>
 80072ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072f2:	2b15      	cmp	r3, #21
 80072f4:	d8f6      	bhi.n	80072e4 <_printf_i+0x28>
 80072f6:	a101      	add	r1, pc, #4	; (adr r1, 80072fc <_printf_i+0x40>)
 80072f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072fc:	08007355 	.word	0x08007355
 8007300:	08007369 	.word	0x08007369
 8007304:	080072e5 	.word	0x080072e5
 8007308:	080072e5 	.word	0x080072e5
 800730c:	080072e5 	.word	0x080072e5
 8007310:	080072e5 	.word	0x080072e5
 8007314:	08007369 	.word	0x08007369
 8007318:	080072e5 	.word	0x080072e5
 800731c:	080072e5 	.word	0x080072e5
 8007320:	080072e5 	.word	0x080072e5
 8007324:	080072e5 	.word	0x080072e5
 8007328:	08007475 	.word	0x08007475
 800732c:	08007399 	.word	0x08007399
 8007330:	08007457 	.word	0x08007457
 8007334:	080072e5 	.word	0x080072e5
 8007338:	080072e5 	.word	0x080072e5
 800733c:	08007497 	.word	0x08007497
 8007340:	080072e5 	.word	0x080072e5
 8007344:	08007399 	.word	0x08007399
 8007348:	080072e5 	.word	0x080072e5
 800734c:	080072e5 	.word	0x080072e5
 8007350:	0800745f 	.word	0x0800745f
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	1d1a      	adds	r2, r3, #4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	602a      	str	r2, [r5, #0]
 800735c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007364:	2301      	movs	r3, #1
 8007366:	e0a3      	b.n	80074b0 <_printf_i+0x1f4>
 8007368:	6820      	ldr	r0, [r4, #0]
 800736a:	6829      	ldr	r1, [r5, #0]
 800736c:	0606      	lsls	r6, r0, #24
 800736e:	f101 0304 	add.w	r3, r1, #4
 8007372:	d50a      	bpl.n	800738a <_printf_i+0xce>
 8007374:	680e      	ldr	r6, [r1, #0]
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	2e00      	cmp	r6, #0
 800737a:	da03      	bge.n	8007384 <_printf_i+0xc8>
 800737c:	232d      	movs	r3, #45	; 0x2d
 800737e:	4276      	negs	r6, r6
 8007380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007384:	485e      	ldr	r0, [pc, #376]	; (8007500 <_printf_i+0x244>)
 8007386:	230a      	movs	r3, #10
 8007388:	e019      	b.n	80073be <_printf_i+0x102>
 800738a:	680e      	ldr	r6, [r1, #0]
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007392:	bf18      	it	ne
 8007394:	b236      	sxthne	r6, r6
 8007396:	e7ef      	b.n	8007378 <_printf_i+0xbc>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	6820      	ldr	r0, [r4, #0]
 800739c:	1d19      	adds	r1, r3, #4
 800739e:	6029      	str	r1, [r5, #0]
 80073a0:	0601      	lsls	r1, r0, #24
 80073a2:	d501      	bpl.n	80073a8 <_printf_i+0xec>
 80073a4:	681e      	ldr	r6, [r3, #0]
 80073a6:	e002      	b.n	80073ae <_printf_i+0xf2>
 80073a8:	0646      	lsls	r6, r0, #25
 80073aa:	d5fb      	bpl.n	80073a4 <_printf_i+0xe8>
 80073ac:	881e      	ldrh	r6, [r3, #0]
 80073ae:	4854      	ldr	r0, [pc, #336]	; (8007500 <_printf_i+0x244>)
 80073b0:	2f6f      	cmp	r7, #111	; 0x6f
 80073b2:	bf0c      	ite	eq
 80073b4:	2308      	moveq	r3, #8
 80073b6:	230a      	movne	r3, #10
 80073b8:	2100      	movs	r1, #0
 80073ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073be:	6865      	ldr	r5, [r4, #4]
 80073c0:	60a5      	str	r5, [r4, #8]
 80073c2:	2d00      	cmp	r5, #0
 80073c4:	bfa2      	ittt	ge
 80073c6:	6821      	ldrge	r1, [r4, #0]
 80073c8:	f021 0104 	bicge.w	r1, r1, #4
 80073cc:	6021      	strge	r1, [r4, #0]
 80073ce:	b90e      	cbnz	r6, 80073d4 <_printf_i+0x118>
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	d04d      	beq.n	8007470 <_printf_i+0x1b4>
 80073d4:	4615      	mov	r5, r2
 80073d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80073da:	fb03 6711 	mls	r7, r3, r1, r6
 80073de:	5dc7      	ldrb	r7, [r0, r7]
 80073e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073e4:	4637      	mov	r7, r6
 80073e6:	42bb      	cmp	r3, r7
 80073e8:	460e      	mov	r6, r1
 80073ea:	d9f4      	bls.n	80073d6 <_printf_i+0x11a>
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	d10b      	bne.n	8007408 <_printf_i+0x14c>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	07de      	lsls	r6, r3, #31
 80073f4:	d508      	bpl.n	8007408 <_printf_i+0x14c>
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	6861      	ldr	r1, [r4, #4]
 80073fa:	4299      	cmp	r1, r3
 80073fc:	bfde      	ittt	le
 80073fe:	2330      	movle	r3, #48	; 0x30
 8007400:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007404:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007408:	1b52      	subs	r2, r2, r5
 800740a:	6122      	str	r2, [r4, #16]
 800740c:	f8cd a000 	str.w	sl, [sp]
 8007410:	464b      	mov	r3, r9
 8007412:	aa03      	add	r2, sp, #12
 8007414:	4621      	mov	r1, r4
 8007416:	4640      	mov	r0, r8
 8007418:	f7ff fee2 	bl	80071e0 <_printf_common>
 800741c:	3001      	adds	r0, #1
 800741e:	d14c      	bne.n	80074ba <_printf_i+0x1fe>
 8007420:	f04f 30ff 	mov.w	r0, #4294967295
 8007424:	b004      	add	sp, #16
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	4835      	ldr	r0, [pc, #212]	; (8007500 <_printf_i+0x244>)
 800742c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007430:	6829      	ldr	r1, [r5, #0]
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	f851 6b04 	ldr.w	r6, [r1], #4
 8007438:	6029      	str	r1, [r5, #0]
 800743a:	061d      	lsls	r5, r3, #24
 800743c:	d514      	bpl.n	8007468 <_printf_i+0x1ac>
 800743e:	07df      	lsls	r7, r3, #31
 8007440:	bf44      	itt	mi
 8007442:	f043 0320 	orrmi.w	r3, r3, #32
 8007446:	6023      	strmi	r3, [r4, #0]
 8007448:	b91e      	cbnz	r6, 8007452 <_printf_i+0x196>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	f023 0320 	bic.w	r3, r3, #32
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	2310      	movs	r3, #16
 8007454:	e7b0      	b.n	80073b8 <_printf_i+0xfc>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	f043 0320 	orr.w	r3, r3, #32
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	2378      	movs	r3, #120	; 0x78
 8007460:	4828      	ldr	r0, [pc, #160]	; (8007504 <_printf_i+0x248>)
 8007462:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007466:	e7e3      	b.n	8007430 <_printf_i+0x174>
 8007468:	0659      	lsls	r1, r3, #25
 800746a:	bf48      	it	mi
 800746c:	b2b6      	uxthmi	r6, r6
 800746e:	e7e6      	b.n	800743e <_printf_i+0x182>
 8007470:	4615      	mov	r5, r2
 8007472:	e7bb      	b.n	80073ec <_printf_i+0x130>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	6826      	ldr	r6, [r4, #0]
 8007478:	6961      	ldr	r1, [r4, #20]
 800747a:	1d18      	adds	r0, r3, #4
 800747c:	6028      	str	r0, [r5, #0]
 800747e:	0635      	lsls	r5, r6, #24
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	d501      	bpl.n	8007488 <_printf_i+0x1cc>
 8007484:	6019      	str	r1, [r3, #0]
 8007486:	e002      	b.n	800748e <_printf_i+0x1d2>
 8007488:	0670      	lsls	r0, r6, #25
 800748a:	d5fb      	bpl.n	8007484 <_printf_i+0x1c8>
 800748c:	8019      	strh	r1, [r3, #0]
 800748e:	2300      	movs	r3, #0
 8007490:	6123      	str	r3, [r4, #16]
 8007492:	4615      	mov	r5, r2
 8007494:	e7ba      	b.n	800740c <_printf_i+0x150>
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	1d1a      	adds	r2, r3, #4
 800749a:	602a      	str	r2, [r5, #0]
 800749c:	681d      	ldr	r5, [r3, #0]
 800749e:	6862      	ldr	r2, [r4, #4]
 80074a0:	2100      	movs	r1, #0
 80074a2:	4628      	mov	r0, r5
 80074a4:	f7f8 feb4 	bl	8000210 <memchr>
 80074a8:	b108      	cbz	r0, 80074ae <_printf_i+0x1f2>
 80074aa:	1b40      	subs	r0, r0, r5
 80074ac:	6060      	str	r0, [r4, #4]
 80074ae:	6863      	ldr	r3, [r4, #4]
 80074b0:	6123      	str	r3, [r4, #16]
 80074b2:	2300      	movs	r3, #0
 80074b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074b8:	e7a8      	b.n	800740c <_printf_i+0x150>
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	462a      	mov	r2, r5
 80074be:	4649      	mov	r1, r9
 80074c0:	4640      	mov	r0, r8
 80074c2:	47d0      	blx	sl
 80074c4:	3001      	adds	r0, #1
 80074c6:	d0ab      	beq.n	8007420 <_printf_i+0x164>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	079b      	lsls	r3, r3, #30
 80074cc:	d413      	bmi.n	80074f6 <_printf_i+0x23a>
 80074ce:	68e0      	ldr	r0, [r4, #12]
 80074d0:	9b03      	ldr	r3, [sp, #12]
 80074d2:	4298      	cmp	r0, r3
 80074d4:	bfb8      	it	lt
 80074d6:	4618      	movlt	r0, r3
 80074d8:	e7a4      	b.n	8007424 <_printf_i+0x168>
 80074da:	2301      	movs	r3, #1
 80074dc:	4632      	mov	r2, r6
 80074de:	4649      	mov	r1, r9
 80074e0:	4640      	mov	r0, r8
 80074e2:	47d0      	blx	sl
 80074e4:	3001      	adds	r0, #1
 80074e6:	d09b      	beq.n	8007420 <_printf_i+0x164>
 80074e8:	3501      	adds	r5, #1
 80074ea:	68e3      	ldr	r3, [r4, #12]
 80074ec:	9903      	ldr	r1, [sp, #12]
 80074ee:	1a5b      	subs	r3, r3, r1
 80074f0:	42ab      	cmp	r3, r5
 80074f2:	dcf2      	bgt.n	80074da <_printf_i+0x21e>
 80074f4:	e7eb      	b.n	80074ce <_printf_i+0x212>
 80074f6:	2500      	movs	r5, #0
 80074f8:	f104 0619 	add.w	r6, r4, #25
 80074fc:	e7f5      	b.n	80074ea <_printf_i+0x22e>
 80074fe:	bf00      	nop
 8007500:	08007bad 	.word	0x08007bad
 8007504:	08007bbe 	.word	0x08007bbe

08007508 <_sbrk_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4d06      	ldr	r5, [pc, #24]	; (8007524 <_sbrk_r+0x1c>)
 800750c:	2300      	movs	r3, #0
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	f7fa fc66 	bl	8001de4 <_sbrk>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_sbrk_r+0x1a>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_sbrk_r+0x1a>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	200003f8 	.word	0x200003f8

08007528 <__sread>:
 8007528:	b510      	push	{r4, lr}
 800752a:	460c      	mov	r4, r1
 800752c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007530:	f000 fab2 	bl	8007a98 <_read_r>
 8007534:	2800      	cmp	r0, #0
 8007536:	bfab      	itete	ge
 8007538:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800753a:	89a3      	ldrhlt	r3, [r4, #12]
 800753c:	181b      	addge	r3, r3, r0
 800753e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007542:	bfac      	ite	ge
 8007544:	6563      	strge	r3, [r4, #84]	; 0x54
 8007546:	81a3      	strhlt	r3, [r4, #12]
 8007548:	bd10      	pop	{r4, pc}

0800754a <__swrite>:
 800754a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800754e:	461f      	mov	r7, r3
 8007550:	898b      	ldrh	r3, [r1, #12]
 8007552:	05db      	lsls	r3, r3, #23
 8007554:	4605      	mov	r5, r0
 8007556:	460c      	mov	r4, r1
 8007558:	4616      	mov	r6, r2
 800755a:	d505      	bpl.n	8007568 <__swrite+0x1e>
 800755c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007560:	2302      	movs	r3, #2
 8007562:	2200      	movs	r2, #0
 8007564:	f000 f9c8 	bl	80078f8 <_lseek_r>
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800756e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007572:	81a3      	strh	r3, [r4, #12]
 8007574:	4632      	mov	r2, r6
 8007576:	463b      	mov	r3, r7
 8007578:	4628      	mov	r0, r5
 800757a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800757e:	f000 b869 	b.w	8007654 <_write_r>

08007582 <__sseek>:
 8007582:	b510      	push	{r4, lr}
 8007584:	460c      	mov	r4, r1
 8007586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758a:	f000 f9b5 	bl	80078f8 <_lseek_r>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	bf15      	itete	ne
 8007594:	6560      	strne	r0, [r4, #84]	; 0x54
 8007596:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800759a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800759e:	81a3      	strheq	r3, [r4, #12]
 80075a0:	bf18      	it	ne
 80075a2:	81a3      	strhne	r3, [r4, #12]
 80075a4:	bd10      	pop	{r4, pc}

080075a6 <__sclose>:
 80075a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075aa:	f000 b8d3 	b.w	8007754 <_close_r>
	...

080075b0 <__swbuf_r>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	460e      	mov	r6, r1
 80075b4:	4614      	mov	r4, r2
 80075b6:	4605      	mov	r5, r0
 80075b8:	b118      	cbz	r0, 80075c2 <__swbuf_r+0x12>
 80075ba:	6983      	ldr	r3, [r0, #24]
 80075bc:	b90b      	cbnz	r3, 80075c2 <__swbuf_r+0x12>
 80075be:	f7ff fb81 	bl	8006cc4 <__sinit>
 80075c2:	4b21      	ldr	r3, [pc, #132]	; (8007648 <__swbuf_r+0x98>)
 80075c4:	429c      	cmp	r4, r3
 80075c6:	d12b      	bne.n	8007620 <__swbuf_r+0x70>
 80075c8:	686c      	ldr	r4, [r5, #4]
 80075ca:	69a3      	ldr	r3, [r4, #24]
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	071a      	lsls	r2, r3, #28
 80075d2:	d52f      	bpl.n	8007634 <__swbuf_r+0x84>
 80075d4:	6923      	ldr	r3, [r4, #16]
 80075d6:	b36b      	cbz	r3, 8007634 <__swbuf_r+0x84>
 80075d8:	6923      	ldr	r3, [r4, #16]
 80075da:	6820      	ldr	r0, [r4, #0]
 80075dc:	1ac0      	subs	r0, r0, r3
 80075de:	6963      	ldr	r3, [r4, #20]
 80075e0:	b2f6      	uxtb	r6, r6
 80075e2:	4283      	cmp	r3, r0
 80075e4:	4637      	mov	r7, r6
 80075e6:	dc04      	bgt.n	80075f2 <__swbuf_r+0x42>
 80075e8:	4621      	mov	r1, r4
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 f948 	bl	8007880 <_fflush_r>
 80075f0:	bb30      	cbnz	r0, 8007640 <__swbuf_r+0x90>
 80075f2:	68a3      	ldr	r3, [r4, #8]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	60a3      	str	r3, [r4, #8]
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	6022      	str	r2, [r4, #0]
 80075fe:	701e      	strb	r6, [r3, #0]
 8007600:	6963      	ldr	r3, [r4, #20]
 8007602:	3001      	adds	r0, #1
 8007604:	4283      	cmp	r3, r0
 8007606:	d004      	beq.n	8007612 <__swbuf_r+0x62>
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	07db      	lsls	r3, r3, #31
 800760c:	d506      	bpl.n	800761c <__swbuf_r+0x6c>
 800760e:	2e0a      	cmp	r6, #10
 8007610:	d104      	bne.n	800761c <__swbuf_r+0x6c>
 8007612:	4621      	mov	r1, r4
 8007614:	4628      	mov	r0, r5
 8007616:	f000 f933 	bl	8007880 <_fflush_r>
 800761a:	b988      	cbnz	r0, 8007640 <__swbuf_r+0x90>
 800761c:	4638      	mov	r0, r7
 800761e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007620:	4b0a      	ldr	r3, [pc, #40]	; (800764c <__swbuf_r+0x9c>)
 8007622:	429c      	cmp	r4, r3
 8007624:	d101      	bne.n	800762a <__swbuf_r+0x7a>
 8007626:	68ac      	ldr	r4, [r5, #8]
 8007628:	e7cf      	b.n	80075ca <__swbuf_r+0x1a>
 800762a:	4b09      	ldr	r3, [pc, #36]	; (8007650 <__swbuf_r+0xa0>)
 800762c:	429c      	cmp	r4, r3
 800762e:	bf08      	it	eq
 8007630:	68ec      	ldreq	r4, [r5, #12]
 8007632:	e7ca      	b.n	80075ca <__swbuf_r+0x1a>
 8007634:	4621      	mov	r1, r4
 8007636:	4628      	mov	r0, r5
 8007638:	f000 f81e 	bl	8007678 <__swsetup_r>
 800763c:	2800      	cmp	r0, #0
 800763e:	d0cb      	beq.n	80075d8 <__swbuf_r+0x28>
 8007640:	f04f 37ff 	mov.w	r7, #4294967295
 8007644:	e7ea      	b.n	800761c <__swbuf_r+0x6c>
 8007646:	bf00      	nop
 8007648:	08007b5c 	.word	0x08007b5c
 800764c:	08007b7c 	.word	0x08007b7c
 8007650:	08007b3c 	.word	0x08007b3c

08007654 <_write_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d07      	ldr	r5, [pc, #28]	; (8007674 <_write_r+0x20>)
 8007658:	4604      	mov	r4, r0
 800765a:	4608      	mov	r0, r1
 800765c:	4611      	mov	r1, r2
 800765e:	2200      	movs	r2, #0
 8007660:	602a      	str	r2, [r5, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	f7fa fb6d 	bl	8001d42 <_write>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_write_r+0x1e>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_write_r+0x1e>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	200003f8 	.word	0x200003f8

08007678 <__swsetup_r>:
 8007678:	4b32      	ldr	r3, [pc, #200]	; (8007744 <__swsetup_r+0xcc>)
 800767a:	b570      	push	{r4, r5, r6, lr}
 800767c:	681d      	ldr	r5, [r3, #0]
 800767e:	4606      	mov	r6, r0
 8007680:	460c      	mov	r4, r1
 8007682:	b125      	cbz	r5, 800768e <__swsetup_r+0x16>
 8007684:	69ab      	ldr	r3, [r5, #24]
 8007686:	b913      	cbnz	r3, 800768e <__swsetup_r+0x16>
 8007688:	4628      	mov	r0, r5
 800768a:	f7ff fb1b 	bl	8006cc4 <__sinit>
 800768e:	4b2e      	ldr	r3, [pc, #184]	; (8007748 <__swsetup_r+0xd0>)
 8007690:	429c      	cmp	r4, r3
 8007692:	d10f      	bne.n	80076b4 <__swsetup_r+0x3c>
 8007694:	686c      	ldr	r4, [r5, #4]
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800769c:	0719      	lsls	r1, r3, #28
 800769e:	d42c      	bmi.n	80076fa <__swsetup_r+0x82>
 80076a0:	06dd      	lsls	r5, r3, #27
 80076a2:	d411      	bmi.n	80076c8 <__swsetup_r+0x50>
 80076a4:	2309      	movs	r3, #9
 80076a6:	6033      	str	r3, [r6, #0]
 80076a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	f04f 30ff 	mov.w	r0, #4294967295
 80076b2:	e03e      	b.n	8007732 <__swsetup_r+0xba>
 80076b4:	4b25      	ldr	r3, [pc, #148]	; (800774c <__swsetup_r+0xd4>)
 80076b6:	429c      	cmp	r4, r3
 80076b8:	d101      	bne.n	80076be <__swsetup_r+0x46>
 80076ba:	68ac      	ldr	r4, [r5, #8]
 80076bc:	e7eb      	b.n	8007696 <__swsetup_r+0x1e>
 80076be:	4b24      	ldr	r3, [pc, #144]	; (8007750 <__swsetup_r+0xd8>)
 80076c0:	429c      	cmp	r4, r3
 80076c2:	bf08      	it	eq
 80076c4:	68ec      	ldreq	r4, [r5, #12]
 80076c6:	e7e6      	b.n	8007696 <__swsetup_r+0x1e>
 80076c8:	0758      	lsls	r0, r3, #29
 80076ca:	d512      	bpl.n	80076f2 <__swsetup_r+0x7a>
 80076cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ce:	b141      	cbz	r1, 80076e2 <__swsetup_r+0x6a>
 80076d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076d4:	4299      	cmp	r1, r3
 80076d6:	d002      	beq.n	80076de <__swsetup_r+0x66>
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 f991 	bl	8007a00 <_free_r>
 80076de:	2300      	movs	r3, #0
 80076e0:	6363      	str	r3, [r4, #52]	; 0x34
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076e8:	81a3      	strh	r3, [r4, #12]
 80076ea:	2300      	movs	r3, #0
 80076ec:	6063      	str	r3, [r4, #4]
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	f043 0308 	orr.w	r3, r3, #8
 80076f8:	81a3      	strh	r3, [r4, #12]
 80076fa:	6923      	ldr	r3, [r4, #16]
 80076fc:	b94b      	cbnz	r3, 8007712 <__swsetup_r+0x9a>
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007708:	d003      	beq.n	8007712 <__swsetup_r+0x9a>
 800770a:	4621      	mov	r1, r4
 800770c:	4630      	mov	r0, r6
 800770e:	f000 f92b 	bl	8007968 <__smakebuf_r>
 8007712:	89a0      	ldrh	r0, [r4, #12]
 8007714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007718:	f010 0301 	ands.w	r3, r0, #1
 800771c:	d00a      	beq.n	8007734 <__swsetup_r+0xbc>
 800771e:	2300      	movs	r3, #0
 8007720:	60a3      	str	r3, [r4, #8]
 8007722:	6963      	ldr	r3, [r4, #20]
 8007724:	425b      	negs	r3, r3
 8007726:	61a3      	str	r3, [r4, #24]
 8007728:	6923      	ldr	r3, [r4, #16]
 800772a:	b943      	cbnz	r3, 800773e <__swsetup_r+0xc6>
 800772c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007730:	d1ba      	bne.n	80076a8 <__swsetup_r+0x30>
 8007732:	bd70      	pop	{r4, r5, r6, pc}
 8007734:	0781      	lsls	r1, r0, #30
 8007736:	bf58      	it	pl
 8007738:	6963      	ldrpl	r3, [r4, #20]
 800773a:	60a3      	str	r3, [r4, #8]
 800773c:	e7f4      	b.n	8007728 <__swsetup_r+0xb0>
 800773e:	2000      	movs	r0, #0
 8007740:	e7f7      	b.n	8007732 <__swsetup_r+0xba>
 8007742:	bf00      	nop
 8007744:	2000000c 	.word	0x2000000c
 8007748:	08007b5c 	.word	0x08007b5c
 800774c:	08007b7c 	.word	0x08007b7c
 8007750:	08007b3c 	.word	0x08007b3c

08007754 <_close_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4d06      	ldr	r5, [pc, #24]	; (8007770 <_close_r+0x1c>)
 8007758:	2300      	movs	r3, #0
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	602b      	str	r3, [r5, #0]
 8007760:	f7fa fb0b 	bl	8001d7a <_close>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_close_r+0x1a>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_close_r+0x1a>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	200003f8 	.word	0x200003f8

08007774 <__sflush_r>:
 8007774:	898a      	ldrh	r2, [r1, #12]
 8007776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777a:	4605      	mov	r5, r0
 800777c:	0710      	lsls	r0, r2, #28
 800777e:	460c      	mov	r4, r1
 8007780:	d458      	bmi.n	8007834 <__sflush_r+0xc0>
 8007782:	684b      	ldr	r3, [r1, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	dc05      	bgt.n	8007794 <__sflush_r+0x20>
 8007788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	dc02      	bgt.n	8007794 <__sflush_r+0x20>
 800778e:	2000      	movs	r0, #0
 8007790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007796:	2e00      	cmp	r6, #0
 8007798:	d0f9      	beq.n	800778e <__sflush_r+0x1a>
 800779a:	2300      	movs	r3, #0
 800779c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077a0:	682f      	ldr	r7, [r5, #0]
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	d032      	beq.n	800780c <__sflush_r+0x98>
 80077a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	075a      	lsls	r2, r3, #29
 80077ac:	d505      	bpl.n	80077ba <__sflush_r+0x46>
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	1ac0      	subs	r0, r0, r3
 80077b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077b4:	b10b      	cbz	r3, 80077ba <__sflush_r+0x46>
 80077b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077b8:	1ac0      	subs	r0, r0, r3
 80077ba:	2300      	movs	r3, #0
 80077bc:	4602      	mov	r2, r0
 80077be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077c0:	6a21      	ldr	r1, [r4, #32]
 80077c2:	4628      	mov	r0, r5
 80077c4:	47b0      	blx	r6
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	d106      	bne.n	80077da <__sflush_r+0x66>
 80077cc:	6829      	ldr	r1, [r5, #0]
 80077ce:	291d      	cmp	r1, #29
 80077d0:	d82c      	bhi.n	800782c <__sflush_r+0xb8>
 80077d2:	4a2a      	ldr	r2, [pc, #168]	; (800787c <__sflush_r+0x108>)
 80077d4:	40ca      	lsrs	r2, r1
 80077d6:	07d6      	lsls	r6, r2, #31
 80077d8:	d528      	bpl.n	800782c <__sflush_r+0xb8>
 80077da:	2200      	movs	r2, #0
 80077dc:	6062      	str	r2, [r4, #4]
 80077de:	04d9      	lsls	r1, r3, #19
 80077e0:	6922      	ldr	r2, [r4, #16]
 80077e2:	6022      	str	r2, [r4, #0]
 80077e4:	d504      	bpl.n	80077f0 <__sflush_r+0x7c>
 80077e6:	1c42      	adds	r2, r0, #1
 80077e8:	d101      	bne.n	80077ee <__sflush_r+0x7a>
 80077ea:	682b      	ldr	r3, [r5, #0]
 80077ec:	b903      	cbnz	r3, 80077f0 <__sflush_r+0x7c>
 80077ee:	6560      	str	r0, [r4, #84]	; 0x54
 80077f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077f2:	602f      	str	r7, [r5, #0]
 80077f4:	2900      	cmp	r1, #0
 80077f6:	d0ca      	beq.n	800778e <__sflush_r+0x1a>
 80077f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077fc:	4299      	cmp	r1, r3
 80077fe:	d002      	beq.n	8007806 <__sflush_r+0x92>
 8007800:	4628      	mov	r0, r5
 8007802:	f000 f8fd 	bl	8007a00 <_free_r>
 8007806:	2000      	movs	r0, #0
 8007808:	6360      	str	r0, [r4, #52]	; 0x34
 800780a:	e7c1      	b.n	8007790 <__sflush_r+0x1c>
 800780c:	6a21      	ldr	r1, [r4, #32]
 800780e:	2301      	movs	r3, #1
 8007810:	4628      	mov	r0, r5
 8007812:	47b0      	blx	r6
 8007814:	1c41      	adds	r1, r0, #1
 8007816:	d1c7      	bne.n	80077a8 <__sflush_r+0x34>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0c4      	beq.n	80077a8 <__sflush_r+0x34>
 800781e:	2b1d      	cmp	r3, #29
 8007820:	d001      	beq.n	8007826 <__sflush_r+0xb2>
 8007822:	2b16      	cmp	r3, #22
 8007824:	d101      	bne.n	800782a <__sflush_r+0xb6>
 8007826:	602f      	str	r7, [r5, #0]
 8007828:	e7b1      	b.n	800778e <__sflush_r+0x1a>
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	e7ad      	b.n	8007790 <__sflush_r+0x1c>
 8007834:	690f      	ldr	r7, [r1, #16]
 8007836:	2f00      	cmp	r7, #0
 8007838:	d0a9      	beq.n	800778e <__sflush_r+0x1a>
 800783a:	0793      	lsls	r3, r2, #30
 800783c:	680e      	ldr	r6, [r1, #0]
 800783e:	bf08      	it	eq
 8007840:	694b      	ldreq	r3, [r1, #20]
 8007842:	600f      	str	r7, [r1, #0]
 8007844:	bf18      	it	ne
 8007846:	2300      	movne	r3, #0
 8007848:	eba6 0807 	sub.w	r8, r6, r7
 800784c:	608b      	str	r3, [r1, #8]
 800784e:	f1b8 0f00 	cmp.w	r8, #0
 8007852:	dd9c      	ble.n	800778e <__sflush_r+0x1a>
 8007854:	6a21      	ldr	r1, [r4, #32]
 8007856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007858:	4643      	mov	r3, r8
 800785a:	463a      	mov	r2, r7
 800785c:	4628      	mov	r0, r5
 800785e:	47b0      	blx	r6
 8007860:	2800      	cmp	r0, #0
 8007862:	dc06      	bgt.n	8007872 <__sflush_r+0xfe>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	e78e      	b.n	8007790 <__sflush_r+0x1c>
 8007872:	4407      	add	r7, r0
 8007874:	eba8 0800 	sub.w	r8, r8, r0
 8007878:	e7e9      	b.n	800784e <__sflush_r+0xda>
 800787a:	bf00      	nop
 800787c:	20400001 	.word	0x20400001

08007880 <_fflush_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	690b      	ldr	r3, [r1, #16]
 8007884:	4605      	mov	r5, r0
 8007886:	460c      	mov	r4, r1
 8007888:	b913      	cbnz	r3, 8007890 <_fflush_r+0x10>
 800788a:	2500      	movs	r5, #0
 800788c:	4628      	mov	r0, r5
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	b118      	cbz	r0, 800789a <_fflush_r+0x1a>
 8007892:	6983      	ldr	r3, [r0, #24]
 8007894:	b90b      	cbnz	r3, 800789a <_fflush_r+0x1a>
 8007896:	f7ff fa15 	bl	8006cc4 <__sinit>
 800789a:	4b14      	ldr	r3, [pc, #80]	; (80078ec <_fflush_r+0x6c>)
 800789c:	429c      	cmp	r4, r3
 800789e:	d11b      	bne.n	80078d8 <_fflush_r+0x58>
 80078a0:	686c      	ldr	r4, [r5, #4]
 80078a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0ef      	beq.n	800788a <_fflush_r+0xa>
 80078aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078ac:	07d0      	lsls	r0, r2, #31
 80078ae:	d404      	bmi.n	80078ba <_fflush_r+0x3a>
 80078b0:	0599      	lsls	r1, r3, #22
 80078b2:	d402      	bmi.n	80078ba <_fflush_r+0x3a>
 80078b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078b6:	f7ff faa3 	bl	8006e00 <__retarget_lock_acquire_recursive>
 80078ba:	4628      	mov	r0, r5
 80078bc:	4621      	mov	r1, r4
 80078be:	f7ff ff59 	bl	8007774 <__sflush_r>
 80078c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078c4:	07da      	lsls	r2, r3, #31
 80078c6:	4605      	mov	r5, r0
 80078c8:	d4e0      	bmi.n	800788c <_fflush_r+0xc>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	059b      	lsls	r3, r3, #22
 80078ce:	d4dd      	bmi.n	800788c <_fflush_r+0xc>
 80078d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078d2:	f7ff fa96 	bl	8006e02 <__retarget_lock_release_recursive>
 80078d6:	e7d9      	b.n	800788c <_fflush_r+0xc>
 80078d8:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <_fflush_r+0x70>)
 80078da:	429c      	cmp	r4, r3
 80078dc:	d101      	bne.n	80078e2 <_fflush_r+0x62>
 80078de:	68ac      	ldr	r4, [r5, #8]
 80078e0:	e7df      	b.n	80078a2 <_fflush_r+0x22>
 80078e2:	4b04      	ldr	r3, [pc, #16]	; (80078f4 <_fflush_r+0x74>)
 80078e4:	429c      	cmp	r4, r3
 80078e6:	bf08      	it	eq
 80078e8:	68ec      	ldreq	r4, [r5, #12]
 80078ea:	e7da      	b.n	80078a2 <_fflush_r+0x22>
 80078ec:	08007b5c 	.word	0x08007b5c
 80078f0:	08007b7c 	.word	0x08007b7c
 80078f4:	08007b3c 	.word	0x08007b3c

080078f8 <_lseek_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4d07      	ldr	r5, [pc, #28]	; (8007918 <_lseek_r+0x20>)
 80078fc:	4604      	mov	r4, r0
 80078fe:	4608      	mov	r0, r1
 8007900:	4611      	mov	r1, r2
 8007902:	2200      	movs	r2, #0
 8007904:	602a      	str	r2, [r5, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	f7fa fa5e 	bl	8001dc8 <_lseek>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_lseek_r+0x1e>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_lseek_r+0x1e>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	200003f8 	.word	0x200003f8

0800791c <__swhatbuf_r>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	460e      	mov	r6, r1
 8007920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007924:	2900      	cmp	r1, #0
 8007926:	b096      	sub	sp, #88	; 0x58
 8007928:	4614      	mov	r4, r2
 800792a:	461d      	mov	r5, r3
 800792c:	da08      	bge.n	8007940 <__swhatbuf_r+0x24>
 800792e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	602a      	str	r2, [r5, #0]
 8007936:	061a      	lsls	r2, r3, #24
 8007938:	d410      	bmi.n	800795c <__swhatbuf_r+0x40>
 800793a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793e:	e00e      	b.n	800795e <__swhatbuf_r+0x42>
 8007940:	466a      	mov	r2, sp
 8007942:	f000 f8bb 	bl	8007abc <_fstat_r>
 8007946:	2800      	cmp	r0, #0
 8007948:	dbf1      	blt.n	800792e <__swhatbuf_r+0x12>
 800794a:	9a01      	ldr	r2, [sp, #4]
 800794c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007954:	425a      	negs	r2, r3
 8007956:	415a      	adcs	r2, r3
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	e7ee      	b.n	800793a <__swhatbuf_r+0x1e>
 800795c:	2340      	movs	r3, #64	; 0x40
 800795e:	2000      	movs	r0, #0
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	b016      	add	sp, #88	; 0x58
 8007964:	bd70      	pop	{r4, r5, r6, pc}
	...

08007968 <__smakebuf_r>:
 8007968:	898b      	ldrh	r3, [r1, #12]
 800796a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800796c:	079d      	lsls	r5, r3, #30
 800796e:	4606      	mov	r6, r0
 8007970:	460c      	mov	r4, r1
 8007972:	d507      	bpl.n	8007984 <__smakebuf_r+0x1c>
 8007974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	2301      	movs	r3, #1
 800797e:	6163      	str	r3, [r4, #20]
 8007980:	b002      	add	sp, #8
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	ab01      	add	r3, sp, #4
 8007986:	466a      	mov	r2, sp
 8007988:	f7ff ffc8 	bl	800791c <__swhatbuf_r>
 800798c:	9900      	ldr	r1, [sp, #0]
 800798e:	4605      	mov	r5, r0
 8007990:	4630      	mov	r0, r6
 8007992:	f7ff fa57 	bl	8006e44 <_malloc_r>
 8007996:	b948      	cbnz	r0, 80079ac <__smakebuf_r+0x44>
 8007998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800799c:	059a      	lsls	r2, r3, #22
 800799e:	d4ef      	bmi.n	8007980 <__smakebuf_r+0x18>
 80079a0:	f023 0303 	bic.w	r3, r3, #3
 80079a4:	f043 0302 	orr.w	r3, r3, #2
 80079a8:	81a3      	strh	r3, [r4, #12]
 80079aa:	e7e3      	b.n	8007974 <__smakebuf_r+0xc>
 80079ac:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <__smakebuf_r+0x7c>)
 80079ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	6020      	str	r0, [r4, #0]
 80079b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	9b00      	ldr	r3, [sp, #0]
 80079bc:	6163      	str	r3, [r4, #20]
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	6120      	str	r0, [r4, #16]
 80079c2:	b15b      	cbz	r3, 80079dc <__smakebuf_r+0x74>
 80079c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079c8:	4630      	mov	r0, r6
 80079ca:	f000 f889 	bl	8007ae0 <_isatty_r>
 80079ce:	b128      	cbz	r0, 80079dc <__smakebuf_r+0x74>
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	f023 0303 	bic.w	r3, r3, #3
 80079d6:	f043 0301 	orr.w	r3, r3, #1
 80079da:	81a3      	strh	r3, [r4, #12]
 80079dc:	89a0      	ldrh	r0, [r4, #12]
 80079de:	4305      	orrs	r5, r0
 80079e0:	81a5      	strh	r5, [r4, #12]
 80079e2:	e7cd      	b.n	8007980 <__smakebuf_r+0x18>
 80079e4:	08006c5d 	.word	0x08006c5d

080079e8 <__malloc_lock>:
 80079e8:	4801      	ldr	r0, [pc, #4]	; (80079f0 <__malloc_lock+0x8>)
 80079ea:	f7ff ba09 	b.w	8006e00 <__retarget_lock_acquire_recursive>
 80079ee:	bf00      	nop
 80079f0:	200003ec 	.word	0x200003ec

080079f4 <__malloc_unlock>:
 80079f4:	4801      	ldr	r0, [pc, #4]	; (80079fc <__malloc_unlock+0x8>)
 80079f6:	f7ff ba04 	b.w	8006e02 <__retarget_lock_release_recursive>
 80079fa:	bf00      	nop
 80079fc:	200003ec 	.word	0x200003ec

08007a00 <_free_r>:
 8007a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a02:	2900      	cmp	r1, #0
 8007a04:	d044      	beq.n	8007a90 <_free_r+0x90>
 8007a06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a0a:	9001      	str	r0, [sp, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a12:	bfb8      	it	lt
 8007a14:	18e4      	addlt	r4, r4, r3
 8007a16:	f7ff ffe7 	bl	80079e8 <__malloc_lock>
 8007a1a:	4a1e      	ldr	r2, [pc, #120]	; (8007a94 <_free_r+0x94>)
 8007a1c:	9801      	ldr	r0, [sp, #4]
 8007a1e:	6813      	ldr	r3, [r2, #0]
 8007a20:	b933      	cbnz	r3, 8007a30 <_free_r+0x30>
 8007a22:	6063      	str	r3, [r4, #4]
 8007a24:	6014      	str	r4, [r2, #0]
 8007a26:	b003      	add	sp, #12
 8007a28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a2c:	f7ff bfe2 	b.w	80079f4 <__malloc_unlock>
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d908      	bls.n	8007a46 <_free_r+0x46>
 8007a34:	6825      	ldr	r5, [r4, #0]
 8007a36:	1961      	adds	r1, r4, r5
 8007a38:	428b      	cmp	r3, r1
 8007a3a:	bf01      	itttt	eq
 8007a3c:	6819      	ldreq	r1, [r3, #0]
 8007a3e:	685b      	ldreq	r3, [r3, #4]
 8007a40:	1949      	addeq	r1, r1, r5
 8007a42:	6021      	streq	r1, [r4, #0]
 8007a44:	e7ed      	b.n	8007a22 <_free_r+0x22>
 8007a46:	461a      	mov	r2, r3
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	b10b      	cbz	r3, 8007a50 <_free_r+0x50>
 8007a4c:	42a3      	cmp	r3, r4
 8007a4e:	d9fa      	bls.n	8007a46 <_free_r+0x46>
 8007a50:	6811      	ldr	r1, [r2, #0]
 8007a52:	1855      	adds	r5, r2, r1
 8007a54:	42a5      	cmp	r5, r4
 8007a56:	d10b      	bne.n	8007a70 <_free_r+0x70>
 8007a58:	6824      	ldr	r4, [r4, #0]
 8007a5a:	4421      	add	r1, r4
 8007a5c:	1854      	adds	r4, r2, r1
 8007a5e:	42a3      	cmp	r3, r4
 8007a60:	6011      	str	r1, [r2, #0]
 8007a62:	d1e0      	bne.n	8007a26 <_free_r+0x26>
 8007a64:	681c      	ldr	r4, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	6053      	str	r3, [r2, #4]
 8007a6a:	4421      	add	r1, r4
 8007a6c:	6011      	str	r1, [r2, #0]
 8007a6e:	e7da      	b.n	8007a26 <_free_r+0x26>
 8007a70:	d902      	bls.n	8007a78 <_free_r+0x78>
 8007a72:	230c      	movs	r3, #12
 8007a74:	6003      	str	r3, [r0, #0]
 8007a76:	e7d6      	b.n	8007a26 <_free_r+0x26>
 8007a78:	6825      	ldr	r5, [r4, #0]
 8007a7a:	1961      	adds	r1, r4, r5
 8007a7c:	428b      	cmp	r3, r1
 8007a7e:	bf04      	itt	eq
 8007a80:	6819      	ldreq	r1, [r3, #0]
 8007a82:	685b      	ldreq	r3, [r3, #4]
 8007a84:	6063      	str	r3, [r4, #4]
 8007a86:	bf04      	itt	eq
 8007a88:	1949      	addeq	r1, r1, r5
 8007a8a:	6021      	streq	r1, [r4, #0]
 8007a8c:	6054      	str	r4, [r2, #4]
 8007a8e:	e7ca      	b.n	8007a26 <_free_r+0x26>
 8007a90:	b003      	add	sp, #12
 8007a92:	bd30      	pop	{r4, r5, pc}
 8007a94:	200003f0 	.word	0x200003f0

08007a98 <_read_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d07      	ldr	r5, [pc, #28]	; (8007ab8 <_read_r+0x20>)
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	4608      	mov	r0, r1
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	602a      	str	r2, [r5, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f7fa f92e 	bl	8001d08 <_read>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_read_r+0x1e>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_read_r+0x1e>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	200003f8 	.word	0x200003f8

08007abc <_fstat_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d07      	ldr	r5, [pc, #28]	; (8007adc <_fstat_r+0x20>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	f7fa f962 	bl	8001d92 <_fstat>
 8007ace:	1c43      	adds	r3, r0, #1
 8007ad0:	d102      	bne.n	8007ad8 <_fstat_r+0x1c>
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	b103      	cbz	r3, 8007ad8 <_fstat_r+0x1c>
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	bd38      	pop	{r3, r4, r5, pc}
 8007ada:	bf00      	nop
 8007adc:	200003f8 	.word	0x200003f8

08007ae0 <_isatty_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4d06      	ldr	r5, [pc, #24]	; (8007afc <_isatty_r+0x1c>)
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	4608      	mov	r0, r1
 8007aea:	602b      	str	r3, [r5, #0]
 8007aec:	f7fa f961 	bl	8001db2 <_isatty>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_isatty_r+0x1a>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_isatty_r+0x1a>
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	200003f8 	.word	0x200003f8

08007b00 <_init>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	bf00      	nop
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr

08007b0c <_fini>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr
